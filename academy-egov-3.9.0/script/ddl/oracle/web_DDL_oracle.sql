--
-- Create Schema Script 
--   Database Version          : 11.2.0.1.0 
--   Database Compatible Level : 11.2.0.0.0 
--   Script Compatible Level   : 11.2.0.0.0 
--   Toad Version              : 11.6.0.43 
--   DB Connect String         : ORCL 
--   Schema                    : WILLBES_GOSI 
--   Script Created by         : WILLBES_GOSI 
--   Script Created at         : 2020-04-02 오후 2:21:51 
--   Physical Location         :  
--   Notes                     :  
--

-- Object Counts: 
--   Functions: 21      Lines of Code: 996 
--   Indexes: 106       Columns: 194        
--   Packages: 5        Lines of Code: 96 
--   Procedures: 19     Lines of Code: 1569 
--   Sequences: 85 
--   Tables: 144        Columns: 1679       Constraints: 426    
--   Views: 4           Columns: 19         


-- "Set define off" turns off substitution variables. 
Set define off; 

--
-- SC_TRAN_SEQ  (Sequence) 
--
CREATE SEQUENCE SC_TRAN_SEQ
  START WITH 73786
  MAXVALUE 99999999
  MINVALUE 1
  CYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_ACCEPTTIMENO_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_ACCEPTTIMENO_ID
  START WITH 25420
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_ACCOUNT_ACCOUNTID  (Sequence) 
--
CREATE SEQUENCE SEQ_ACCOUNT_ACCOUNTID
  START WITH 11084
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_ACCOUNT_RECOGTIMEID  (Sequence) 
--
CREATE SEQUENCE SEQ_ACCOUNT_RECOGTIMEID
  START WITH 24640
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_ANSWERNO_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_ANSWERNO_ID
  START WITH 9620
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_ATTACHFILE_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_ATTACHFILE_ID
  START WITH 57520
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_AUTHORITYGROUP_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_AUTHORITYGROUP_ID
  START WITH 20
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_AUTHORITY_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_AUTHORITY_ID
  START WITH 40
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_BOARDCOMMENT_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_BOARDCOMMENT_ID
  START WITH 100
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_BOARDCONTENT_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_BOARDCONTENT_ID
  START WITH 580
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_BOARDFILE_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_BOARDFILE_ID
  START WITH 340
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_BOARD_BOARD_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_BOARD_BOARD_ID
  START WITH 100
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_BOXRENT_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_BOXRENT_ID
  START WITH 5110
  MAXVALUE 99999999999
  MINVALUE 1
  NOCYCLE
  CACHE 10
  NOORDER;


--
-- SEQ_CERTCONTENTSNO_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_CERTCONTENTSNO_ID
  START WITH 21
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_CERTLOGNO_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_CERTLOGNO_ID
  START WITH 901
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_CERTNO_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_CERTNO_ID
  START WITH 1181
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  ORDER;


--
-- SEQ_COURSEREQUESTACHIEVE_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_COURSEREQUESTACHIEVE_ID
  START WITH 140
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_COURSEREQUESTCERT_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_COURSEREQUESTCERT_ID
  START WITH 380
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_COURSEREQUESTEDU_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_COURSEREQUESTEDU_ID
  START WITH 80
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_COURSEREQUESTEXPERIENCE_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_COURSEREQUESTEXPERIENCE_ID
  START WITH 180
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_COURSEREQUESTLICENSE_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_COURSEREQUESTLICENSE_ID
  START WITH 120
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_COURSEREQUESTPRIZE_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_COURSEREQUESTPRIZE_ID
  START WITH 80
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_COURSEREQUEST_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_COURSEREQUEST_ID
  START WITH 220
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_CP_KIRB_ACCOUNT_INFO_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_CP_KIRB_ACCOUNT_INFO_ID
  START WITH 41
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_CP_WILLBES_ACCOUNT_INFO_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_CP_WILLBES_ACCOUNT_INFO_ID
  START WITH 61
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_DISCUSSION_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_DISCUSSION_ID
  START WITH 40
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_EDUATTEND_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_EDUATTEND_ID
  START WITH 16640
  MAXVALUE 999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  ORDER;


--
-- SEQ_EDUBOARDCOMMENT_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_EDUBOARDCOMMENT_ID
  START WITH 21
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_EDUBOARDCONTENT_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_EDUBOARDCONTENT_ID
  START WITH 221
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_EDUBOARDFILE_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_EDUBOARDFILE_ID
  START WITH 81
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_EDUBOARD_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_EDUBOARD_ID
  START WITH 2481
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_EDUCODE_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_EDUCODE_ID
  START WITH 494
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_EDUESTIMATIONINFOMAP_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_EDUESTIMATIONINFOMAP_ID
  START WITH 900
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_EDUESTIMATIONINFO_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_EDUESTIMATIONINFO_ID
  START WITH 220
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_EDUGRADENO_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_EDUGRADENO_ID
  START WITH 80
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_EDUINSTRUCTOR_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_EDUINSTRUCTOR_ID
  START WITH 1240
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_EDUJUDGEINFODETAIL_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_EDUJUDGEINFODETAIL_ID
  START WITH 920
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_EDULECTUREINFO_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_EDULECTUREINFO_ID
  START WITH 1020
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_EDULECTUREREQUESTNO_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_EDULECTUREREQUESTNO_ID
  START WITH 20
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_EDULECTURE_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_EDULECTURE_ID
  START WITH 20440
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_EDUSUBJECTINFO_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_EDUSUBJECTINFO_ID
  START WITH 1080
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_EDUSUBJECTPROGRESS_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_EDUSUBJECTPROGRESS_ID
  START WITH 60
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_EDUTASKNO  (Sequence) 
--
CREATE SEQUENCE SEQ_EDUTASKNO
  START WITH 181
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_EDUTASKSUBMITNO  (Sequence) 
--
CREATE SEQUENCE SEQ_EDUTASKSUBMITNO
  START WITH 101
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_EDU_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_EDU_ID
  START WITH 940
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_ESTIMATIONNO_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_ESTIMATIONNO_ID
  START WITH 1340
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_EXAMNO_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_EXAMNO_ID
  START WITH 200
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_EXAMPLENO_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_EXAMPLENO_ID
  START WITH 1180
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_ITEMNO_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_ITEMNO_ID
  START WITH 249920
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_MESSAGE_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_MESSAGE_ID
  START WITH 260
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_NOTE_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_NOTE_ID
  START WITH 4301
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_PAYMENT_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_PAYMENT_ID
  START WITH 18160
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_POPUP_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_POPUP_ID
  START WITH 40
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_PRD_EVENT  (Sequence) 
--
CREATE SEQUENCE SEQ_PRD_EVENT
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--
-- SEQ_QUESTIONNO_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_QUESTIONNO_ID
  START WITH 420
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_TAKENO_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_TAKENO_ID
  START WITH 1260
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_TATTACHFILE_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_TATTACHFILE_ID
  START WITH 11972
  MAXVALUE 9999999999999999999999999999
  MINVALUE 2
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_TBA_CONFIG_CD_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_TBA_CONFIG_CD_ID
  START WITH 481
  MAXVALUE 99999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_TBOARDTEST_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_TBOARDTEST_ID
  START WITH 61
  MAXVALUE 9999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_TB_BANNER  (Sequence) 
--
CREATE SEQUENCE SEQ_TB_BANNER
  START WITH 2195
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 30
  NOORDER;


--
-- SEQ_TB_BOARD_CS_SEQ  (Sequence) 
--
CREATE SEQUENCE SEQ_TB_BOARD_CS_SEQ
  START WITH 5621
  MAXVALUE 999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_TB_CATEGORY_INFO_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_TB_CATEGORY_INFO_ID
  START WITH 260
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_TB_CA_BOOK_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_TB_CA_BOOK_ID
  START WITH 2460
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1000
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_TB_CC_CART_SEQ  (Sequence) 
--
CREATE SEQUENCE SEQ_TB_CC_CART_SEQ
  START WITH 101240
  MAXVALUE 999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_TB_LEC_MST_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_TB_LEC_MST_ID
  START WITH 0
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_TB_MILEAGE_IDX  (Sequence) 
--
CREATE SEQUENCE SEQ_TB_MILEAGE_IDX
  START WITH 19940
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 10
  NOORDER;


--
-- SEQ_TB_OFF_CC_CART_SEQ  (Sequence) 
--
CREATE SEQUENCE SEQ_TB_OFF_CC_CART_SEQ
  START WITH 21
  MAXVALUE 99999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_TB_OFF_ORDER_MGNT_NO_SEQ  (Sequence) 
--
CREATE SEQUENCE SEQ_TB_OFF_ORDER_MGNT_NO_SEQ
  START WITH 0
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_TB_OFF_REFUND_IDX  (Sequence) 
--
CREATE SEQUENCE SEQ_TB_OFF_REFUND_IDX
  START WITH 2958
  MAXVALUE 99999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_TB_ORDER_MGNT_NO_SEQ  (Sequence) 
--
CREATE SEQUENCE SEQ_TB_ORDER_MGNT_NO_SEQ
  START WITH 0
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_TB_PAYSETTLEMENT  (Sequence) 
--
CREATE SEQUENCE SEQ_TB_PAYSETTLEMENT
  START WITH 561
  MAXVALUE 999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_TB_PAYSETTLEMENT_ADD  (Sequence) 
--
CREATE SEQUENCE SEQ_TB_PAYSETTLEMENT_ADD
  START WITH 21
  MAXVALUE 999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_TB_PMP_DOWNLOG_IDX  (Sequence) 
--
CREATE SEQUENCE SEQ_TB_PMP_DOWNLOG_IDX
  START WITH 96631
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 30
  NOORDER;


--
-- SEQ_TB_SG_SITE_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_TB_SG_SITE_ID
  START WITH 20
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_TB_TM_BOARD_IDX  (Sequence) 
--
CREATE SEQUENCE SEQ_TB_TM_BOARD_IDX
  START WITH 62661
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 10
  NOORDER;


--
-- SEQ_TB_TM_USERS_IDX  (Sequence) 
--
CREATE SEQUENCE SEQ_TB_TM_USERS_IDX
  START WITH 72650
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 50
  NOORDER;


--
-- SEQ_TEXAMINEEANSWER_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_TEXAMINEEANSWER_ID
  START WITH 893168
  MAXVALUE 9999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_TMOCKGRADE_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_TMOCKGRADE_ID
  START WITH 70219
  MAXVALUE 99999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_TOFFERER_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_TOFFERER_ID
  START WITH 8487
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_TOFFFILE_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_TOFFFILE_ID
  START WITH 371
  MAXVALUE 999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_TPAYMENT_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_TPAYMENT_ID
  START WITH 20
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_TREFUND_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_TREFUND_ID
  START WITH 120
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- SEQ_TUSERCHOICESUBJECT_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_TUSERCHOICESUBJECT_ID
  START WITH 65212
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- TB_OFF_CC_CART_SEQ  (Sequence) 
--
CREATE SEQUENCE TB_OFF_CC_CART_SEQ
  START WITH 1
  MAXVALUE 9999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- TRNM_SEQNO  (Sequence) 
--
CREATE SEQUENCE TRNM_SEQNO
  START WITH 24580
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- COUNSEL_RST  (Table) 
--
CREATE TABLE COUNSEL_RST
(
  SCH_DAY        VARCHAR2(10 BYTE),
  TS_IDX         NUMBER,
  USER_ID        VARCHAR2(20 BYTE),
  RESERVE        VARCHAR2(1 BYTE),
  REG_DT         DATE,
  USER_BIRTHDAY  VARCHAR2(10 BYTE),
  USER_NM        VARCHAR2(20 BYTE),
  USER_PHONE     VARCHAR2(20 BYTE),
  USER_EMAIL     VARCHAR2(100 BYTE),
  USER_CATEGORY  VARCHAR2(50 BYTE),
  USER_CODE1     VARCHAR2(100 BYTE),
  USER_CODE2     VARCHAR2(100 BYTE),
  USER_PERIOD    VARCHAR2(1 BYTE),
  USER_SUBJECT   VARCHAR2(100 BYTE),
  USER_LEC       VARCHAR2(200 BYTE),
  USER_COMMENTS  VARCHAR2(2000 BYTE),
  CANCEL_DATE    DATE,
  USER_AREA      VARCHAR2(100 BYTE)
);

COMMENT ON COLUMN COUNSEL_RST.SCH_DAY IS '상담신청일자';

COMMENT ON COLUMN COUNSEL_RST.TS_IDX IS '상담신청시간';

COMMENT ON COLUMN COUNSEL_RST.USER_ID IS '사용자아이디';

COMMENT ON COLUMN COUNSEL_RST.RESERVE IS '예약신청 (Y: 예약, N: 취소)';

COMMENT ON COLUMN COUNSEL_RST.REG_DT IS '신청일시';

COMMENT ON COLUMN COUNSEL_RST.USER_BIRTHDAY IS '생년월일';

COMMENT ON COLUMN COUNSEL_RST.USER_NM IS '사용자명';

COMMENT ON COLUMN COUNSEL_RST.USER_PHONE IS '사용자연락처';

COMMENT ON COLUMN COUNSEL_RST.USER_EMAIL IS '사용자이메일';

COMMENT ON COLUMN COUNSEL_RST.USER_CATEGORY IS '응시직급(9급:001, 7급:002, 일반경찰:801, 101경비단:802, 경행특채:803, 기타:999)';

COMMENT ON COLUMN COUNSEL_RST.USER_CODE1 IS '응시직렬1';

COMMENT ON COLUMN COUNSEL_RST.USER_CODE2 IS '응시직렬2';

COMMENT ON COLUMN COUNSEL_RST.USER_PERIOD IS '수험기간 (A:6개월 미만, B:1년 미만, C:1년 이상)';

COMMENT ON COLUMN COUNSEL_RST.USER_SUBJECT IS '취약과목';

COMMENT ON COLUMN COUNSEL_RST.USER_LEC IS '수강여부 (F:학원, O:동영상, E:기타)';

COMMENT ON COLUMN COUNSEL_RST.USER_COMMENTS IS '상세정보';

COMMENT ON COLUMN COUNSEL_RST.CANCEL_DATE IS '취소일시';

COMMENT ON COLUMN COUNSEL_RST.USER_AREA IS '응시지역';



--
-- COUNSEL_SCH  (Table) 
--
CREATE TABLE COUNSEL_SCH
(
  SCH_DAY   VARCHAR2(10 BYTE),
  TS_IDX    NUMBER,
  MAX_USR   NUMBER,
  REQ_CNT   NUMBER                              DEFAULT 0,
  ISUSE     VARCHAR2(1 BYTE),
  REQ_TYPE  VARCHAR2(1 BYTE)                    DEFAULT 'A',
  CAT_CD    VARCHAR2(20 BYTE)
);

COMMENT ON COLUMN COUNSEL_SCH.SCH_DAY IS '상담날짜';

COMMENT ON COLUMN COUNSEL_SCH.TS_IDX IS '시간표';

COMMENT ON COLUMN COUNSEL_SCH.MAX_USR IS '상담정원';

COMMENT ON COLUMN COUNSEL_SCH.REQ_CNT IS '신청인원';

COMMENT ON COLUMN COUNSEL_SCH.ISUSE IS '사용여부';

COMMENT ON COLUMN COUNSEL_SCH.REQ_TYPE IS '신청대상구분(A:회원,S:수강생)';

COMMENT ON COLUMN COUNSEL_SCH.CAT_CD IS '직종구분코드';



--
-- COUNSEL_TIME  (Table) 
--
CREATE TABLE COUNSEL_TIME
(
  IDX       NUMBER,
  TIME_SET  VARCHAR2(100 BYTE),
  ISUSE     VARCHAR2(1 BYTE)                    DEFAULT 'Y'
);

COMMENT ON COLUMN COUNSEL_TIME.IDX IS '일련번호';

COMMENT ON COLUMN COUNSEL_TIME.TIME_SET IS '시간표';

COMMENT ON COLUMN COUNSEL_TIME.ISUSE IS '시간표사용여부';



--
-- MB_ACCESS_LOG  (Table) 
--
CREATE TABLE MB_ACCESS_LOG
(
  ACCESS_DT  DATE,
  USERID     VARCHAR2(20 BYTE),
  USER_IP    VARCHAR2(100 BYTE)
);


--
-- TB_BANNER  (Table) 
--
CREATE TABLE TB_BANNER
(
  SEQ                     NUMBER                NOT NULL,
  ONOFF_DIV               VARCHAR2(1 BYTE),
  SCREEN_GUBUN            VARCHAR2(1 BYTE),
  CATEGORY_CD             VARCHAR2(100 BYTE),
  BANNER_NO               NUMBER,
  BANNER_TITLE            VARCHAR2(100 BYTE),
  BANNER_IMAGE            VARCHAR2(100 BYTE),
  BANNER_THUMBNAIL_IMAGE  VARCHAR2(100 BYTE),
  BANNER_LINK             VARCHAR2(1000 BYTE),
  BANNER_LINK_TARGET      VARCHAR2(1 BYTE),
  OPEN_STARTDATE          DATE,
  OPEN_ENDDATE            DATE,
  ISUSE                   VARCHAR2(1 BYTE),
  VIEW_COUNT              NUMBER,
  REG_DT                  DATE,
  REG_ID                  VARCHAR2(30 BYTE),
  UPD_DT                  DATE,
  UPD_ID                  VARCHAR2(30 BYTE),
  ROL_IDX                 NUMBER,
  BANNER_TYP              VARCHAR2(1 BYTE)
);

COMMENT ON COLUMN TB_BANNER.SEQ IS '순번';

COMMENT ON COLUMN TB_BANNER.ONOFF_DIV IS '온라인, 오프라인 구분';

COMMENT ON COLUMN TB_BANNER.SCREEN_GUBUN IS '화면구분(허브, 메인, 서브메인 등)';

COMMENT ON COLUMN TB_BANNER.CATEGORY_CD IS '직급코드';

COMMENT ON COLUMN TB_BANNER.BANNER_NO IS '배너 순서';

COMMENT ON COLUMN TB_BANNER.BANNER_TITLE IS '배너 제목';

COMMENT ON COLUMN TB_BANNER.BANNER_IMAGE IS '배너 이미지 파일 경로(신규 미사용)';

COMMENT ON COLUMN TB_BANNER.BANNER_THUMBNAIL_IMAGE IS '배너 썸네일 이미지 파일 경로(신규 미사용)';

COMMENT ON COLUMN TB_BANNER.BANNER_LINK IS '배너 링크(신규 미사용)';

COMMENT ON COLUMN TB_BANNER.BANNER_LINK_TARGET IS '배너 링크 타겟(1 : 현재창, 2 : 새창)(신규 미사용)';

COMMENT ON COLUMN TB_BANNER.OPEN_STARTDATE IS '배너 오픈 시작일';

COMMENT ON COLUMN TB_BANNER.OPEN_ENDDATE IS '배너 오픈 종료일';

COMMENT ON COLUMN TB_BANNER.ISUSE IS '활성화여부(Y:활성, N:비활성)';

COMMENT ON COLUMN TB_BANNER.VIEW_COUNT IS '배너 클릭 횟수';

COMMENT ON COLUMN TB_BANNER.REG_DT IS '등록일자';

COMMENT ON COLUMN TB_BANNER.REG_ID IS '등록자 아이디';

COMMENT ON COLUMN TB_BANNER.UPD_DT IS '수정일자';

COMMENT ON COLUMN TB_BANNER.UPD_ID IS '수정자 아이디';

COMMENT ON COLUMN TB_BANNER.ROL_IDX IS '배너 순서(신규 미사용)';

COMMENT ON COLUMN TB_BANNER.BANNER_TYP IS '배너유형(I:이미지형, L:강좌형, B:게시판형)';



--
-- TB_BANNER_ITEM  (Table) 
--
CREATE TABLE TB_BANNER_ITEM
(
  SEQ                     NUMBER                NOT NULL,
  P_SEQ                   NUMBER,
  ROL_IDX                 NUMBER,
  BANNER_SUBTITLE         VARCHAR2(100 BYTE),
  BANNER_NOTE             VARCHAR2(1000 BYTE),
  BANNER_IMAGE            VARCHAR2(100 BYTE),
  BANNER_THUMBNAIL_IMAGE  VARCHAR2(100 BYTE),
  BANNER_LINK             VARCHAR2(1000 BYTE),
  BANNER_LINK_TARGET      VARCHAR2(1 BYTE),
  BANNER_SDT              DATE,
  BANNER_EDT              DATE,
  CLICK_CNT               NUMBER,
  ISUSE                   VARCHAR2(1 BYTE),
  REG_DT                  DATE,
  REG_ID                  VARCHAR2(30 BYTE),
  UPD_DT                  DATE,
  UPD_ID                  VARCHAR2(30 BYTE)
);

COMMENT ON COLUMN TB_BANNER_ITEM.SEQ IS '순번';

COMMENT ON COLUMN TB_BANNER_ITEM.P_SEQ IS '상위배너 순번';

COMMENT ON COLUMN TB_BANNER_ITEM.ROL_IDX IS '배너 순서';

COMMENT ON COLUMN TB_BANNER_ITEM.BANNER_SUBTITLE IS '배너 제목';

COMMENT ON COLUMN TB_BANNER_ITEM.BANNER_NOTE IS '배너 내용';

COMMENT ON COLUMN TB_BANNER_ITEM.BANNER_IMAGE IS '배너 이미지 파일 경로';

COMMENT ON COLUMN TB_BANNER_ITEM.BANNER_THUMBNAIL_IMAGE IS '배너 썸네일 이미지 파일 경로';

COMMENT ON COLUMN TB_BANNER_ITEM.BANNER_LINK IS '배너 링크';

COMMENT ON COLUMN TB_BANNER_ITEM.BANNER_LINK_TARGET IS '배너 링크 타겟(1 : 현재창, 2 : 새창)';

COMMENT ON COLUMN TB_BANNER_ITEM.BANNER_SDT IS '배너 오픈 시작일';

COMMENT ON COLUMN TB_BANNER_ITEM.BANNER_EDT IS '배너 오픈 종료일';

COMMENT ON COLUMN TB_BANNER_ITEM.CLICK_CNT IS '배너 클릭 횟수';

COMMENT ON COLUMN TB_BANNER_ITEM.ISUSE IS '활성화여부(Y:활성, N:비활성)';

COMMENT ON COLUMN TB_BANNER_ITEM.REG_DT IS '등록일자';

COMMENT ON COLUMN TB_BANNER_ITEM.REG_ID IS '등록자 아이디';

COMMENT ON COLUMN TB_BANNER_ITEM.UPD_DT IS '수정일자';

COMMENT ON COLUMN TB_BANNER_ITEM.UPD_ID IS '수정자 아이디';



--
-- TB_BA_CONFIG_CD  (Table) 
--
CREATE TABLE TB_BA_CONFIG_CD
(
  CODE_CD    VARCHAR2(20 BYTE)                  NOT NULL,
  CODE_SEQ   NUMBER                             NOT NULL,
  SYS_NM     VARCHAR2(100 BYTE),
  CODE_NM    VARCHAR2(100 BYTE),
  CODE_VAL   VARCHAR2(20 BYTE),
  CODE_NO    VARCHAR2(1000 BYTE),
  ISUSE      VARCHAR2(1 BYTE),
  REG_DT     DATE,
  REG_ID     VARCHAR2(30 BYTE),
  UPD_DT     DATE,
  UPD_ID     VARCHAR2(30 BYTE),
  P_CODE_CD  VARCHAR2(20 BYTE)
);

COMMENT ON TABLE TB_BA_CONFIG_CD IS '통합_공통코드';

COMMENT ON COLUMN TB_BA_CONFIG_CD.CODE_CD IS '설정코드';

COMMENT ON COLUMN TB_BA_CONFIG_CD.CODE_SEQ IS '일련번호';

COMMENT ON COLUMN TB_BA_CONFIG_CD.SYS_NM IS '공통코드명';

COMMENT ON COLUMN TB_BA_CONFIG_CD.CODE_NM IS '설정코드명';

COMMENT ON COLUMN TB_BA_CONFIG_CD.CODE_VAL IS '설정값';

COMMENT ON COLUMN TB_BA_CONFIG_CD.CODE_NO IS '일련번호';

COMMENT ON COLUMN TB_BA_CONFIG_CD.ISUSE IS '상태(Y:활성 , N:비활성)';

COMMENT ON COLUMN TB_BA_CONFIG_CD.REG_DT IS '등록일';

COMMENT ON COLUMN TB_BA_CONFIG_CD.REG_ID IS '등록자 아이디';

COMMENT ON COLUMN TB_BA_CONFIG_CD.UPD_DT IS '수정일';

COMMENT ON COLUMN TB_BA_CONFIG_CD.UPD_ID IS '수정자 아이디';

COMMENT ON COLUMN TB_BA_CONFIG_CD.P_CODE_CD IS '상위코드';



--
-- TB_BOARD_FILE  (Table) 
--
CREATE TABLE TB_BOARD_FILE
(
  BOARD_MNG_SEQ     VARCHAR2(20 BYTE),
  BOARD_SEQ         VARCHAR2(20 BYTE),
  FILE_NO           VARCHAR2(20 BYTE)           NOT NULL,
  FILE_NAME         VARCHAR2(100 BYTE),
  FILE_PATH         VARCHAR2(100 BYTE),
  REG_ID            VARCHAR2(30 BYTE),
  REG_DT            DATE,
  UPD_ID            VARCHAR2(30 BYTE),
  UPD_DT            DATE,
  PARENT_BOARD_SEQ  VARCHAR2(20 BYTE)
);


--
-- TB_BOARD_MNG  (Table) 
--
CREATE TABLE TB_BOARD_MNG
(
  ONOFF_DIV       VARCHAR2(1 BYTE)              NOT NULL,
  BOARD_MNG_SEQ   VARCHAR2(20 BYTE)             NOT NULL,
  BOARD_MNG_NAME  VARCHAR2(200 BYTE)            NOT NULL,
  BOARD_MNG_TYPE  VARCHAR2(20 BYTE),
  ATTACH_FILE_YN  VARCHAR2(1 BYTE),
  OPEN_YN         VARCHAR2(1 BYTE),
  REPLY_YN        VARCHAR2(1 BYTE),
  ISUSE           VARCHAR2(1 BYTE),
  REG_DT          DATE,
  REG_ID          VARCHAR2(30 BYTE),
  UPD_DT          DATE,
  UPD_ID          VARCHAR2(30 BYTE)
);

COMMENT ON COLUMN TB_BOARD_MNG.ONOFF_DIV IS '온라인오프라인 구분코드(O: 온라인, F: 오프라인)';

COMMENT ON COLUMN TB_BOARD_MNG.BOARD_MNG_SEQ IS '게시판 관리 SEQ
';

COMMENT ON COLUMN TB_BOARD_MNG.BOARD_MNG_NAME IS '게시판 명
';

COMMENT ON COLUMN TB_BOARD_MNG.BOARD_MNG_TYPE IS '게시판 분류(공지사항, 게시판 , FAQ)';

COMMENT ON COLUMN TB_BOARD_MNG.ATTACH_FILE_YN IS '첨부파일코드(Y: 첨부파일등록, N: 첨부파일미등록)
무조건 Y로 등록한다
';

COMMENT ON COLUMN TB_BOARD_MNG.OPEN_YN IS '공개, 비공개여부 (Y: 공개, N:비공개)
무조건 Y로 등록
';

COMMENT ON COLUMN TB_BOARD_MNG.REPLY_YN IS '답변여부(Y: 답변완료, N:답변미완료)
';

COMMENT ON COLUMN TB_BOARD_MNG.ISUSE IS '게시판사용유무(Y: 사용, N: 미사용)';

COMMENT ON COLUMN TB_BOARD_MNG.REG_DT IS '등록일';

COMMENT ON COLUMN TB_BOARD_MNG.REG_ID IS '등록아이디';

COMMENT ON COLUMN TB_BOARD_MNG.UPD_DT IS '수정일';

COMMENT ON COLUMN TB_BOARD_MNG.UPD_ID IS '수정아이디';



--
-- TB_BOARD_VOTING  (Table) 
--
CREATE TABLE TB_BOARD_VOTING
(
  BOARD_MNG_SEQ  VARCHAR2(20 BYTE)              NOT NULL,
  BOARD_SEQ      VARCHAR2(20 BYTE)              NOT NULL,
  REG_ID         VARCHAR2(30 BYTE)              NOT NULL,
  ISTYPE         VARCHAR2(1 BYTE)               NOT NULL,
  VOTING         VARCHAR2(1 BYTE),
  REG_DT         DATE                           DEFAULT SYSDATE
);

COMMENT ON TABLE TB_BOARD_VOTING IS '게시판의 찬성,반대, 추천 참여정보를 기록한다. 중복참여 방지 위한 히스토리 엔티티이다';

COMMENT ON COLUMN TB_BOARD_VOTING.BOARD_MNG_SEQ IS '게시판코드';

COMMENT ON COLUMN TB_BOARD_VOTING.BOARD_SEQ IS '게시물번호';

COMMENT ON COLUMN TB_BOARD_VOTING.REG_ID IS '회원ID';

COMMENT ON COLUMN TB_BOARD_VOTING.ISTYPE IS '참여구분[추천[R],찬성반대[A]에 대한 구분값]';

COMMENT ON COLUMN TB_BOARD_VOTING.VOTING IS '참여등록값[Y:찬성,추천, N:반대]';

COMMENT ON COLUMN TB_BOARD_VOTING.REG_DT IS '등록일[현재일이 등록됨]';



--
-- TB_COMMON_PASSWORD  (Table) 
--
CREATE TABLE TB_COMMON_PASSWORD
(
  COMMON_PWD  VARCHAR2(100 BYTE),
  PWD_DESC    VARCHAR2(100 BYTE)
);


--
-- TB_DDAY  (Table) 
--
CREATE TABLE TB_DDAY
(
  DDAY_IDX       NUMBER                         NOT NULL,
  USER_ID        VARCHAR2(20 BYTE)              NOT NULL,
  DDAY_TYPE      VARCHAR2(1 BYTE)               NOT NULL,
  DDAY_CATEGORY  VARCHAR2(20 BYTE),
  DDAY_NAME      VARCHAR2(200 BYTE),
  DDAY_DATE      VARCHAR2(10 BYTE),
  REGDATE        DATE                           NOT NULL,
  DDAY_LINK      NUMBER,
  DDAY_ACTIVE    VARCHAR2(1 BYTE)
);


--
-- TB_MA_MEMBER  (Table) 
--
CREATE TABLE TB_MA_MEMBER
(
  USER_ID        VARCHAR2(30 BYTE)              NOT NULL,
  USER_NM        VARCHAR2(50 BYTE)              NOT NULL,
  USER_NICKNM    VARCHAR2(100 BYTE),
  USER_POSITION  VARCHAR2(100 BYTE),
  SEX            VARCHAR2(1 BYTE),
  USER_ROLE      VARCHAR2(20 BYTE),
  ADMIN_ROLE     VARCHAR2(20 BYTE),
  USER_PWD       VARCHAR2(100 BYTE),
  BIRTH_DAY      VARCHAR2(8 BYTE),
  EMAIL          VARCHAR2(100 BYTE),
  PHONE_NO       VARCHAR2(20 BYTE),
  ZIP_CODE       VARCHAR2(10 BYTE),
  ADDRESS1       VARCHAR2(200 BYTE),
  ADDRESS2       VARCHAR2(200 BYTE),
  USER_POINT     VARCHAR2(50 BYTE)              DEFAULT 0,
  ISUSE          VARCHAR2(1 BYTE),
  REG_DT         DATE,
  REG_ID         VARCHAR2(30 BYTE),
  UPD_DT         DATE,
  UPD_ID         VARCHAR2(30 BYTE),
  ISOK_SMS       VARCHAR2(1 BYTE),
  ISOK_EMAIL     VARCHAR2(1 BYTE)
);

COMMENT ON COLUMN TB_MA_MEMBER.USER_ID IS '아이디';

COMMENT ON COLUMN TB_MA_MEMBER.USER_NM IS '성명';

COMMENT ON COLUMN TB_MA_MEMBER.USER_NICKNM IS '별명';

COMMENT ON COLUMN TB_MA_MEMBER.USER_POSITION IS '직책 ';

COMMENT ON COLUMN TB_MA_MEMBER.SEX IS '성별';

COMMENT ON COLUMN TB_MA_MEMBER.USER_ROLE IS '사용자 권한';

COMMENT ON COLUMN TB_MA_MEMBER.ADMIN_ROLE IS '관리자 권한';

COMMENT ON COLUMN TB_MA_MEMBER.USER_PWD IS '비밀번호';

COMMENT ON COLUMN TB_MA_MEMBER.BIRTH_DAY IS '생일';

COMMENT ON COLUMN TB_MA_MEMBER.EMAIL IS '이메일';

COMMENT ON COLUMN TB_MA_MEMBER.PHONE_NO IS '핸드폰번호     ';

COMMENT ON COLUMN TB_MA_MEMBER.ZIP_CODE IS '우편번호';

COMMENT ON COLUMN TB_MA_MEMBER.ADDRESS1 IS '자택주소';

COMMENT ON COLUMN TB_MA_MEMBER.ADDRESS2 IS '자택주소 상세';

COMMENT ON COLUMN TB_MA_MEMBER.USER_POINT IS '포인트';

COMMENT ON COLUMN TB_MA_MEMBER.ISUSE IS '상태';

COMMENT ON COLUMN TB_MA_MEMBER.REG_DT IS '등록일';

COMMENT ON COLUMN TB_MA_MEMBER.REG_ID IS '등록아이디';

COMMENT ON COLUMN TB_MA_MEMBER.UPD_DT IS '수정일';

COMMENT ON COLUMN TB_MA_MEMBER.UPD_ID IS '수정아이디';

COMMENT ON COLUMN TB_MA_MEMBER.ISOK_SMS IS 'SMS 수신여부';

COMMENT ON COLUMN TB_MA_MEMBER.ISOK_EMAIL IS '이메일 수신 여부';



--
-- TB_NOTE_SEND_INFO  (Table) 
--
CREATE TABLE TB_NOTE_SEND_INFO
(
  NOTEID       NUMBER                           NOT NULL,
  FROM_USERID  VARCHAR2(30 BYTE)                NOT NULL,
  SEND_DT      DATE,
  SEND_ID      VARCHAR2(30 BYTE),
  CONT         VARCHAR2(4000 BYTE),
  READ_YN      VARCHAR2(1 BYTE)
);

COMMENT ON COLUMN TB_NOTE_SEND_INFO.NOTEID IS '노트 ID';

COMMENT ON COLUMN TB_NOTE_SEND_INFO.FROM_USERID IS '받는 회원 아이디';

COMMENT ON COLUMN TB_NOTE_SEND_INFO.SEND_DT IS '보낸일';

COMMENT ON COLUMN TB_NOTE_SEND_INFO.SEND_ID IS '보낸 아이디';

COMMENT ON COLUMN TB_NOTE_SEND_INFO.CONT IS '쪽지 내용';

COMMENT ON COLUMN TB_NOTE_SEND_INFO.READ_YN IS '쪽지 확인 여부';



--
-- TB_OFF_BOX  (Table) 
--
CREATE TABLE TB_OFF_BOX
(
  BOX_CD     VARCHAR2(10 BYTE)                  NOT NULL,
  BOX_NM     VARCHAR2(200 BYTE)                 NOT NULL,
  BOX_COUNT  NUMBER                             NOT NULL,
  BOX_PRICE  NUMBER,
  DEPOSIT    NUMBER                             DEFAULT (0),
  ROW_COUNT  NUMBER,
  ROW_NUM    NUMBER,
  UPDATE_DT  DATE                               DEFAULT sysdate,
  UPDATE_ID  VARCHAR2(30 BYTE),
  START_NUM  NUMBER,
  END_NUM    NUMBER
);

COMMENT ON COLUMN TB_OFF_BOX.BOX_CD IS '사물함코드';

COMMENT ON COLUMN TB_OFF_BOX.BOX_NM IS '사물함이름';

COMMENT ON COLUMN TB_OFF_BOX.BOX_COUNT IS '사물함갯수';

COMMENT ON COLUMN TB_OFF_BOX.BOX_PRICE IS '사물함대여금';

COMMENT ON COLUMN TB_OFF_BOX.DEPOSIT IS '예치금';

COMMENT ON COLUMN TB_OFF_BOX.ROW_COUNT IS '층수';

COMMENT ON COLUMN TB_OFF_BOX.ROW_NUM IS '가로갯수';

COMMENT ON COLUMN TB_OFF_BOX.UPDATE_DT IS '등록/수정일';

COMMENT ON COLUMN TB_OFF_BOX.UPDATE_ID IS '등록/수정자ID';

COMMENT ON COLUMN TB_OFF_BOX.START_NUM IS '사물함 시작번호';

COMMENT ON COLUMN TB_OFF_BOX.END_NUM IS '사물함 종료번호';



--
-- TB_OFF_BOX_NUM  (Table) 
--
CREATE TABLE TB_OFF_BOX_NUM
(
  BOX_CD     VARCHAR2(10 BYTE)                  NOT NULL,
  BOX_NUM    NUMBER                             NOT NULL,
  USERID     VARCHAR2(30 BYTE),
  BOX_FLAG   VARCHAR2(1 BYTE)                   DEFAULT 'N',
  UPDATE_DT  DATE                               DEFAULT sysdate,
  UPDATE_ID  VARCHAR2(30 BYTE),
  RENT_SEQ   NUMBER,
  RENT_MEMO  VARCHAR2(500 BYTE)
);

COMMENT ON COLUMN TB_OFF_BOX_NUM.BOX_CD IS '사물함코드';

COMMENT ON COLUMN TB_OFF_BOX_NUM.BOX_NUM IS '사물함번호';

COMMENT ON COLUMN TB_OFF_BOX_NUM.USERID IS '사용자ID';

COMMENT ON COLUMN TB_OFF_BOX_NUM.BOX_FLAG IS '사물함상태';

COMMENT ON COLUMN TB_OFF_BOX_NUM.UPDATE_DT IS '등록/수정일';

COMMENT ON COLUMN TB_OFF_BOX_NUM.UPDATE_ID IS '등록/수정자ID';

COMMENT ON COLUMN TB_OFF_BOX_NUM.RENT_SEQ IS '사물함대여번호';

COMMENT ON COLUMN TB_OFF_BOX_NUM.RENT_MEMO IS '사물함대여시메모';



--
-- TB_OFF_BOX_RENT  (Table) 
--
CREATE TABLE TB_OFF_BOX_RENT
(
  BOX_CD          VARCHAR2(10 BYTE),
  SEQ             NUMBER                        NOT NULL,
  BOX_NUM         NUMBER                        NOT NULL,
  USERID          VARCHAR2(30 BYTE),
  RENT_START      DATE,
  RENT_END        DATE,
  DEPOSIT         NUMBER,
  DEPOSIT_YN      VARCHAR2(20 BYTE),
  EXTEND_YN       VARCHAR2(20 BYTE),
  KEY_YN          VARCHAR2(20 BYTE),
  UPDATE_DT       DATE,
  UPDATE_ID       VARCHAR2(30 BYTE),
  RENT_TYPE       VARCHAR2(10 BYTE),
  ORDER_ID        VARCHAR2(20 BYTE),
  PAY_GUBUN       VARCHAR2(20 BYTE),
  DEPOSIT_REFUND  NUMBER,
  RENT_MEMO       VARCHAR2(500 BYTE)
);

COMMENT ON COLUMN TB_OFF_BOX_RENT.BOX_CD IS '사물함코드';

COMMENT ON COLUMN TB_OFF_BOX_RENT.SEQ IS '사물함신청번호';

COMMENT ON COLUMN TB_OFF_BOX_RENT.BOX_NUM IS '사물함번호';

COMMENT ON COLUMN TB_OFF_BOX_RENT.USERID IS '사용자ID';

COMMENT ON COLUMN TB_OFF_BOX_RENT.RENT_START IS '대여시작일';

COMMENT ON COLUMN TB_OFF_BOX_RENT.RENT_END IS '대여종료일';

COMMENT ON COLUMN TB_OFF_BOX_RENT.DEPOSIT IS '예치금';

COMMENT ON COLUMN TB_OFF_BOX_RENT.DEPOSIT_YN IS '예치금반환여부(Y:반환,N:미반환)';

COMMENT ON COLUMN TB_OFF_BOX_RENT.EXTEND_YN IS '연장여부(Y:Yes, N:No)';

COMMENT ON COLUMN TB_OFF_BOX_RENT.KEY_YN IS '키반납여부(R:대여,Y:반납,N:미반납)';

COMMENT ON COLUMN TB_OFF_BOX_RENT.UPDATE_DT IS '등록/수정일';

COMMENT ON COLUMN TB_OFF_BOX_RENT.UPDATE_ID IS '등록/수정자ID';

COMMENT ON COLUMN TB_OFF_BOX_RENT.RENT_TYPE IS '신청구분(ON:온라인,OFF:오프라인)';

COMMENT ON COLUMN TB_OFF_BOX_RENT.ORDER_ID IS '주문번호(TB_OFF_ORDER)';

COMMENT ON COLUMN TB_OFF_BOX_RENT.PAY_GUBUN IS '결제구분';

COMMENT ON COLUMN TB_OFF_BOX_RENT.DEPOSIT_REFUND IS '예치금환불';

COMMENT ON COLUMN TB_OFF_BOX_RENT.RENT_MEMO IS '대여시 메모';



--
-- TB_POPUP_INFO  (Table) 
--
CREATE TABLE TB_POPUP_INFO
(
  NO             VARCHAR2(20 BYTE)              NOT NULL,
  ONOFF_DIV      VARCHAR2(1 BYTE),
  CATEGORY_CODE  VARCHAR2(30 BYTE),
  START_DATE     VARCHAR2(8 BYTE),
  START_TIME     VARCHAR2(2 BYTE),
  END_DATE       VARCHAR2(8 BYTE),
  END_TIME       VARCHAR2(2 BYTE),
  OPEN_YN        VARCHAR2(1 BYTE),
  HIT            NUMBER,
  TITLE          VARCHAR2(500 BYTE),
  POPUP_IMG      VARCHAR2(100 BYTE),
  THUMBNAIL      VARCHAR2(100 BYTE),
  LINK_ADDR      VARCHAR2(500 BYTE),
  LINK_TARGET    VARCHAR2(10 BYTE),
  REG_ID         VARCHAR2(30 BYTE),
  REG_DT         DATE,
  UPD_ID         VARCHAR2(30 BYTE),
  UPD_DT         DATE,
  POPUP_IMG_NM   VARCHAR2(100 BYTE),
  THUMBNAIL_NM   VARCHAR2(100 BYTE)
);

COMMENT ON COLUMN TB_POPUP_INFO.NO IS 'NO';

COMMENT ON COLUMN TB_POPUP_INFO.ONOFF_DIV IS '온오프 구분';

COMMENT ON COLUMN TB_POPUP_INFO.CATEGORY_CODE IS '카테고리코드';

COMMENT ON COLUMN TB_POPUP_INFO.START_DATE IS '시작일';

COMMENT ON COLUMN TB_POPUP_INFO.START_TIME IS '시작시간';

COMMENT ON COLUMN TB_POPUP_INFO.END_DATE IS '종료일';

COMMENT ON COLUMN TB_POPUP_INFO.END_TIME IS '종료시간';

COMMENT ON COLUMN TB_POPUP_INFO.OPEN_YN IS '적용여부(Y:적용,N:미적용)';

COMMENT ON COLUMN TB_POPUP_INFO.HIT IS '뷰카운트';

COMMENT ON COLUMN TB_POPUP_INFO.TITLE IS '제목';

COMMENT ON COLUMN TB_POPUP_INFO.POPUP_IMG IS '팝업 이미지';

COMMENT ON COLUMN TB_POPUP_INFO.THUMBNAIL IS '썸네일 이미지';

COMMENT ON COLUMN TB_POPUP_INFO.LINK_ADDR IS '링크주소';

COMMENT ON COLUMN TB_POPUP_INFO.LINK_TARGET IS '링크타겟';

COMMENT ON COLUMN TB_POPUP_INFO.REG_ID IS '등록자아이디';

COMMENT ON COLUMN TB_POPUP_INFO.REG_DT IS '등록일';

COMMENT ON COLUMN TB_POPUP_INFO.UPD_ID IS '수정자아이디';

COMMENT ON COLUMN TB_POPUP_INFO.UPD_DT IS '수정일';

COMMENT ON COLUMN TB_POPUP_INFO.POPUP_IMG_NM IS '팝업원본이름';

COMMENT ON COLUMN TB_POPUP_INFO.THUMBNAIL_NM IS '섬네일원본이름';



--
-- TB_SG_MENU_MST  (Table) 
--
CREATE TABLE TB_SG_MENU_MST
(
  MENU_ID    VARCHAR2(20 BYTE)                  NOT NULL,
  MENU_NM    VARCHAR2(50 BYTE),
  MENU_SEQ   VARCHAR2(100 BYTE),
  MENU_URL   VARCHAR2(150 BYTE),
  P_MENUID   VARCHAR2(20 BYTE)                  NOT NULL,
  ISUSE      VARCHAR2(1 BYTE),
  TARGET     VARCHAR2(20 BYTE),
  MENU_INFO  VARCHAR2(255 BYTE),
  REG_DT     DATE,
  REG_ID     VARCHAR2(30 BYTE),
  UPD_DT     DATE,
  UPD_ID     VARCHAR2(30 BYTE)
);

COMMENT ON COLUMN TB_SG_MENU_MST.MENU_ID IS '메뉴 ID';

COMMENT ON COLUMN TB_SG_MENU_MST.MENU_NM IS '메뉴명';

COMMENT ON COLUMN TB_SG_MENU_MST.MENU_SEQ IS '메뉴순서';

COMMENT ON COLUMN TB_SG_MENU_MST.MENU_URL IS '메뉴URL';

COMMENT ON COLUMN TB_SG_MENU_MST.P_MENUID IS '상위 메뉴 ID';

COMMENT ON COLUMN TB_SG_MENU_MST.ISUSE IS '상태';

COMMENT ON COLUMN TB_SG_MENU_MST.TARGET IS 'TARGET';

COMMENT ON COLUMN TB_SG_MENU_MST.MENU_INFO IS '메뉴설명';

COMMENT ON COLUMN TB_SG_MENU_MST.REG_DT IS '등록일';

COMMENT ON COLUMN TB_SG_MENU_MST.REG_ID IS '등록자 아이디';

COMMENT ON COLUMN TB_SG_MENU_MST.UPD_DT IS '수정일';

COMMENT ON COLUMN TB_SG_MENU_MST.UPD_ID IS '수정자 아이디';



--
-- TB_SG_MENU_MST2  (Table) 
--
CREATE TABLE TB_SG_MENU_MST2
(
  ONOFF_DIV        VARCHAR2(1 BYTE)             NOT NULL,
  MENU_ID          VARCHAR2(20 BYTE)            NOT NULL,
  MENU_NM          VARCHAR2(50 BYTE),
  MENU_SEQ         VARCHAR2(100 BYTE),
  MENU_URL         VARCHAR2(250 BYTE),
  P_MENUID         VARCHAR2(20 BYTE)            NOT NULL,
  ISUSE            VARCHAR2(1 BYTE),
  TARGET           VARCHAR2(20 BYTE),
  MENU_INFO        VARCHAR2(255 BYTE),
  REG_DT           DATE,
  REG_ID           VARCHAR2(30 BYTE),
  UPD_DT           DATE,
  UPD_ID           VARCHAR2(30 BYTE),
  CODE             VARCHAR2(3 BYTE),
  TOP_IMG_URL      VARCHAR2(200 BYTE),
  LEFT_IMG_URL     VARCHAR2(200 BYTE),
  TITL_IMG_URL     VARCHAR2(200 BYTE),
  SUBTITL_IMG_URL  VARCHAR2(200 BYTE),
  PBLC_YN          VARCHAR2(1 BYTE)
);

COMMENT ON COLUMN TB_SG_MENU_MST2.CODE IS '직렬코드';

COMMENT ON COLUMN TB_SG_MENU_MST2.TOP_IMG_URL IS '상단메뉴이미지URL';

COMMENT ON COLUMN TB_SG_MENU_MST2.LEFT_IMG_URL IS '왼쪽메뉴이미지URL';

COMMENT ON COLUMN TB_SG_MENU_MST2.TITL_IMG_URL IS '타이틀이미지URL';

COMMENT ON COLUMN TB_SG_MENU_MST2.SUBTITL_IMG_URL IS '부타이틀이미지URL';

COMMENT ON COLUMN TB_SG_MENU_MST2.PBLC_YN IS '리스트노출 여부';



--
-- TB_SG_SITE  (Table) 
--
CREATE TABLE TB_SG_SITE
(
  SITE_ID  VARCHAR2(20 BYTE)                    NOT NULL,
  SITE_NM  VARCHAR2(50 BYTE)                    NOT NULL,
  ISUSE    VARCHAR2(1 BYTE),
  REG_DT   DATE,
  REG_ID   VARCHAR2(30 BYTE),
  UPD_DT   DATE,
  UPD_ID   VARCHAR2(30 BYTE)
);

COMMENT ON COLUMN TB_SG_SITE.SITE_ID IS '사이트 ID';

COMMENT ON COLUMN TB_SG_SITE.SITE_NM IS '사이트명';

COMMENT ON COLUMN TB_SG_SITE.ISUSE IS '상태';

COMMENT ON COLUMN TB_SG_SITE.REG_DT IS '등록일';

COMMENT ON COLUMN TB_SG_SITE.REG_ID IS '등록자 아이디';

COMMENT ON COLUMN TB_SG_SITE.UPD_DT IS '수정일';

COMMENT ON COLUMN TB_SG_SITE.UPD_ID IS '수정자 아이디';



--
-- TB_SG_SITE_MENU  (Table) 
--
CREATE TABLE TB_SG_SITE_MENU
(
  SITE_ID  VARCHAR2(20 BYTE)                    NOT NULL,
  MENU_ID  VARCHAR2(20 BYTE)                    NOT NULL,
  REG_DT   DATE,
  REG_ID   VARCHAR2(30 BYTE),
  UPD_DT   DATE,
  UPD_ID   VARCHAR2(30 BYTE)
);

COMMENT ON COLUMN TB_SG_SITE_MENU.SITE_ID IS '사이트 ID';

COMMENT ON COLUMN TB_SG_SITE_MENU.MENU_ID IS '메뉴 ID';

COMMENT ON COLUMN TB_SG_SITE_MENU.REG_DT IS '등록일';

COMMENT ON COLUMN TB_SG_SITE_MENU.REG_ID IS '등록자 아이디';

COMMENT ON COLUMN TB_SG_SITE_MENU.UPD_DT IS '수정일';

COMMENT ON COLUMN TB_SG_SITE_MENU.UPD_ID IS '수정자 아이디';



--
-- WWW_POLL  (Table) 
--
CREATE TABLE WWW_POLL
(
  POLL_ID   NUMBER,
  START_DT  VARCHAR2(10 BYTE),
  END_DT    VARCHAR2(10 BYTE),
  ISUSE     VARCHAR2(1 BYTE),
  TITLE     VARCHAR2(500 BYTE),
  IS_SHOW   VARCHAR2(1 BYTE)
);

COMMENT ON COLUMN WWW_POLL.POLL_ID IS '온라인폴코드';

COMMENT ON COLUMN WWW_POLL.START_DT IS '시작일';

COMMENT ON COLUMN WWW_POLL.END_DT IS '종료일';

COMMENT ON COLUMN WWW_POLL.ISUSE IS '사용여부';

COMMENT ON COLUMN WWW_POLL.TITLE IS '제목';

COMMENT ON COLUMN WWW_POLL.IS_SHOW IS '노출여부';



--
-- WWW_POLL_ITEM  (Table) 
--
CREATE TABLE WWW_POLL_ITEM
(
  POLL_ID       NUMBER,
  POLL_ITEM_ID  NUMBER,
  VIW           VARCHAR2(100 BYTE),
  SEQ           NUMBER,
  CNT           NUMBER,
  SUBJECT_NM    VARCHAR2(100 BYTE)
);

COMMENT ON COLUMN WWW_POLL_ITEM.POLL_ID IS '온라인폴코드';

COMMENT ON COLUMN WWW_POLL_ITEM.POLL_ITEM_ID IS '온라인폴문항코드';

COMMENT ON COLUMN WWW_POLL_ITEM.VIW IS '문항내용';

COMMENT ON COLUMN WWW_POLL_ITEM.SEQ IS '순서';

COMMENT ON COLUMN WWW_POLL_ITEM.CNT IS '투표수';

COMMENT ON COLUMN WWW_POLL_ITEM.SUBJECT_NM IS '과목명';



--
-- TB_BOARD  (Table) 
--
CREATE TABLE TB_BOARD
(
  BOARD_MNG_SEQ     VARCHAR2(20 BYTE),
  BOARD_SEQ         INTEGER,
  PARENT_BOARD_SEQ  INTEGER,
  SUBJECT           VARCHAR2(200 BYTE),
  CONTENTS          CLOB,
  NOTICE_TOP_YN     VARCHAR2(1 BYTE),
  OPEN_YN           VARCHAR2(1 BYTE),
  REG_DT            DATE,
  REG_ID            VARCHAR2(30 BYTE),
  UPD_DT            DATE,
  UPD_ID            VARCHAR2(30 BYTE),
  HITS              NUMBER,
  ISSUE             VARCHAR2(1 BYTE)
);

COMMENT ON COLUMN TB_BOARD.BOARD_MNG_SEQ IS '게시판 관리 SEQ';

COMMENT ON COLUMN TB_BOARD.BOARD_SEQ IS '게시판 SEQ(MAX값)';

COMMENT ON COLUMN TB_BOARD.PARENT_BOARD_SEQ IS '부모글 SEQ';

COMMENT ON COLUMN TB_BOARD.SUBJECT IS '제목
';

COMMENT ON COLUMN TB_BOARD.CONTENTS IS '내용
';

COMMENT ON COLUMN TB_BOARD.NOTICE_TOP_YN IS '상단공지여부(Y: 상단공지함, N:상단공지안함)
';

COMMENT ON COLUMN TB_BOARD.OPEN_YN IS '공개, 비공개여부 (Y: 공개, N:비공개)';

COMMENT ON COLUMN TB_BOARD.REG_DT IS '등록일';

COMMENT ON COLUMN TB_BOARD.REG_ID IS '등록아이디';

COMMENT ON COLUMN TB_BOARD.HITS IS '조회수';

COMMENT ON COLUMN TB_BOARD.ISSUE IS '공지사항 이슈 여부 (Y/N)';



--
-- MEMBERS  (Table) 
--
CREATE TABLE MEMBERS
(
  USER_ID     VARCHAR2(20 BYTE)                 NOT NULL,
  USER_NM     VARCHAR2(20 BYTE)                 NOT NULL,
  USER_PWD    VARCHAR2(20 BYTE),
  USER_ROLE   VARCHAR2(20 BYTE),
  ADMIN_ROLE  VARCHAR2(20 BYTE),
  EMAIL       VARCHAR2(100 BYTE),
  ISUSE       VARCHAR2(1 BYTE),
  REG_DT      DATE,
  REG_ID      VARCHAR2(20 BYTE),
  UPD_DT      DATE,
  UPD_ID      VARCHAR2(20 BYTE)
);


--
-- COOP_COUPON  (Table) 
--
CREATE TABLE COOP_COUPON
(
  C_CD     VARCHAR2(16 BYTE)                    NOT NULL,
  COOP_CD  VARCHAR2(10 BYTE)                    NOT NULL,
  LECCODE  VARCHAR2(30 BYTE)                    NOT NULL,
  USER_ID  VARCHAR2(20 BYTE),
  ORDERNO  VARCHAR2(20 BYTE),
  REG_DT   DATE
);

COMMENT ON COLUMN COOP_COUPON.C_CD IS '쿠폰코드 / SUBSTR( REPLACE(REPLACE(UPPER(SYS_GUID()), ''0'', ''''), ''O'', ''''), 0, 16)';

COMMENT ON COLUMN COOP_COUPON.COOP_CD IS '제휴사코드';

COMMENT ON COLUMN COOP_COUPON.LECCODE IS '강의코드';

COMMENT ON COLUMN COOP_COUPON.USER_ID IS '사용자아이디';

COMMENT ON COLUMN COOP_COUPON.ORDERNO IS '주문코드';

COMMENT ON COLUMN COOP_COUPON.REG_DT IS '쿠폰인증일';



--
-- COOP_COUPON_MST  (Table) 
--
CREATE TABLE COOP_COUPON_MST
(
  COOP_CD     VARCHAR2(20 BYTE)                 NOT NULL,
  COUPON_NM   VARCHAR2(100 BYTE)                NOT NULL,
  LECCODE     VARCHAR2(20 BYTE)                 NOT NULL,
  ST_DT       VARCHAR2(10 BYTE),
  ED_DT       VARCHAR2(10 BYTE),
  COUPON_CNT  NUMBER                            DEFAULT 0                     NOT NULL,
  COUPON_USE  NUMBER                            DEFAULT 0                     NOT NULL,
  REG_DT      DATE
);

COMMENT ON COLUMN COOP_COUPON_MST.COOP_CD IS '제휴사코드';

COMMENT ON COLUMN COOP_COUPON_MST.COUPON_NM IS '수강권명';

COMMENT ON COLUMN COOP_COUPON_MST.LECCODE IS '강의코드';

COMMENT ON COLUMN COOP_COUPON_MST.ST_DT IS '시작일';

COMMENT ON COLUMN COOP_COUPON_MST.ED_DT IS '종료일';

COMMENT ON COLUMN COOP_COUPON_MST.COUPON_CNT IS '발행수';

COMMENT ON COLUMN COOP_COUPON_MST.COUPON_USE IS '쿠폰인증수';

COMMENT ON COLUMN COOP_COUPON_MST.REG_DT IS '쿠폰등록일';



--
-- COOP_MST  (Table) 
--
CREATE TABLE COOP_MST
(
  COOP_CD       VARCHAR2(20 BYTE),
  COOP_NM       VARCHAR2(50 BYTE)               NOT NULL,
  REG_DT        DATE,
  DISCOUNT_PER  NUMBER
);

COMMENT ON COLUMN COOP_MST.COOP_CD IS '제휴사코드';

COMMENT ON COLUMN COOP_MST.COOP_NM IS '제휴사명';

COMMENT ON COLUMN COOP_MST.REG_DT IS '등록일';



--
-- GOSI_AREA_MST  (Table) 
--
CREATE TABLE GOSI_AREA_MST
(
  GOSI_TYPE          VARCHAR2(2 BYTE),
  GOSI_AREA          VARCHAR2(1 BYTE),
  GOSI_AREA_NM       VARCHAR2(100 BYTE),
  GOSI_AREA_FULL_NM  VARCHAR2(200 BYTE),
  REQ_NUM            VARCHAR2(10 BYTE),
  USE_NUM            VARCHAR2(20 BYTE),
  GOSI_CMP_STAT      VARCHAR2(20 BYTE),
  PASS_2014          VARCHAR2(10 BYTE),
  PASS_2015_S        VARCHAR2(10 BYTE),
  PASS_2015_E        VARCHAR2(10 BYTE)
);

COMMENT ON COLUMN GOSI_AREA_MST.GOSI_TYPE IS '고시모집구분';

COMMENT ON COLUMN GOSI_AREA_MST.GOSI_AREA IS '지역구분';

COMMENT ON COLUMN GOSI_AREA_MST.GOSI_AREA_NM IS '지역구분명';

COMMENT ON COLUMN GOSI_AREA_MST.GOSI_AREA_FULL_NM IS '직렬전체이름';

COMMENT ON COLUMN GOSI_AREA_MST.REQ_NUM IS '선발인원';

COMMENT ON COLUMN GOSI_AREA_MST.USE_NUM IS '접수인원';

COMMENT ON COLUMN GOSI_AREA_MST.GOSI_CMP_STAT IS '경쟁률';

COMMENT ON COLUMN GOSI_AREA_MST.PASS_2014 IS '2014년 예상 합격선';

COMMENT ON COLUMN GOSI_AREA_MST.PASS_2015_S IS '2015예상합격선최저';

COMMENT ON COLUMN GOSI_AREA_MST.PASS_2015_E IS '2015년예상합격최고';



--
-- GOSI_COD  (Table) 
--
CREATE TABLE GOSI_COD
(
  GOSI_TYPE     VARCHAR2(2 BYTE),
  GOSI_TYPE_NM  VARCHAR2(100 BYTE)
);

COMMENT ON COLUMN GOSI_COD.GOSI_TYPE IS '고시모집구분';

COMMENT ON COLUMN GOSI_COD.GOSI_TYPE_NM IS '고시구분명';



--
-- GOSI_MST  (Table) 
--
CREATE TABLE GOSI_MST
(
  GOSI_CD  VARCHAR2(20 BYTE),
  GOSI_NM  VARCHAR2(100 BYTE)
);

COMMENT ON COLUMN GOSI_MST.GOSI_CD IS '시험코드';

COMMENT ON COLUMN GOSI_MST.GOSI_NM IS '고시제목';



--
-- GOSI_PASS_MST  (Table) 
--
CREATE TABLE GOSI_PASS_MST
(
  GOSI_CD     VARCHAR2(20 BYTE),
  SUBJECT_CD  VARCHAR2(20 BYTE),
  EXAM_TYPE   VARCHAR2(1 BYTE),
  ITEM_NO     NUMBER,
  PASS_ANS    NUMBER
);

COMMENT ON COLUMN GOSI_PASS_MST.GOSI_CD IS '시험코드';

COMMENT ON COLUMN GOSI_PASS_MST.SUBJECT_CD IS '과목코드';

COMMENT ON COLUMN GOSI_PASS_MST.EXAM_TYPE IS '시험유형(A:사 책형, B:처 책형)';

COMMENT ON COLUMN GOSI_PASS_MST.ITEM_NO IS '문항번호';

COMMENT ON COLUMN GOSI_PASS_MST.PASS_ANS IS '정답';



--
-- GOSI_PASS_STA  (Table) 
--
CREATE TABLE GOSI_PASS_STA
(
  GOSI_CD     VARCHAR2(20 BYTE),
  GOSI_TYPE   VARCHAR2(10 BYTE),
  PASS_POINT  NUMBER
);

COMMENT ON COLUMN GOSI_PASS_STA.GOSI_CD IS '시험코드';

COMMENT ON COLUMN GOSI_PASS_STA.GOSI_TYPE IS '고시모집구분';

COMMENT ON COLUMN GOSI_PASS_STA.PASS_POINT IS '합격선(점수)';



--
-- GOSI_RST_DET  (Table) 
--
CREATE TABLE GOSI_RST_DET
(
  GOSI_CD     VARCHAR2(20 BYTE),
  RST_NO      VARCHAR2(20 BYTE),
  USER_ID     VARCHAR2(20 BYTE),
  EXAM_TYPE   VARCHAR2(1 BYTE),
  SUBJECT_CD  VARCHAR2(20 BYTE),
  ITEM_NO     NUMBER,
  ANS         NUMBER,
  YN          VARCHAR2(1 BYTE)
);

COMMENT ON COLUMN GOSI_RST_DET.GOSI_CD IS '시험코드';

COMMENT ON COLUMN GOSI_RST_DET.RST_NO IS '응시번호';

COMMENT ON COLUMN GOSI_RST_DET.USER_ID IS '응시자아이디';

COMMENT ON COLUMN GOSI_RST_DET.EXAM_TYPE IS '시험유형';

COMMENT ON COLUMN GOSI_RST_DET.SUBJECT_CD IS '과목코드';

COMMENT ON COLUMN GOSI_RST_DET.ITEM_NO IS '문항번호';

COMMENT ON COLUMN GOSI_RST_DET.ANS IS '제출답안';

COMMENT ON COLUMN GOSI_RST_DET.YN IS '정답여부';



--
-- GOSI_RST_MST  (Table) 
--
CREATE TABLE GOSI_RST_MST
(
  GOSI_CD     VARCHAR2(20 BYTE),
  RST_NO      VARCHAR2(20 BYTE),
  USER_ID     VARCHAR2(20 BYTE),
  GOSI_TYPE   VARCHAR2(10 BYTE),
  GOSI_AREA   VARCHAR2(10 BYTE),
  EXAM_TYPE   VARCHAR2(10 BYTE),
  ADD_POINT   VARCHAR2(1 BYTE),
  STUDY_YN    VARCHAR2(1 BYTE),
  STUDY_TYPE  VARCHAR2(1 BYTE),
  STUDY_WAIT  VARCHAR2(1 BYTE),
  STUDY_TIME  VARCHAR2(1 BYTE),
  MO_POINT    NUMBER,
  SEL_CATE    VARCHAR2(20 BYTE),
  SEL_SBJ     VARCHAR2(20 BYTE),
  NEXT_EXAM   VARCHAR2(20 BYTE),
  REG_DT      DATE,
  UPT_DT      DATE,
  EXAM_STAT   NUMBER,
  ISUSE       VARCHAR2(1 BYTE)
);

COMMENT ON COLUMN GOSI_RST_MST.GOSI_CD IS '시험코드';

COMMENT ON COLUMN GOSI_RST_MST.RST_NO IS '응시번호';

COMMENT ON COLUMN GOSI_RST_MST.USER_ID IS '아이디';

COMMENT ON COLUMN GOSI_RST_MST.GOSI_TYPE IS '직렬코드';

COMMENT ON COLUMN GOSI_RST_MST.GOSI_AREA IS '지역구분';

COMMENT ON COLUMN GOSI_RST_MST.EXAM_TYPE IS '시험지유형 (A:사책형, B:처책형)';

COMMENT ON COLUMN GOSI_RST_MST.ADD_POINT IS '가산점 여부';

COMMENT ON COLUMN GOSI_RST_MST.STUDY_YN IS '윌비스 수강 여부';

COMMENT ON COLUMN GOSI_RST_MST.STUDY_TYPE IS '학습형태';

COMMENT ON COLUMN GOSI_RST_MST.STUDY_WAIT IS '시험준비기간';

COMMENT ON COLUMN GOSI_RST_MST.STUDY_TIME IS '일평균학습시간';

COMMENT ON COLUMN GOSI_RST_MST.MO_POINT IS '모의고사 성적';

COMMENT ON COLUMN GOSI_RST_MST.SEL_CATE IS '응시직렬 선택이유';

COMMENT ON COLUMN GOSI_RST_MST.SEL_SBJ IS '선택과목 결정이유';

COMMENT ON COLUMN GOSI_RST_MST.NEXT_EXAM IS '추가시험준비';

COMMENT ON COLUMN GOSI_RST_MST.REG_DT IS '등록일';

COMMENT ON COLUMN GOSI_RST_MST.UPT_DT IS '수정일';

COMMENT ON COLUMN GOSI_RST_MST.EXAM_STAT IS '합격 확률';

COMMENT ON COLUMN GOSI_RST_MST.ISUSE IS '공개여부';



--
-- GOSI_RST_SBJ  (Table) 
--
CREATE TABLE GOSI_RST_SBJ
(
  GOSI_CD     VARCHAR2(20 BYTE),
  RST_NO      VARCHAR2(20 BYTE),
  EXAM_TYPE   VARCHAR2(1 BYTE),
  SUBJECT_CD  VARCHAR2(20 BYTE),
  SUM_POINT   NUMBER,
  ADJ_POINT   NUMBER
);

COMMENT ON COLUMN GOSI_RST_SBJ.GOSI_CD IS '고시구분';

COMMENT ON COLUMN GOSI_RST_SBJ.RST_NO IS '수험번호';

COMMENT ON COLUMN GOSI_RST_SBJ.EXAM_TYPE IS '시험유형';

COMMENT ON COLUMN GOSI_RST_SBJ.SUBJECT_CD IS '선택과목코드';

COMMENT ON COLUMN GOSI_RST_SBJ.SUM_POINT IS '과목원점수';

COMMENT ON COLUMN GOSI_RST_SBJ.ADJ_POINT IS '과목별 조정점수';



--
-- GOSI_RST_SMP  (Table) 
--
CREATE TABLE GOSI_RST_SMP
(
  AREA_01     VARCHAR2(100 BYTE),
  AREA_02     VARCHAR2(100 BYTE),
  RST_NO      VARCHAR2(20 BYTE),
  USER_NM     VARCHAR2(20 BYTE),
  USER_AGE    VARCHAR2(10 BYTE),
  STUDY_WAIT  VARCHAR2(100 BYTE),
  STUDY_TYPE  VARCHAR2(100 BYTE),
  ADD_POINT   VARCHAR2(100 BYTE),
  EXAM_STAT   VARCHAR2(20 BYTE),
  SEL_SBJ_01  VARCHAR2(100 BYTE),
  SEL_SBJ_02  VARCHAR2(100 BYTE),
  ISUSE       VARCHAR2(1 BYTE),
  SBJ_01      VARCHAR2(10 BYTE),
  SBJ_MO_01   VARCHAR2(10 BYTE),
  SBJ_02      VARCHAR2(10 BYTE),
  SBJ_MO_02   VARCHAR2(10 BYTE),
  SBJ_03      VARCHAR2(10 BYTE),
  SBJ_MO_03   VARCHAR2(10 BYTE),
  SBJ_04      VARCHAR2(10 BYTE),
  SBJ_MO_04   VARCHAR2(10 BYTE),
  SBJ_05      VARCHAR2(10 BYTE),
  SBJ_MO_05   VARCHAR2(10 BYTE),
  USER_SEX    VARCHAR2(1 BYTE)
);

COMMENT ON COLUMN GOSI_RST_SMP.AREA_01 IS '모집구분1';

COMMENT ON COLUMN GOSI_RST_SMP.AREA_02 IS '모집구분2';

COMMENT ON COLUMN GOSI_RST_SMP.RST_NO IS '응시번호';

COMMENT ON COLUMN GOSI_RST_SMP.USER_NM IS '성명';

COMMENT ON COLUMN GOSI_RST_SMP.USER_AGE IS '나이';

COMMENT ON COLUMN GOSI_RST_SMP.STUDY_WAIT IS '준비기간';

COMMENT ON COLUMN GOSI_RST_SMP.STUDY_TYPE IS '학습형태';

COMMENT ON COLUMN GOSI_RST_SMP.ADD_POINT IS '가산점';

COMMENT ON COLUMN GOSI_RST_SMP.EXAM_STAT IS '합격률';

COMMENT ON COLUMN GOSI_RST_SMP.SEL_SBJ_01 IS '선택1';

COMMENT ON COLUMN GOSI_RST_SMP.SEL_SBJ_02 IS '선택2';

COMMENT ON COLUMN GOSI_RST_SMP.ISUSE IS '사용여부';

COMMENT ON COLUMN GOSI_RST_SMP.SBJ_01 IS '과목1점수';

COMMENT ON COLUMN GOSI_RST_SMP.SBJ_MO_01 IS '모의고사1점수';

COMMENT ON COLUMN GOSI_RST_SMP.SBJ_02 IS '필수과목2점수';

COMMENT ON COLUMN GOSI_RST_SMP.SBJ_MO_02 IS '모의고사2점수';

COMMENT ON COLUMN GOSI_RST_SMP.SBJ_03 IS '필수과목3점수';

COMMENT ON COLUMN GOSI_RST_SMP.SBJ_MO_03 IS '모의고사3점수';

COMMENT ON COLUMN GOSI_RST_SMP.SBJ_04 IS '선택과목1점수';

COMMENT ON COLUMN GOSI_RST_SMP.SBJ_MO_04 IS '모의고사4점수';

COMMENT ON COLUMN GOSI_RST_SMP.SBJ_05 IS '선택과목2점수';

COMMENT ON COLUMN GOSI_RST_SMP.SBJ_MO_05 IS '모의고사5점수';

COMMENT ON COLUMN GOSI_RST_SMP.USER_SEX IS '성별';



--
-- GOSI_SBJ_MST  (Table) 
--
CREATE TABLE GOSI_SBJ_MST
(
  GOSI_CD       VARCHAR2(20 BYTE),
  SBJ_TYPE      VARCHAR2(20 BYTE),
  SUBJECT_CD    VARCHAR2(20 BYTE),
  SUBJECT_NM    VARCHAR2(20 BYTE),
  REQ_USR_NUM   NUMBER,
  SUM_POINT     NUMBER,
  AVR_POINT     NUMBER,
  SDV           NUMBER,
  AVR_3_POINT   NUMBER,
  AVR_10_POINT  NUMBER
);

COMMENT ON TABLE GOSI_SBJ_MST IS '과목별기준';

COMMENT ON COLUMN GOSI_SBJ_MST.GOSI_CD IS '시험코드';

COMMENT ON COLUMN GOSI_SBJ_MST.SBJ_TYPE IS '과목구분';

COMMENT ON COLUMN GOSI_SBJ_MST.SUBJECT_CD IS '과목코드';

COMMENT ON COLUMN GOSI_SBJ_MST.SUBJECT_NM IS '과목명';

COMMENT ON COLUMN GOSI_SBJ_MST.REQ_USR_NUM IS '시험선택인원';

COMMENT ON COLUMN GOSI_SBJ_MST.SUM_POINT IS '과목총점';

COMMENT ON COLUMN GOSI_SBJ_MST.AVR_POINT IS '과목평균점';

COMMENT ON COLUMN GOSI_SBJ_MST.SDV IS '과목표준편차';

COMMENT ON COLUMN GOSI_SBJ_MST.AVR_3_POINT IS '전체3%평균';

COMMENT ON COLUMN GOSI_SBJ_MST.AVR_10_POINT IS '전체10%평균';



--
-- GOSI_STAT_MST  (Table) 
--
CREATE TABLE GOSI_STAT_MST
(
  GOSI_CD             VARCHAR2(20 BYTE),
  GOSI_TYPE           VARCHAR2(20 BYTE),
  GOSI_AREA           VARCHAR2(20 BYTE),
  GOSI_SUBJECT_CD     VARCHAR2(20 BYTE),
  GOSI_SUBJEC_NM      VARCHAR2(20 BYTE),
  GOSI_USER_NUM       NUMBER,
  GOSI_AVR_POINT      NUMBER,
  GOSI_3_POINT        NUMBER,
  GOSI_10_POINT       NUMBER,
  GOSI_ADJ_AVR_POINT  NUMBER,
  GOSI_ADJ_3_POINT    NUMBER,
  GOSI_ADJ_10_POINT   NUMBER
);

COMMENT ON COLUMN GOSI_STAT_MST.GOSI_CD IS '시험코드';

COMMENT ON COLUMN GOSI_STAT_MST.GOSI_TYPE IS '시험구분';

COMMENT ON COLUMN GOSI_STAT_MST.GOSI_AREA IS '지역구분';

COMMENT ON COLUMN GOSI_STAT_MST.GOSI_SUBJECT_CD IS '과목코드';

COMMENT ON COLUMN GOSI_STAT_MST.GOSI_SUBJEC_NM IS '과목명';

COMMENT ON COLUMN GOSI_STAT_MST.GOSI_USER_NUM IS '응시인원';

COMMENT ON COLUMN GOSI_STAT_MST.GOSI_AVR_POINT IS '평균점수';

COMMENT ON COLUMN GOSI_STAT_MST.GOSI_3_POINT IS '3%평균';

COMMENT ON COLUMN GOSI_STAT_MST.GOSI_10_POINT IS '10%평균';

COMMENT ON COLUMN GOSI_STAT_MST.GOSI_ADJ_AVR_POINT IS '조정점수평균';

COMMENT ON COLUMN GOSI_STAT_MST.GOSI_ADJ_3_POINT IS '조정점수 상위 3% 평균점수';

COMMENT ON COLUMN GOSI_STAT_MST.GOSI_ADJ_10_POINT IS '조정점수 상위 10% 평균점수';



--
-- GOSI_SUBJECT  (Table) 
--
CREATE TABLE GOSI_SUBJECT
(
  GOSI_TYPE          VARCHAR2(2 BYTE),
  GOSI_SUBJECT_CD    VARCHAR2(3 BYTE),
  GOSI_SUBJECT_TYPE  VARCHAR2(1 BYTE),
  GOSI_SUBJECT_NM    VARCHAR2(100 BYTE)
);

COMMENT ON COLUMN GOSI_SUBJECT.GOSI_TYPE IS '고시구분';

COMMENT ON COLUMN GOSI_SUBJECT.GOSI_SUBJECT_CD IS '과목';

COMMENT ON COLUMN GOSI_SUBJECT.GOSI_SUBJECT_TYPE IS '과목구분 (M:필수, S:선택)';

COMMENT ON COLUMN GOSI_SUBJECT.GOSI_SUBJECT_NM IS '과목명';



--
-- GOSI_VOD  (Table) 
--
CREATE TABLE GOSI_VOD
(
  GOSI_CD   VARCHAR2(20 BYTE),
  PRF_ID    VARCHAR2(20 BYTE),
  PRF_NM    VARCHAR2(50 BYTE),
  SBJ_NM    VARCHAR2(200 BYTE),
  TITLE     VARCHAR2(200 BYTE),
  VOD_URL   VARCHAR2(500 BYTE),
  FILE_URL  VARCHAR2(500 BYTE),
  ISUSE     VARCHAR2(1 BYTE),
  IDX       NUMBER
);

COMMENT ON COLUMN GOSI_VOD.GOSI_CD IS '고시코드';

COMMENT ON COLUMN GOSI_VOD.PRF_ID IS '강사아이디';

COMMENT ON COLUMN GOSI_VOD.PRF_NM IS '강사명';

COMMENT ON COLUMN GOSI_VOD.SBJ_NM IS '과목명';

COMMENT ON COLUMN GOSI_VOD.TITLE IS '제목';

COMMENT ON COLUMN GOSI_VOD.VOD_URL IS '동영상주소';

COMMENT ON COLUMN GOSI_VOD.FILE_URL IS '파일주소';

COMMENT ON COLUMN GOSI_VOD.ISUSE IS '사용여부';

COMMENT ON COLUMN GOSI_VOD.IDX IS '순서';



--
-- NOTUSE_COUPON_LECTURE  (Table) 
--
CREATE TABLE NOTUSE_COUPON_LECTURE
(
  LECCODE  VARCHAR2(30 BYTE)
);


--
-- SC_TRAN  (Table) 
--
CREATE TABLE SC_TRAN
(
  TR_NUM           NUMBER(11)                   NOT NULL,
  TR_SENDDATE      DATE,
  TR_ID            VARCHAR2(16 BYTE),
  TR_SENDSTAT      VARCHAR2(1 BYTE)             DEFAULT '0'                   NOT NULL,
  TR_RSLTSTAT      VARCHAR2(2 BYTE)             DEFAULT '00',
  TR_MSGTYPE       VARCHAR2(1 BYTE)             DEFAULT '0'                   NOT NULL,
  TR_PHONE         VARCHAR2(20 BYTE)            DEFAULT ''                    NOT NULL,
  TR_CALLBACK      VARCHAR2(20 BYTE),
  TR_RSLTDATE      DATE,
  TR_MODIFIED      DATE,
  TR_MSG           VARCHAR2(160 BYTE),
  TR_NET           VARCHAR2(4 BYTE),
  TR_ETC1          VARCHAR2(160 BYTE),
  TR_ETC2          VARCHAR2(160 BYTE),
  TR_ETC3          VARCHAR2(160 BYTE),
  TR_ETC4          VARCHAR2(160 BYTE),
  TR_ETC5          VARCHAR2(160 BYTE),
  TR_ETC6          VARCHAR2(160 BYTE),
  TR_REALSENDDATE  DATE
);


--
-- TB_APPROVALS  (Table) 
--
CREATE TABLE TB_APPROVALS
(
  ORDERNO       VARCHAR2(20 BYTE)               NOT NULL,
  PRICE         NUMBER(18)                      NOT NULL,
  ADDPRICE      NUMBER(18)                      NOT NULL,
  PAYCODE       VARCHAR2(6 BYTE)                NOT NULL,
  ACCTNOCODE    VARCHAR2(6 BYTE)                NOT NULL,
  PAYNAME       VARCHAR2(50 BYTE)               NOT NULL,
  POINT         NUMBER                          DEFAULT 0                     NOT NULL,
  RETURNVALUE   VARCHAR2(2000 BYTE),
  REG_DT        DATE,
  BANNER_NAME   VARCHAR2(40 BYTE),
  REPRICE       NUMBER(18),
  REPRICEDATE   DATE,
  ORDERURL      VARCHAR2(10 BYTE),
  VCDBANK       VARCHAR2(2 BYTE),
  VACCT         VARCHAR2(30 BYTE),
  VACCT_NAME    VARCHAR2(30 BYTE),
  REFUND_POINT  NUMBER
);

COMMENT ON COLUMN TB_APPROVALS.ORDERNO IS '상품주문번호';

COMMENT ON COLUMN TB_APPROVALS.PRICE IS '주문결제금액';

COMMENT ON COLUMN TB_APPROVALS.ADDPRICE IS '추가비용(교재구매시 배송료)';

COMMENT ON COLUMN TB_APPROVALS.PAYCODE IS '결제방법코드 - PAY110:카드결제, PAY120:가상계좌,PAT130:계좌이체,PAY100:무통장입금';

COMMENT ON COLUMN TB_APPROVALS.ACCTNOCODE IS '무통장 번호 (사용 안함)';

COMMENT ON COLUMN TB_APPROVALS.PAYNAME IS '결제자 이름';

COMMENT ON COLUMN TB_APPROVALS.POINT IS '사용 포인트';

COMMENT ON COLUMN TB_APPROVALS.REG_DT IS '등록일';

COMMENT ON COLUMN TB_APPROVALS.BANNER_NAME IS '배너 이름 (사용안함)';

COMMENT ON COLUMN TB_APPROVALS.REPRICE IS '환불택배비';

COMMENT ON COLUMN TB_APPROVALS.REPRICEDATE IS '환불택배 등록일';

COMMENT ON COLUMN TB_APPROVALS.ORDERURL IS '주문자URL';

COMMENT ON COLUMN TB_APPROVALS.VCDBANK IS '결제기관코드';

COMMENT ON COLUMN TB_APPROVALS.VACCT IS '가상계좌번호';

COMMENT ON COLUMN TB_APPROVALS.VACCT_NAME IS '결제기관 이름';

COMMENT ON COLUMN TB_APPROVALS.REFUND_POINT IS '환불가능포인트';



--
-- TB_BOARD2  (Table) 
--
CREATE TABLE TB_BOARD2
(
  BOARD_MNG_SEQ             VARCHAR2(20 BYTE)   NOT NULL,
  BOARD_SEQ                 VARCHAR2(20 BYTE)   NOT NULL,
  OPEN_YN                   VARCHAR2(1 BYTE),
  SUBJECT                   VARCHAR2(200 BYTE),
  CONTENT                   CLOB,
  FILE_PATH                 VARCHAR2(100 BYTE),
  FILE_NAME                 VARCHAR2(100 BYTE),
  REAL_FILE_NAME            VARCHAR2(100 BYTE),
  PARENT_BOARD_SEQ          VARCHAR2(20 BYTE),
  NOTICE_TOP_YN             VARCHAR2(1 BYTE),
  REG_DT                    DATE,
  REG_ID                    VARCHAR2(30 BYTE),
  UPD_DT                    DATE,
  UPD_ID                    VARCHAR2(30 BYTE),
  HITS                      NUMBER,
  CREATENAME                VARCHAR2(30 BYTE),
  ANSWER                    CLOB,
  THUMBNAIL_FILE_PATH       VARCHAR2(100 BYTE),
  THUMBNAIL_FILE_NAME       VARCHAR2(100 BYTE),
  THUMBNAIL_FILE_REAL_NAME  VARCHAR2(100 BYTE),
  ISSUE                     VARCHAR2(1 BYTE),
  RECOMMEND                 VARCHAR2(1 BYTE)
);


--
-- TB_BOARD_CATEGORY_INFO  (Table) 
--
CREATE TABLE TB_BOARD_CATEGORY_INFO
(
  BOARD_MNG_SEQ  VARCHAR2(20 BYTE)              NOT NULL,
  BOARD_SEQ      VARCHAR2(20 BYTE)              NOT NULL,
  CATEGORY_CODE  VARCHAR2(20 BYTE)              NOT NULL
);

COMMENT ON COLUMN TB_BOARD_CATEGORY_INFO.BOARD_MNG_SEQ IS '게시판 관리 SEQ
';

COMMENT ON COLUMN TB_BOARD_CATEGORY_INFO.BOARD_SEQ IS '게시판 SEQ
';

COMMENT ON COLUMN TB_BOARD_CATEGORY_INFO.CATEGORY_CODE IS '직렬코드';



--
-- TB_BOARD_COMMENT  (Table) 
--
CREATE TABLE TB_BOARD_COMMENT
(
  SEQ            NUMBER                         NOT NULL,
  BOARD_MNG_SEQ  VARCHAR2(20 BYTE)              NOT NULL,
  BOARD_SEQ      VARCHAR2(20 BYTE)              NOT NULL,
  USER_ID        VARCHAR2(30 BYTE),
  USER_NAME      VARCHAR2(50 BYTE),
  TITLE          VARCHAR2(200 BYTE),
  CONTENT        VARCHAR2(4000 BYTE),
  CHOICE_POINT   VARCHAR2(1 BYTE),
  REG_DT         DATE
);

COMMENT ON COLUMN TB_BOARD_COMMENT.SEQ IS 'SEQ';

COMMENT ON COLUMN TB_BOARD_COMMENT.BOARD_MNG_SEQ IS '게시판코드';

COMMENT ON COLUMN TB_BOARD_COMMENT.BOARD_SEQ IS '게시물번호';

COMMENT ON COLUMN TB_BOARD_COMMENT.USER_ID IS '사용자아이디';

COMMENT ON COLUMN TB_BOARD_COMMENT.USER_NAME IS '사용자이름';

COMMENT ON COLUMN TB_BOARD_COMMENT.TITLE IS '제목';

COMMENT ON COLUMN TB_BOARD_COMMENT.CONTENT IS '내용';

COMMENT ON COLUMN TB_BOARD_COMMENT.CHOICE_POINT IS '별갯수';

COMMENT ON COLUMN TB_BOARD_COMMENT.REG_DT IS '등록일';



--
-- TB_BOARD_CS  (Table) 
--
CREATE TABLE TB_BOARD_CS
(
  BOARD_MNG_SEQ             VARCHAR2(20 BYTE)   NOT NULL,
  BOARD_SEQ                 VARCHAR2(20 BYTE)   NOT NULL,
  CS_DIV                    VARCHAR2(20 BYTE)   NOT NULL,
  CS_KIND                   VARCHAR2(20 BYTE)   NOT NULL,
  OPEN_YN                   VARCHAR2(1 BYTE)    DEFAULT 'N'                   NOT NULL,
  SUBJECT                   VARCHAR2(200 BYTE)  NOT NULL,
  CONTENT                   CLOB,
  FILE_PATH                 VARCHAR2(100 BYTE),
  FILE_NAME                 VARCHAR2(100 BYTE),
  REAL_FILE_NAME            VARCHAR2(100 BYTE),
  PARENT_BOARD_SEQ          VARCHAR2(20 BYTE),
  NOTICE_TOP_YN             VARCHAR2(1 BYTE)    DEFAULT 'N',
  REG_DT                    DATE                DEFAULT SYSDATE,
  REG_ID                    VARCHAR2(30 BYTE),
  UPD_DT                    DATE,
  UPD_ID                    VARCHAR2(30 BYTE),
  HITS                      NUMBER              DEFAULT 0,
  CREATENAME                VARCHAR2(30 BYTE),
  ANSWER                    CLOB,
  THUMBNAIL_FILE_PATH       VARCHAR2(100 BYTE),
  THUMBNAIL_FILE_NAME       VARCHAR2(100 BYTE),
  THUMBNAIL_FILE_REAL_NAME  VARCHAR2(100 BYTE),
  ISSUE                     VARCHAR2(1 BYTE)    DEFAULT 'N',
  RECOMMEND                 VARCHAR2(1 BYTE)    DEFAULT 'N',
  COUNSELOR_ID              VARCHAR2(30 BYTE),
  ACTION_YN                 VARCHAR2(20 BYTE)   DEFAULT 'N'
);

COMMENT ON COLUMN TB_BOARD_CS.BOARD_MNG_SEQ IS '게시판 관리 SEQ';

COMMENT ON COLUMN TB_BOARD_CS.BOARD_SEQ IS '게시판SEQ(MAX값)';

COMMENT ON COLUMN TB_BOARD_CS.CS_DIV IS '상담내용코드(CSCOUNSEL: 고객상담, CSREFUND:환불)';

COMMENT ON COLUMN TB_BOARD_CS.CS_KIND IS '상담분류코드';

COMMENT ON COLUMN TB_BOARD_CS.OPEN_YN IS '공개, 비공개여부 (Y: 공개, N:비공개)';

COMMENT ON COLUMN TB_BOARD_CS.SUBJECT IS '분류';

COMMENT ON COLUMN TB_BOARD_CS.CONTENT IS '내용';

COMMENT ON COLUMN TB_BOARD_CS.FILE_PATH IS '파일경로';

COMMENT ON COLUMN TB_BOARD_CS.FILE_NAME IS '파일명';

COMMENT ON COLUMN TB_BOARD_CS.REAL_FILE_NAME IS '실제파일명';

COMMENT ON COLUMN TB_BOARD_CS.PARENT_BOARD_SEQ IS '부모글';

COMMENT ON COLUMN TB_BOARD_CS.NOTICE_TOP_YN IS '상단공지여부(Y: 상단공지함, N:상단공지안함)';

COMMENT ON COLUMN TB_BOARD_CS.REG_DT IS '등록일';

COMMENT ON COLUMN TB_BOARD_CS.REG_ID IS '등록아이디';

COMMENT ON COLUMN TB_BOARD_CS.UPD_DT IS '수정일';

COMMENT ON COLUMN TB_BOARD_CS.UPD_ID IS '수정아이디';

COMMENT ON COLUMN TB_BOARD_CS.HITS IS '조회수';

COMMENT ON COLUMN TB_BOARD_CS.CREATENAME IS '작성자이름';

COMMENT ON COLUMN TB_BOARD_CS.ANSWER IS '답변';

COMMENT ON COLUMN TB_BOARD_CS.THUMBNAIL_FILE_PATH IS '섬내일경로';

COMMENT ON COLUMN TB_BOARD_CS.THUMBNAIL_FILE_NAME IS '섬내일파일명';

COMMENT ON COLUMN TB_BOARD_CS.THUMBNAIL_FILE_REAL_NAME IS '섬내일실제파일명';

COMMENT ON COLUMN TB_BOARD_CS.ISSUE IS '공지사항 이슈 여부 (Y: 공지사항 이슈, N:공지사항 이슈 아님)';

COMMENT ON COLUMN TB_BOARD_CS.RECOMMEND IS '공지사항 추천 여부(Y: 공지사항 추천, N:공지사항 추천 아님)';

COMMENT ON COLUMN TB_BOARD_CS.COUNSELOR_ID IS '상담자아이디';

COMMENT ON COLUMN TB_BOARD_CS.ACTION_YN IS '상담조치코드 (Y: 조치, N:미조치)';



--
-- TB_BOOKMARK  (Table) 
--
CREATE TABLE TB_BOOKMARK
(
  USER_ID         VARCHAR2(100 BYTE),
  ORDERNO         VARCHAR2(30 BYTE),
  PACKAGE_NO      VARCHAR2(30 BYTE),
  LECTURE_NO      VARCHAR2(30 BYTE),
  MOVIE_NO        VARCHAR2(30 BYTE),
  BOOKMARK_NO     NUMBER                        NOT NULL,
  BOOKMARK_NAME   VARCHAR2(4000 BYTE),
  BOOKMARK_TIME   NUMBER,
  BOOKMARK_SPEED  VARCHAR2(50 BYTE),
  REG_DT          DATE                          DEFAULT SYSDATE
);

COMMENT ON COLUMN TB_BOOKMARK.USER_ID IS '사용자아이디';

COMMENT ON COLUMN TB_BOOKMARK.ORDERNO IS '주문번호';

COMMENT ON COLUMN TB_BOOKMARK.PACKAGE_NO IS '패키지번호';

COMMENT ON COLUMN TB_BOOKMARK.LECTURE_NO IS '강의코드';

COMMENT ON COLUMN TB_BOOKMARK.MOVIE_NO IS '동영상번호';

COMMENT ON COLUMN TB_BOOKMARK.BOOKMARK_NO IS '북마크시퀀스';

COMMENT ON COLUMN TB_BOOKMARK.BOOKMARK_NAME IS '북마크내용';

COMMENT ON COLUMN TB_BOOKMARK.BOOKMARK_TIME IS '북마크시간';

COMMENT ON COLUMN TB_BOOKMARK.BOOKMARK_SPEED IS '북마크속도';

COMMENT ON COLUMN TB_BOOKMARK.REG_DT IS '등록일';



--
-- TB_CATEGORY_INFO  (Table) 
--
CREATE TABLE TB_CATEGORY_INFO
(
  ID        NUMBER                              NOT NULL,
  CODE      VARCHAR2(20 BYTE)                   NOT NULL,
  NAME      VARCHAR2(50 BYTE),
  ISUSE     VARCHAR2(1 BYTE),
  REG_DT    DATE,
  REG_ID    VARCHAR2(30 BYTE),
  UPD_DT    DATE,
  UPD_ID    VARCHAR2(30 BYTE),
  USE_ON    VARCHAR2(1 BYTE),
  USE_OFF   VARCHAR2(1 BYTE),
  P_CODE    VARCHAR2(20 BYTE),
  CODE_VAL  VARCHAR2(20 BYTE),
  ORDR      NUMBER
);

COMMENT ON COLUMN TB_CATEGORY_INFO.ID IS '시퀀스';

COMMENT ON COLUMN TB_CATEGORY_INFO.CODE IS '직종관리코드';

COMMENT ON COLUMN TB_CATEGORY_INFO.NAME IS '직종관리명';

COMMENT ON COLUMN TB_CATEGORY_INFO.ISUSE IS '상태(Y:활성, N:비활성)';

COMMENT ON COLUMN TB_CATEGORY_INFO.REG_DT IS '등록일';

COMMENT ON COLUMN TB_CATEGORY_INFO.REG_ID IS '등록자 아이디';

COMMENT ON COLUMN TB_CATEGORY_INFO.UPD_DT IS '수정일';

COMMENT ON COLUMN TB_CATEGORY_INFO.UPD_ID IS '수정자 아이디';

COMMENT ON COLUMN TB_CATEGORY_INFO.USE_ON IS '온라인직렬사용여부(Y: 사용, N: 미사용)';

COMMENT ON COLUMN TB_CATEGORY_INFO.USE_OFF IS '오프라인직렬사용여부(Y: 사용, N: 미사용)';

COMMENT ON COLUMN TB_CATEGORY_INFO.P_CODE IS '상위코드';

COMMENT ON COLUMN TB_CATEGORY_INFO.CODE_VAL IS '코드값';

COMMENT ON COLUMN TB_CATEGORY_INFO.ORDR IS '정렬순서';



--
-- TB_CATEGORY_SERIES  (Table) 
--
CREATE TABLE TB_CATEGORY_SERIES
(
  SEQ     NUMBER                                NOT NULL,
  CAT_CD  VARCHAR2(20 BYTE)                     NOT NULL,
  SRS_CD  VARCHAR2(20 BYTE)                     NOT NULL,
  ORDR    NUMBER,
  REG_DT  DATE,
  REG_ID  VARCHAR2(30 BYTE),
  UPD_DT  DATE,
  UPD_ID  VARCHAR2(30 BYTE)
);

COMMENT ON COLUMN TB_CATEGORY_SERIES.SEQ IS 'SEQ';

COMMENT ON COLUMN TB_CATEGORY_SERIES.CAT_CD IS '직급(종)코드';

COMMENT ON COLUMN TB_CATEGORY_SERIES.SRS_CD IS '직렬코드';

COMMENT ON COLUMN TB_CATEGORY_SERIES.REG_DT IS '등록일';

COMMENT ON COLUMN TB_CATEGORY_SERIES.REG_ID IS '등록아이디';

COMMENT ON COLUMN TB_CATEGORY_SERIES.UPD_DT IS '수정일';

COMMENT ON COLUMN TB_CATEGORY_SERIES.UPD_ID IS '수정아이디';



--
-- TB_CATEGORY_SUBJECT_ORDER  (Table) 
--
CREATE TABLE TB_CATEGORY_SUBJECT_ORDER
(
  ONOFF_DIV      VARCHAR2(1 BYTE)               NOT NULL,
  CATEGORY_CODE  VARCHAR2(50 BYTE)              NOT NULL,
  SUBJECT_CD     VARCHAR2(50 BYTE)              NOT NULL,
  IDX            NUMBER                         NOT NULL
);

COMMENT ON COLUMN TB_CATEGORY_SUBJECT_ORDER.ONOFF_DIV IS '온라인오프라인 구분코드(O: 온라인, F: 오프라인)';

COMMENT ON COLUMN TB_CATEGORY_SUBJECT_ORDER.CATEGORY_CODE IS '직렬코드';

COMMENT ON COLUMN TB_CATEGORY_SUBJECT_ORDER.SUBJECT_CD IS '과목코드';



--
-- TB_CA_BOOK  (Table) 
--
CREATE TABLE TB_CA_BOOK
(
  SEQ                  NUMBER                   NOT NULL,
  RSC_ID               VARCHAR2(100 BYTE)       NOT NULL,
  SUBJECT_SJT_CD       VARCHAR2(1000 BYTE),
  CATEGORY_CD          VARCHAR2(55 BYTE),
  LEARNING_CD          VARCHAR2(20 BYTE),
  BOOK_NM              VARCHAR2(4000 BYTE),
  BOOK_INFO            CLOB,
  BOOK_MEMO            VARCHAR2(4000 BYTE),
  BOOK_KEYWORD         VARCHAR2(4000 BYTE),
  ISSUE_DATE           VARCHAR2(8 BYTE),
  COVER_TYPE           VARCHAR2(1 BYTE),
  BOOK_CONTENTS        VARCHAR2(4000 BYTE),
  PRICE                NUMBER,
  DISCOUNT             NUMBER,
  DISCOUNT_PRICE       NUMBER,
  POINT                NUMBER,
  BOOK_PUBLISHERS      VARCHAR2(100 BYTE),
  BOOK_AUTHOR          VARCHAR2(50 BYTE),
  BOOK_SUPPLEMENTDATA  VARCHAR2(1 BYTE),
  BOOK_PRINTINGDATE    VARCHAR2(1 BYTE),
  BOOK_MAIN            VARCHAR2(1 BYTE),
  BOOK_SUB             VARCHAR2(1 BYTE),
  BOOK_STUDENTBOOK     VARCHAR2(1 BYTE),
  ATTACH_FILE          VARCHAR2(100 BYTE),
  ATTACH_IMG_L         VARCHAR2(100 BYTE),
  ATTACH_IMG_M         VARCHAR2(100 BYTE),
  ATTACH_IMG_S         VARCHAR2(100 BYTE),
  ATTACH_DETAIL_INFO   VARCHAR2(100 BYTE),
  BOOK_STOCK           NUMBER,
  FREE_POST            VARCHAR2(1 BYTE),
  BOOK_DATE            VARCHAR2(8 BYTE),
  NEW_BOOK             VARCHAR2(1 BYTE),
  MAIN_VIEW            VARCHAR2(1 BYTE),
  USE_YN               VARCHAR2(1 BYTE),
  REG_DT               DATE,
  REG_ID               VARCHAR2(30 BYTE),
  UPD_DT               DATE,
  UPD_ID               VARCHAR2(30 BYTE)
);

COMMENT ON COLUMN TB_CA_BOOK.SEQ IS '시퀀스';

COMMENT ON COLUMN TB_CA_BOOK.RSC_ID IS '교재코드(L + 현재날짜 + 시퀀스5자리, 시퀀스가 20일경우 앞의 3자리는 0으로 채운다)';

COMMENT ON COLUMN TB_CA_BOOK.SUBJECT_SJT_CD IS '과목(과목코드#강사아이디로 입력)(과목을 두개 이상 추가할 경우,로 구분) 1005#wgt202,1003#wgt53';

COMMENT ON COLUMN TB_CA_BOOK.CATEGORY_CD IS '직종코드';

COMMENT ON COLUMN TB_CA_BOOK.LEARNING_CD IS '학습형태 코드';

COMMENT ON COLUMN TB_CA_BOOK.BOOK_NM IS '도서명';

COMMENT ON COLUMN TB_CA_BOOK.BOOK_INFO IS '도서상세설명';

COMMENT ON COLUMN TB_CA_BOOK.BOOK_MEMO IS '메모';

COMMENT ON COLUMN TB_CA_BOOK.BOOK_KEYWORD IS '키워드';

COMMENT ON COLUMN TB_CA_BOOK.ISSUE_DATE IS '이벤트 기간';

COMMENT ON COLUMN TB_CA_BOOK.COVER_TYPE IS '상품상태(A: 주문가능, S: 품절, O: 절판, N: 신규) ';

COMMENT ON COLUMN TB_CA_BOOK.BOOK_CONTENTS IS '목차';

COMMENT ON COLUMN TB_CA_BOOK.PRICE IS '도서가격';

COMMENT ON COLUMN TB_CA_BOOK.DISCOUNT IS '할인율';

COMMENT ON COLUMN TB_CA_BOOK.DISCOUNT_PRICE IS '할인가';

COMMENT ON COLUMN TB_CA_BOOK.POINT IS '포인트';

COMMENT ON COLUMN TB_CA_BOOK.BOOK_PUBLISHERS IS '출판사';

COMMENT ON COLUMN TB_CA_BOOK.BOOK_AUTHOR IS '저자';

COMMENT ON COLUMN TB_CA_BOOK.BOOK_SUPPLEMENTDATA IS '보충자료';

COMMENT ON COLUMN TB_CA_BOOK.BOOK_PRINTINGDATE IS '프린트자료';

COMMENT ON COLUMN TB_CA_BOOK.BOOK_MAIN IS '주교재';

COMMENT ON COLUMN TB_CA_BOOK.BOOK_SUB IS '부교재';

COMMENT ON COLUMN TB_CA_BOOK.BOOK_STUDENTBOOK IS '수강생교재';

COMMENT ON COLUMN TB_CA_BOOK.ATTACH_FILE IS '첨부파일';

COMMENT ON COLUMN TB_CA_BOOK.ATTACH_IMG_L IS '도서이미지(L)';

COMMENT ON COLUMN TB_CA_BOOK.ATTACH_IMG_M IS '도서이미지(M)';

COMMENT ON COLUMN TB_CA_BOOK.ATTACH_IMG_S IS '도서이미지(S)';

COMMENT ON COLUMN TB_CA_BOOK.ATTACH_DETAIL_INFO IS '도서이미지(D)';

COMMENT ON COLUMN TB_CA_BOOK.BOOK_STOCK IS '도서재고';

COMMENT ON COLUMN TB_CA_BOOK.FREE_POST IS '무료배송(Y: 무료배송가능, N: 무료배송불가)                       ';

COMMENT ON COLUMN TB_CA_BOOK.BOOK_DATE IS '도서 발행일';

COMMENT ON COLUMN TB_CA_BOOK.NEW_BOOK IS '신간반영(Y: 반영, N: 미반영)                     ';

COMMENT ON COLUMN TB_CA_BOOK.MAIN_VIEW IS '메인반영(Y: 반영, N: 미반영)  ';

COMMENT ON COLUMN TB_CA_BOOK.USE_YN IS '상태(Y: 활성, N: 비활성)          ';

COMMENT ON COLUMN TB_CA_BOOK.REG_DT IS '등록일';

COMMENT ON COLUMN TB_CA_BOOK.REG_ID IS '등록자 아이디';

COMMENT ON COLUMN TB_CA_BOOK.UPD_DT IS '수정일';

COMMENT ON COLUMN TB_CA_BOOK.UPD_ID IS '수정자 아이디';



--
-- TB_CC_CART  (Table) 
--
CREATE TABLE TB_CC_CART
(
  SEQ             NUMBER,
  USER_ID         VARCHAR2(20 BYTE)             NOT NULL,
  LECCODE         VARCHAR2(30 BYTE),
  KIND_TYPE       VARCHAR2(1 BYTE)              NOT NULL,
  RSC_ID          VARCHAR2(30 BYTE),
  RSC_TYPE        VARCHAR2(1 BYTE),
  MOVIE_TYPE      VARCHAR2(2 BYTE),
  REGDATE         DATE,
  REPRICE         NUMBER,
  PACKAGE_PERIOD  NUMBER,
  SDATE           VARCHAR2(50 BYTE),
  EDATE           VARCHAR2(50 BYTE),
  BOOK_COUNT      NUMBER,
  ORDERNO         VARCHAR2(20 BYTE)
);

COMMENT ON COLUMN TB_CC_CART.SEQ IS 'SEQ';

COMMENT ON COLUMN TB_CC_CART.USER_ID IS '사용자아이디';

COMMENT ON COLUMN TB_CC_CART.LECCODE IS '강의코드';

COMMENT ON COLUMN TB_CC_CART.KIND_TYPE IS '상품구분(D: 단과, J: 종합, N: 선택형, P: 패키지, M: 오프라인, L: 도서, S: 사물함, T: 독서실)';

COMMENT ON COLUMN TB_CC_CART.RSC_ID IS '교재코드';

COMMENT ON COLUMN TB_CC_CART.RSC_TYPE IS '교재구분코드( J: 주교재, B: 부교재, S: 수강생교재)
카트에 담은 J:주교재, B: 부교재, S:수강생교재';

COMMENT ON COLUMN TB_CC_CART.MOVIE_TYPE IS '동영상구분코드(1: VOD, 2: PMP, 3 VOD+PMP, AA: MP4, BB: VOD+MP4)';

COMMENT ON COLUMN TB_CC_CART.REGDATE IS '등록일';

COMMENT ON COLUMN TB_CC_CART.REPRICE IS '가격(재수강 신청시 할인된 실제가격)';

COMMENT ON COLUMN TB_CC_CART.PACKAGE_PERIOD IS '연장기간';

COMMENT ON COLUMN TB_CC_CART.SDATE IS '연장시작일자';

COMMENT ON COLUMN TB_CC_CART.EDATE IS '연장종료일자';

COMMENT ON COLUMN TB_CC_CART.BOOK_COUNT IS '교재갯수(카트에 담은 교재 수량 개수)';

COMMENT ON COLUMN TB_CC_CART.ORDERNO IS '주문번호(연장시 TBL_MYLECTURE4의 값에 orderno값을 저장)';



--
-- TB_CC_J_CART  (Table) 
--
CREATE TABLE TB_CC_J_CART
(
  SEQ          NUMBER,
  LECCODE      VARCHAR2(30 BYTE),
  MST_LECCODE  VARCHAR2(30 BYTE),
  UPDATE_ID    VARCHAR2(30 BYTE),
  REG_DT       DATE,
  PRICE        NUMBER,
  KIND_TYPE    VARCHAR2(1 BYTE)
);

COMMENT ON TABLE TB_CC_J_CART IS '종합반 장바구니';

COMMENT ON COLUMN TB_CC_J_CART.SEQ IS 'SEQ';

COMMENT ON COLUMN TB_CC_J_CART.LECCODE IS '강의코드';

COMMENT ON COLUMN TB_CC_J_CART.MST_LECCODE IS '단과 강의코드';

COMMENT ON COLUMN TB_CC_J_CART.UPDATE_ID IS '수정아이디';

COMMENT ON COLUMN TB_CC_J_CART.REG_DT IS '등록일';

COMMENT ON COLUMN TB_CC_J_CART.PRICE IS '결제금액';

COMMENT ON COLUMN TB_CC_J_CART.KIND_TYPE IS '상품구분(D: 단과, J: 종합, N: 선택형, P: 패키지, M: 오프라인, L: 도서, S: 사물함, T: 독서실)';



--
-- TB_CHOICE_JONG_NO  (Table) 
--
CREATE TABLE TB_CHOICE_JONG_NO
(
  SEQ          NUMBER                           NOT NULL,
  LECCODE      VARCHAR2(30 BYTE),
  NO           NUMBER                           NOT NULL,
  CATEGORY_CD  VARCHAR2(100 BYTE)               NOT NULL
);

COMMENT ON COLUMN TB_CHOICE_JONG_NO.SEQ IS 'SEQ(TB_LEC_MST 테이블의 SEQ 값 (선택종합반 SEQ 값과 매칭))';

COMMENT ON COLUMN TB_CHOICE_JONG_NO.LECCODE IS '선택종합반과목코드';

COMMENT ON COLUMN TB_CHOICE_JONG_NO.NO IS '부과목선택갯수';

COMMENT ON COLUMN TB_CHOICE_JONG_NO.CATEGORY_CD IS '직렬코드';



--
-- TB_COMMENT  (Table) 
--
CREATE TABLE TB_COMMENT
(
  SEQ           NUMBER                          NOT NULL,
  LECCODE       VARCHAR2(30 BYTE)               NOT NULL,
  USER_ID       VARCHAR2(30 BYTE),
  USER_NAME     VARCHAR2(50 BYTE),
  CONTENT       VARCHAR2(4000 BYTE),
  CHOICE_POINT  VARCHAR2(1 BYTE),
  REG_DT        DATE,
  TITLE         VARCHAR2(200 BYTE)
);

COMMENT ON COLUMN TB_COMMENT.SEQ IS 'SEQ';

COMMENT ON COLUMN TB_COMMENT.LECCODE IS '강의코드';

COMMENT ON COLUMN TB_COMMENT.USER_ID IS '사용자아이디';

COMMENT ON COLUMN TB_COMMENT.USER_NAME IS '사용자이름';

COMMENT ON COLUMN TB_COMMENT.CONTENT IS '내용';

COMMENT ON COLUMN TB_COMMENT.CHOICE_POINT IS '별갯수';

COMMENT ON COLUMN TB_COMMENT.REG_DT IS '등록일';

COMMENT ON COLUMN TB_COMMENT.TITLE IS '제목';



--
-- TB_COMMENT_BOOK  (Table) 
--
CREATE TABLE TB_COMMENT_BOOK
(
  SEQ           NUMBER                          NOT NULL,
  RSC_ID        VARCHAR2(100 BYTE)              NOT NULL,
  USER_ID       VARCHAR2(30 BYTE),
  USER_NAME     VARCHAR2(50 BYTE),
  TITLE         VARCHAR2(200 BYTE),
  CONTENT       VARCHAR2(4000 BYTE),
  CHOICE_POINT  VARCHAR2(1 BYTE),
  REG_DT        DATE
);

COMMENT ON COLUMN TB_COMMENT_BOOK.SEQ IS 'SEQ';

COMMENT ON COLUMN TB_COMMENT_BOOK.RSC_ID IS '교재코드';

COMMENT ON COLUMN TB_COMMENT_BOOK.USER_ID IS '사용자아이디';

COMMENT ON COLUMN TB_COMMENT_BOOK.USER_NAME IS '사용자이름';

COMMENT ON COLUMN TB_COMMENT_BOOK.TITLE IS '제목';

COMMENT ON COLUMN TB_COMMENT_BOOK.CONTENT IS '내용';

COMMENT ON COLUMN TB_COMMENT_BOOK.CHOICE_POINT IS '별갯수';

COMMENT ON COLUMN TB_COMMENT_BOOK.REG_DT IS '등록일';



--
-- TB_DANINTCOUNT  (Table) 
--
CREATE TABLE TB_DANINTCOUNT
(
  ORDERNO        VARCHAR2(20 BYTE),
  DAN_INT_COUNT  NUMBER,
  REAL_CARTSUM   NUMBER,
  REGDATE        DATE
);


--
-- TB_DANPINT  (Table) 
--
CREATE TABLE TB_DANPINT
(
  ORDERNO       VARCHAR2(20 BYTE),
  DAN_POINT     NUMBER,
  REAL_CARTSUM  NUMBER,
  REGDATE       DATE,
  BOOK_POINT    NUMBER,
  USER_ID       VARCHAR2(20 BYTE)
);


--
-- TB_DELIVERS  (Table) 
--
CREATE TABLE TB_DELIVERS
(
  ORDERNO   VARCHAR2(20 BYTE)                   NOT NULL,
  SENDNO    VARCHAR2(50 BYTE),
  USERNAME  NVARCHAR2(100)                      NOT NULL,
  TELNO     VARCHAR2(15 BYTE),
  CELLNO    VARCHAR2(15 BYTE)                   NOT NULL,
  ZIPCD     VARCHAR2(7 BYTE)                    NOT NULL,
  ADDR      NVARCHAR2(400)                      NOT NULL,
  MEMO      NVARCHAR2(2000)                     NOT NULL,
  REGDATE   DATE                                NOT NULL,
  SENDDATE  DATE,
  DLEORDER  VARCHAR2(6 BYTE),
  CHARGE    NUMBER(10)                          DEFAULT 0
);

COMMENT ON COLUMN TB_DELIVERS.ORDERNO IS '상품주문번호';

COMMENT ON COLUMN TB_DELIVERS.SENDNO IS '송장번호(9999999999 로 저장)';

COMMENT ON COLUMN TB_DELIVERS.USERNAME IS '주문자이름';

COMMENT ON COLUMN TB_DELIVERS.TELNO IS '전화번호';

COMMENT ON COLUMN TB_DELIVERS.CELLNO IS '휴대폰번호';

COMMENT ON COLUMN TB_DELIVERS.ZIPCD IS '우편번호';

COMMENT ON COLUMN TB_DELIVERS.ADDR IS '주소';

COMMENT ON COLUMN TB_DELIVERS.MEMO IS '배송시유의사항';

COMMENT ON COLUMN TB_DELIVERS.REGDATE IS '등록일';

COMMENT ON COLUMN TB_DELIVERS.SENDDATE IS '배송일';

COMMENT ON COLUMN TB_DELIVERS.DLEORDER IS '배송방법(DLE100: 우편배송  , DLE110: 방문수령)';

COMMENT ON COLUMN TB_DELIVERS.CHARGE IS '배송비';



--
-- TB_DISCOUNT  (Table) 
--
CREATE TABLE TB_DISCOUNT
(
  LEC_MENU1         VARCHAR2(10 BYTE)           NOT NULL,
  LEC_MENU2         VARCHAR2(10 BYTE)           NOT NULL,
  START_EVENT_DATE  DATE                        NOT NULL,
  END_EVENT_DATE    DATE                        NOT NULL,
  EVENT_COUNT       NUMBER                      NOT NULL,
  EVENT_PERCENT     NUMBER                      NOT NULL
);

COMMENT ON COLUMN TB_DISCOUNT.LEC_MENU1 IS '자동 증가값';

COMMENT ON COLUMN TB_DISCOUNT.LEC_MENU2 IS '1개일때 할인률';

COMMENT ON COLUMN TB_DISCOUNT.START_EVENT_DATE IS '4개일때 할인률';



--
-- TB_EVENT_FILE  (Table) 
--
CREATE TABLE TB_EVENT_FILE
(
  EVENT_NO   VARCHAR2(20 BYTE)                  NOT NULL,
  FILE_NO    VARCHAR2(20 BYTE)                  NOT NULL,
  FILE_NAME  VARCHAR2(100 BYTE),
  FILE_PATH  VARCHAR2(100 BYTE),
  REG_ID     VARCHAR2(30 BYTE),
  REG_DT     DATE,
  UPD_ID     VARCHAR2(30 BYTE),
  UPD_DT     DATE
);


--
-- TB_EVENT_INFO  (Table) 
--
CREATE TABLE TB_EVENT_INFO
(
  EVENT_NO         VARCHAR2(20 BYTE)            NOT NULL,
  ONOFF_DIV        VARCHAR2(1 BYTE),
  CATEGORY_CODE    VARCHAR2(30 BYTE),
  NOTICE_GUBUN     VARCHAR2(10 BYTE),
  OPEN_YN          VARCHAR2(1 BYTE),
  MEMBER_GUBUN     VARCHAR2(1 BYTE),
  HIT              NUMBER,
  START_DATE       VARCHAR2(8 BYTE),
  START_TIME       VARCHAR2(2 BYTE),
  END_DATE         VARCHAR2(8 BYTE),
  END_TIME         VARCHAR2(2 BYTE),
  TITLE            VARCHAR2(500 BYTE),
  CONTENTS_TEXT    CLOB,
  CONTENTS_IMG     VARCHAR2(100 BYTE),
  LIST_THUMBNAIL   VARCHAR2(100 BYTE),
  ISSUE_THUMBNAIL  VARCHAR2(100 BYTE),
  REG_ID           VARCHAR2(30 BYTE),
  REG_DT           DATE,
  UPD_ID           VARCHAR2(30 BYTE),
  UPD_DT           DATE,
  OPTION1_YN       VARCHAR2(1 BYTE),
  OPTION2_YN       VARCHAR2(1 BYTE)
);

COMMENT ON COLUMN TB_EVENT_INFO.EVENT_NO IS '이벤트번호';

COMMENT ON COLUMN TB_EVENT_INFO.ONOFF_DIV IS '온라인, 오프라인 구분';

COMMENT ON COLUMN TB_EVENT_INFO.CATEGORY_CODE IS '직렬코드 ';

COMMENT ON COLUMN TB_EVENT_INFO.NOTICE_GUBUN IS '공지구분코드 (1: TOP, 2: 이슈)';

COMMENT ON COLUMN TB_EVENT_INFO.OPEN_YN IS '적용여부코드(Y: 공개, N: 비공개)             ';

COMMENT ON COLUMN TB_EVENT_INFO.MEMBER_GUBUN IS '이벤트참여회원구분코드 (1: 회원+비회원, 2: 회원)';

COMMENT ON COLUMN TB_EVENT_INFO.HIT IS '조회수';

COMMENT ON COLUMN TB_EVENT_INFO.START_DATE IS '이벤트 시작일';

COMMENT ON COLUMN TB_EVENT_INFO.START_TIME IS '이벤트 시작시간';

COMMENT ON COLUMN TB_EVENT_INFO.END_DATE IS '이벤트 종료일';

COMMENT ON COLUMN TB_EVENT_INFO.END_TIME IS '이벤트 종료시간';

COMMENT ON COLUMN TB_EVENT_INFO.TITLE IS '이벤트 제목';

COMMENT ON COLUMN TB_EVENT_INFO.CONTENTS_TEXT IS '내용 TEXT';

COMMENT ON COLUMN TB_EVENT_INFO.CONTENTS_IMG IS '내용 IMG';

COMMENT ON COLUMN TB_EVENT_INFO.LIST_THUMBNAIL IS '리스트 썸네일';

COMMENT ON COLUMN TB_EVENT_INFO.ISSUE_THUMBNAIL IS '이슈 리스트 썸네일';

COMMENT ON COLUMN TB_EVENT_INFO.REG_ID IS '등록자 아이디';

COMMENT ON COLUMN TB_EVENT_INFO.REG_DT IS '등록일';

COMMENT ON COLUMN TB_EVENT_INFO.UPD_ID IS '수정자 아이디';

COMMENT ON COLUMN TB_EVENT_INFO.UPD_DT IS '수정일';



--
-- TB_EVENT_OPTION1  (Table) 
--
CREATE TABLE TB_EVENT_OPTION1
(
  EVENT_NO         VARCHAR2(20 BYTE)            NOT NULL,
  OPTION_NO        VARCHAR2(20 BYTE)            NOT NULL,
  OPTION_NAME      VARCHAR2(2000 BYTE),
  PEOPLE_GUBUN     VARCHAR2(1 BYTE),
  PEOPLE_CNT       NUMBER,
  MULTI_SELECT_YN  VARCHAR2(1 BYTE),
  REG_ID           VARCHAR2(30 BYTE),
  REG_DT           DATE,
  UPD_ID           VARCHAR2(30 BYTE),
  UPD_DT           DATE
);

COMMENT ON COLUMN TB_EVENT_OPTION1.EVENT_NO IS '이벤트번호  ';

COMMENT ON COLUMN TB_EVENT_OPTION1.OPTION_NO IS '옵션번호';

COMMENT ON COLUMN TB_EVENT_OPTION1.OPTION_NAME IS '옵션이름';

COMMENT ON COLUMN TB_EVENT_OPTION1.PEOPLE_GUBUN IS '인원설정(1: 무제한, 2: 인원설정)';

COMMENT ON COLUMN TB_EVENT_OPTION1.PEOPLE_CNT IS '인원제한수';

COMMENT ON COLUMN TB_EVENT_OPTION1.MULTI_SELECT_YN IS '이벤트 시작일';

COMMENT ON COLUMN TB_EVENT_OPTION1.REG_ID IS '이벤트 시작시간';

COMMENT ON COLUMN TB_EVENT_OPTION1.REG_DT IS '이벤트 종료일';

COMMENT ON COLUMN TB_EVENT_OPTION1.UPD_ID IS '이벤트 종료시간';

COMMENT ON COLUMN TB_EVENT_OPTION1.UPD_DT IS '수정일';



--
-- TB_EVENT_OPTION2  (Table) 
--
CREATE TABLE TB_EVENT_OPTION2
(
  EVENT_NO  VARCHAR2(20 BYTE)                   NOT NULL,
  NO        NUMBER,
  USER_ID   VARCHAR2(30 BYTE),
  USER_NM   VARCHAR2(50 BYTE),
  TXT       VARCHAR2(4000 BYTE),
  REG_DT    DATE
);

COMMENT ON COLUMN TB_EVENT_OPTION2.EVENT_NO IS '이벤트번호';

COMMENT ON COLUMN TB_EVENT_OPTION2.NO IS 'SEQ';

COMMENT ON COLUMN TB_EVENT_OPTION2.USER_ID IS '사용자 아이디';

COMMENT ON COLUMN TB_EVENT_OPTION2.USER_NM IS '사용자 명';

COMMENT ON COLUMN TB_EVENT_OPTION2.TXT IS '댓글';

COMMENT ON COLUMN TB_EVENT_OPTION2.REG_DT IS '등록일';



--
-- TB_EVENT_RESULT  (Table) 
--
CREATE TABLE TB_EVENT_RESULT
(
  EVENT_NO   VARCHAR2(20 BYTE)                  NOT NULL,
  OPTION_NO  VARCHAR2(20 BYTE)                  NOT NULL,
  USER_ID    VARCHAR2(30 BYTE),
  USER_NAME  VARCHAR2(50 BYTE),
  PHONE_NO   VARCHAR2(20 BYTE),
  EMAIL      VARCHAR2(50 BYTE),
  REG_DT     DATE
);

COMMENT ON COLUMN TB_EVENT_RESULT.EVENT_NO IS '이벤트번호';

COMMENT ON COLUMN TB_EVENT_RESULT.OPTION_NO IS '옵션번호';

COMMENT ON COLUMN TB_EVENT_RESULT.USER_ID IS '아이디';

COMMENT ON COLUMN TB_EVENT_RESULT.USER_NAME IS '이름';

COMMENT ON COLUMN TB_EVENT_RESULT.PHONE_NO IS '연락처';

COMMENT ON COLUMN TB_EVENT_RESULT.EMAIL IS '이메일';

COMMENT ON COLUMN TB_EVENT_RESULT.REG_DT IS '신청일자';



--
-- TB_LEARNING_FORM_INFO  (Table) 
--
CREATE TABLE TB_LEARNING_FORM_INFO
(
  LEC_DIV  VARCHAR2(10 BYTE)                    NOT NULL,
  CODE     VARCHAR2(20 BYTE)                    NOT NULL,
  NAME     VARCHAR2(50 BYTE),
  ISUSE    VARCHAR2(1 BYTE),
  REG_DT   DATE,
  REG_ID   VARCHAR2(30 BYTE),
  UPD_DT   DATE,
  UPD_ID   VARCHAR2(30 BYTE)
);

COMMENT ON COLUMN TB_LEARNING_FORM_INFO.LEC_DIV IS '단과 종합반 선택형종합반 패키지 구분(코드 테이블에 해당 정보 저장)';

COMMENT ON COLUMN TB_LEARNING_FORM_INFO.CODE IS '학습형태코드';

COMMENT ON COLUMN TB_LEARNING_FORM_INFO.NAME IS '학습형태명';

COMMENT ON COLUMN TB_LEARNING_FORM_INFO.ISUSE IS '상태 (Y: 활성, N: 비활성) ';

COMMENT ON COLUMN TB_LEARNING_FORM_INFO.REG_DT IS '등록일';

COMMENT ON COLUMN TB_LEARNING_FORM_INFO.REG_ID IS '등록아이디';

COMMENT ON COLUMN TB_LEARNING_FORM_INFO.UPD_DT IS '수정일';

COMMENT ON COLUMN TB_LEARNING_FORM_INFO.UPD_ID IS '수정아이디';



--
-- TB_LEC_BRIDGE  (Table) 
--
CREATE TABLE TB_LEC_BRIDGE
(
  SEQ             NUMBER                        NOT NULL,
  BRIDGE_LECCODE  VARCHAR2(30 BYTE)             NOT NULL,
  LECCODE         VARCHAR2(30 BYTE)             NOT NULL,
  REG_DT          DATE,
  REG_ID          VARCHAR2(30 BYTE),
  UPD_DT          DATE,
  UPD_ID          VARCHAR2(30 BYTE)
);

COMMENT ON COLUMN TB_LEC_BRIDGE.SEQ IS 'SEQ';

COMMENT ON COLUMN TB_LEC_BRIDGE.BRIDGE_LECCODE IS '연결과목코드';

COMMENT ON COLUMN TB_LEC_BRIDGE.REG_DT IS '등록일';

COMMENT ON COLUMN TB_LEC_BRIDGE.REG_ID IS '등록아이디';

COMMENT ON COLUMN TB_LEC_BRIDGE.UPD_DT IS '수정일';

COMMENT ON COLUMN TB_LEC_BRIDGE.UPD_ID IS '수정아이디';



--
-- TB_LEC_JONG  (Table) 
--
CREATE TABLE TB_LEC_JONG
(
  SEQ          NUMBER                           NOT NULL,
  LECCODE      VARCHAR2(30 BYTE)                NOT NULL,
  MST_LECCODE  VARCHAR2(30 BYTE)                NOT NULL,
  REG_DT       DATE,
  REG_ID       VARCHAR2(30 BYTE),
  UPD_DT       DATE,
  UPD_ID       VARCHAR2(30 BYTE),
  SORT         NUMBER,
  GUBUN        VARCHAR2(1 BYTE)
);

COMMENT ON COLUMN TB_LEC_JONG.SEQ IS '순번';

COMMENT ON COLUMN TB_LEC_JONG.LECCODE IS '종합반 강의코드';

COMMENT ON COLUMN TB_LEC_JONG.MST_LECCODE IS '단과반 강의코드';

COMMENT ON COLUMN TB_LEC_JONG.REG_DT IS '등록일';

COMMENT ON COLUMN TB_LEC_JONG.REG_ID IS '등록자 아이디';

COMMENT ON COLUMN TB_LEC_JONG.UPD_DT IS '수정일';

COMMENT ON COLUMN TB_LEC_JONG.UPD_ID IS '수정자 아이디';

COMMENT ON COLUMN TB_LEC_JONG.SORT IS '단과반 강의코드 소팅';

COMMENT ON COLUMN TB_LEC_JONG.GUBUN IS '필수, 선택 구분(필수 1, 선택 2)';



--
-- TB_LEC_MST  (Table) 
--
CREATE TABLE TB_LEC_MST
(
  SEQ                        NUMBER             NOT NULL,
  LECCODE                    VARCHAR2(30 BYTE)  NOT NULL,
  CATEGORY_CD                VARCHAR2(20 BYTE),
  LEARNING_CD                VARCHAR2(20 BYTE),
  SUBJECT_TEACHER            VARCHAR2(30 BYTE),
  SUBJECT_TEACHER_PAYMENT    VARCHAR2(50 BYTE),
  SUBJECT_TITLE              VARCHAR2(1000 BYTE),
  SUBJECT_DESC               CLOB,
  SUBJECT_MEMO               CLOB,
  SUBJECT_KEYWORD            VARCHAR2(600 BYTE),
  SUBJECT_PERIOD             NUMBER,
  SUBJECT_OFF_OPEN_YEAR      VARCHAR2(4 BYTE),
  SUBJECT_OFF_OPEN_MONTH     VARCHAR2(2 BYTE),
  SUBJECT_OFF_OPEN_DAY       VARCHAR2(2 BYTE),
  SUBJECT_DISCOUNT           NUMBER,
  SUBJECT_PRICE              NUMBER,
  SUBJECT_POINT              NUMBER,
  SUBJECT_MOVIE              NUMBER,
  SUBJECT_PMP                NUMBER,
  SUBJECT_MOVIE_PMP          NUMBER,
  SUBJECT_MOVIE_MP4          NUMBER,
  SUBJECT_MOVIE_VOD_MP4      NUMBER,
  SUBJECT_SUMNAIL            VARCHAR2(1000 BYTE),
  SUBJECT_EVENT_IMAGE        VARCHAR2(1000 BYTE),
  SUBJECT_OUTSIDE            VARCHAR2(1 BYTE),
  SUBJECT_OPTION             VARCHAR2(1000 BYTE),
  SUBJECT_ISUSE              VARCHAR2(1 BYTE),
  SUBJECT_SJT_CD             VARCHAR2(50 BYTE),
  TWO_SUBJECT                VARCHAR2(30 BYTE),
  THREE_SUBJECT              VARCHAR2(30 BYTE),
  FIVE_SUBJECT               VARCHAR2(30 BYTE),
  SUBJECT_VOD_DEFAULT_PATH   VARCHAR2(800 BYTE),
  SUBJECT_MP4_DEFAULT_PATH   VARCHAR2(800 BYTE),
  SUBJECT_PMP_DEFAULT_PATH   VARCHAR2(800 BYTE),
  SUBJECT_PASS               VARCHAR2(50 BYTE),
  SUBJECT_JANG               VARCHAR2(1 BYTE),
  RE_COURSE                  VARCHAR2(30 BYTE),
  LEC_SCHEDULE               VARCHAR2(50 BYTE),
  REG_DT                     DATE,
  REG_ID                     VARCHAR2(30 BYTE),
  UPD_DT                     DATE,
  UPD_ID                     VARCHAR2(30 BYTE),
  LEC_TYPE_CHOICE            VARCHAR2(1 BYTE),
  PLAN                       CLOB,
  REC_GUBUN                  VARCHAR2(1 BYTE),
  LEC_GUBUN                  VARCHAR2(1 BYTE),
  MOV_ING                    VARCHAR2(1 BYTE)   DEFAULT 'C',
  GIFT_FLAG                  VARCHAR2(1 BYTE),
  GIFT_COUPON_CCODE          VARCHAR2(4000 BYTE),
  GIFT_LECCODE               VARCHAR2(4000 BYTE),
  COUPON_NAME                VARCHAR2(4000 BYTE),
  GIFT_NAME                  VARCHAR2(4000 BYTE),
  TEACHERNO                  INTEGER,
  ICON_GUBUN                 VARCHAR2(10 BYTE),
  MO_COUPON_NAME             VARCHAR2(4000 BYTE),
  MO_COUPON_CCODE            VARCHAR2(4000 BYTE),
  FREE_TAB                   VARCHAR2(10 BYTE),
  SUBJECT_MONITORMODE        NVARCHAR2(100),
  SUBJECT_WIDE_DEFAULT_PATH  VARCHAR2(800 BYTE),
  MUST_PRF_IMG               VARCHAR2(200 BYTE),
  SEL_PRF_IMG                VARCHAR2(200 BYTE)
);

COMMENT ON COLUMN TB_LEC_MST.SEQ IS 'SEQ';

COMMENT ON COLUMN TB_LEC_MST.LECCODE IS '강의코드';

COMMENT ON COLUMN TB_LEC_MST.CATEGORY_CD IS '직렬코드 ';

COMMENT ON COLUMN TB_LEC_MST.LEARNING_CD IS '학습형태코드  (이론단과[M0101],문풀단과[M0102],유료특강[M0103],무료특강[M0104]),';

COMMENT ON COLUMN TB_LEC_MST.SUBJECT_TEACHER IS '교수아이디 ';

COMMENT ON COLUMN TB_LEC_MST.SUBJECT_TEACHER_PAYMENT IS '교수강사료지급률';

COMMENT ON COLUMN TB_LEC_MST.SUBJECT_TITLE IS '강의명    ';

COMMENT ON COLUMN TB_LEC_MST.SUBJECT_DESC IS '강의상세설명';

COMMENT ON COLUMN TB_LEC_MST.SUBJECT_MEMO IS '강의요약';

COMMENT ON COLUMN TB_LEC_MST.SUBJECT_KEYWORD IS '키워드';

COMMENT ON COLUMN TB_LEC_MST.SUBJECT_PERIOD IS '강의기간 ';

COMMENT ON COLUMN TB_LEC_MST.SUBJECT_OFF_OPEN_YEAR IS '기간(년)  ';

COMMENT ON COLUMN TB_LEC_MST.SUBJECT_OFF_OPEN_MONTH IS '기간(월) ';

COMMENT ON COLUMN TB_LEC_MST.SUBJECT_OFF_OPEN_DAY IS '기간(일)      ';

COMMENT ON COLUMN TB_LEC_MST.SUBJECT_DISCOUNT IS '할인율';

COMMENT ON COLUMN TB_LEC_MST.SUBJECT_PRICE IS '원가';

COMMENT ON COLUMN TB_LEC_MST.SUBJECT_POINT IS '포인트';

COMMENT ON COLUMN TB_LEC_MST.SUBJECT_MOVIE IS '동영상수강료';

COMMENT ON COLUMN TB_LEC_MST.SUBJECT_PMP IS 'PMP 수강료';

COMMENT ON COLUMN TB_LEC_MST.SUBJECT_MOVIE_PMP IS '동영상 + PMP수강료';

COMMENT ON COLUMN TB_LEC_MST.SUBJECT_MOVIE_MP4 IS '모바일 수강료';

COMMENT ON COLUMN TB_LEC_MST.SUBJECT_MOVIE_VOD_MP4 IS '동영상 + 모바일 수강료';

COMMENT ON COLUMN TB_LEC_MST.SUBJECT_SUMNAIL IS '썸네일이미지정보     ';

COMMENT ON COLUMN TB_LEC_MST.SUBJECT_EVENT_IMAGE IS '이벤트이미지정보   ';

COMMENT ON COLUMN TB_LEC_MST.SUBJECT_OUTSIDE IS '외부강의';

COMMENT ON COLUMN TB_LEC_MST.SUBJECT_OPTION IS '옵션';

COMMENT ON COLUMN TB_LEC_MST.SUBJECT_ISUSE IS '개설여부(Y: 활성, N: 비활성) ';

COMMENT ON COLUMN TB_LEC_MST.SUBJECT_SJT_CD IS '교수과목  ';

COMMENT ON COLUMN TB_LEC_MST.TWO_SUBJECT IS '2과목 할인율 - 패키지(내맘대로 종합반)';

COMMENT ON COLUMN TB_LEC_MST.THREE_SUBJECT IS '3,4과목 할인율 - 패키지(내맘대로 종합반)';

COMMENT ON COLUMN TB_LEC_MST.FIVE_SUBJECT IS '5과목이상 할인율 - 패키지(내맘대로 종합반)';

COMMENT ON COLUMN TB_LEC_MST.SUBJECT_VOD_DEFAULT_PATH IS '동영상기본경로(500K, MP4고화질)';

COMMENT ON COLUMN TB_LEC_MST.SUBJECT_MP4_DEFAULT_PATH IS 'MP4기본경로';

COMMENT ON COLUMN TB_LEC_MST.SUBJECT_PMP_DEFAULT_PATH IS 'PMP기본경로 ';

COMMENT ON COLUMN TB_LEC_MST.SUBJECT_PASS IS '보강비밀번호';

COMMENT ON COLUMN TB_LEC_MST.SUBJECT_JANG IS '장바구니 할인에서 제외';

COMMENT ON COLUMN TB_LEC_MST.RE_COURSE IS '재수강 신청가능 여부 ';

COMMENT ON COLUMN TB_LEC_MST.LEC_SCHEDULE IS '강의예정회차';

COMMENT ON COLUMN TB_LEC_MST.REG_DT IS '등록일';

COMMENT ON COLUMN TB_LEC_MST.REG_ID IS '등록자 아이디';

COMMENT ON COLUMN TB_LEC_MST.UPD_DT IS '수정일';

COMMENT ON COLUMN TB_LEC_MST.UPD_ID IS '수정자 아이디';

COMMENT ON COLUMN TB_LEC_MST.LEC_TYPE_CHOICE IS '강의종류코드';

COMMENT ON COLUMN TB_LEC_MST.MOV_ING IS '강의등록상태 (C:업데이트 예정, I: 업데이트 중, E:업데이트 완료)';

COMMENT ON COLUMN TB_LEC_MST.GIFT_FLAG IS '사은품 코드 선택';

COMMENT ON COLUMN TB_LEC_MST.GIFT_COUPON_CCODE IS '쿠폰번호';

COMMENT ON COLUMN TB_LEC_MST.GIFT_LECCODE IS '강좌번호';

COMMENT ON COLUMN TB_LEC_MST.COUPON_NAME IS '사은품쿠폰명';

COMMENT ON COLUMN TB_LEC_MST.GIFT_NAME IS '사은품단과명';

COMMENT ON COLUMN TB_LEC_MST.TEACHERNO IS '선택강사갯수';

COMMENT ON COLUMN TB_LEC_MST.ICON_GUBUN IS '노출아이콘구분(B:BEST, N:NEW, H:HIT)';

COMMENT ON COLUMN TB_LEC_MST.MO_COUPON_NAME IS '사은품모의고사명';

COMMENT ON COLUMN TB_LEC_MST.MO_COUPON_CCODE IS '모의고사코드';

COMMENT ON COLUMN TB_LEC_MST.FREE_TAB IS '무료강좌탭';

COMMENT ON COLUMN TB_LEC_MST.SUBJECT_MONITORMODE IS '화면확장모드*';

COMMENT ON COLUMN TB_LEC_MST.MUST_PRF_IMG IS '필수과목 교수진 이미지';

COMMENT ON COLUMN TB_LEC_MST.SEL_PRF_IMG IS '선택과목 교수진 이미지';



--
-- TB_LEC_MST_MEMO  (Table) 
--
CREATE TABLE TB_LEC_MST_MEMO
(
  BRIDGE_LECCODE  VARCHAR2(30 BYTE),
  MOVIE_ORDER1    NUMBER,
  MOVIE_ORDER2    NUMBER,
  POSITION        VARCHAR2(50 BYTE),
  MST_TEXT        VARCHAR2(4000 BYTE)
);

COMMENT ON COLUMN TB_LEC_MST_MEMO.BRIDGE_LECCODE IS '강의 브릿지코드';

COMMENT ON COLUMN TB_LEC_MST_MEMO.MOVIE_ORDER1 IS '회차 회';

COMMENT ON COLUMN TB_LEC_MST_MEMO.MOVIE_ORDER2 IS '회차 강';

COMMENT ON COLUMN TB_LEC_MST_MEMO.POSITION IS '상단(UP), 하단(DOWN), 최상단(UPUP) - 최상단 메모는 하나만 존재 가능하다';

COMMENT ON COLUMN TB_LEC_MST_MEMO.MST_TEXT IS '내용';



--
-- TB_MAIN_CATEGORY_SUBJECT_ORDER  (Table) 
--
CREATE TABLE TB_MAIN_CATEGORY_SUBJECT_ORDER
(
  ONOFF_DIV      VARCHAR2(1 BYTE)               NOT NULL,
  CATEGORY_CODE  VARCHAR2(50 BYTE)              NOT NULL,
  SUBJECT_CD     VARCHAR2(50 BYTE)              NOT NULL,
  IDX            NUMBER                         NOT NULL
);


--
-- TB_MA_MEMBER_CATEGORY  (Table) 
--
CREATE TABLE TB_MA_MEMBER_CATEGORY
(
  USER_ID        VARCHAR2(30 BYTE)              NOT NULL,
  CATEGORY_CODE  VARCHAR2(20 BYTE)              NOT NULL,
  SEQ            NUMBER,
  REG_DT         DATE,
  REG_ID         VARCHAR2(30 BYTE),
  UPD_DT         DATE,
  UPD_ID         VARCHAR2(30 BYTE),
  OFF_SEQ        NUMBER
);

COMMENT ON COLUMN TB_MA_MEMBER_CATEGORY.USER_ID IS '강사 아이디';

COMMENT ON COLUMN TB_MA_MEMBER_CATEGORY.CATEGORY_CODE IS '직종 코드';

COMMENT ON COLUMN TB_MA_MEMBER_CATEGORY.SEQ IS '온라인 순서';

COMMENT ON COLUMN TB_MA_MEMBER_CATEGORY.REG_DT IS '등록일';

COMMENT ON COLUMN TB_MA_MEMBER_CATEGORY.REG_ID IS '등록자 아이디';

COMMENT ON COLUMN TB_MA_MEMBER_CATEGORY.UPD_DT IS '수정일';

COMMENT ON COLUMN TB_MA_MEMBER_CATEGORY.UPD_ID IS '수정자 아이디';

COMMENT ON COLUMN TB_MA_MEMBER_CATEGORY.OFF_SEQ IS '오프라인 순서';



--
-- TB_MA_MEMBER_MAIN_CATEGORY  (Table) 
--
CREATE TABLE TB_MA_MEMBER_MAIN_CATEGORY
(
  USER_ID        VARCHAR2(30 BYTE)              NOT NULL,
  CATEGORY_CODE  VARCHAR2(20 BYTE)              NOT NULL,
  SEQ            NUMBER,
  REG_DT         DATE,
  REG_ID         VARCHAR2(30 BYTE),
  UPD_DT         DATE,
  UPD_ID         VARCHAR2(30 BYTE),
  SUBJECT_CD     VARCHAR2(50 BYTE)
);


--
-- TB_MA_MEMBER_PRF  (Table) 
--
CREATE TABLE TB_MA_MEMBER_PRF
(
  USER_ID            VARCHAR2(30 BYTE)          NOT NULL,
  USER_NM            VARCHAR2(50 BYTE),
  USER_NICKNM        VARCHAR2(100 BYTE),
  USER_POSITION      VARCHAR2(100 BYTE),
  SEX                VARCHAR2(1 BYTE),
  USER_ROLE          VARCHAR2(20 BYTE),
  ADMIN_ROLE         VARCHAR2(20 BYTE),
  USER_PWD           VARCHAR2(100 BYTE),
  BIRTH_DAY          VARCHAR2(8 BYTE),
  EMAIL              VARCHAR2(100 BYTE),
  PHONE_NO           VARCHAR2(20 BYTE),
  TEL_NO             VARCHAR2(20 BYTE),
  ZIP_CODE           VARCHAR2(10 BYTE),
  ADDRESS1           VARCHAR2(200 BYTE),
  ADDRESS2           VARCHAR2(200 BYTE),
  CATEGORY_CODE      VARCHAR2(20 BYTE),
  USER_POINT         VARCHAR2(50 BYTE),
  REMARK             CLOB,
  MEMO               CLOB,
  PAYMENT            VARCHAR2(50 BYTE),
  PIC1               VARCHAR2(100 BYTE),
  PIC2               VARCHAR2(100 BYTE),
  PIC3               VARCHAR2(100 BYTE),
  PIC4               VARCHAR2(100 BYTE),
  PROFILE            CLOB,
  ACCOUNT            VARCHAR2(100 BYTE),
  IPINDI             VARCHAR2(64 BYTE),
  ISUSE              VARCHAR2(1 BYTE),
  REG_DT             DATE,
  REG_ID             VARCHAR2(30 BYTE),
  UPD_DT             DATE,
  UPD_ID             VARCHAR2(30 BYTE),
  OFF_PAYMENT        VARCHAR2(50 BYTE),
  OFF_PROFILE        CLOB,
  OFF_PIC1           VARCHAR2(100 BYTE),
  OFF_PIC2           VARCHAR2(100 BYTE),
  OFF_PIC3           VARCHAR2(100 BYTE),
  OFF_PIC4           VARCHAR2(100 BYTE),
  OFF_PIC5           VARCHAR2(100 BYTE),
  ON_OPENYN          VARCHAR2(1 BYTE),
  OFF_OPENYN         VARCHAR2(1 BYTE),
  OFF_MOVIE_PAYMENT  VARCHAR2(50 BYTE),
  TITLE              VARCHAR2(4000 BYTE),
  BOOK_LOG           CLOB,
  YPLAN              CLOB,
  LECINFO            CLOB,
  OFF_TITLE          VARCHAR2(4000 BYTE),
  OFF_YPLAN          CLOB,
  OFF_LECINFO        CLOB,
  PROFILE_SUMMARY    VARCHAR2(4000 BYTE),
  BOOK_LOG_SUMMARY   VARCHAR2(4000 BYTE)
);


--
-- TB_MA_MEMBER_SERIES  (Table) 
--
CREATE TABLE TB_MA_MEMBER_SERIES
(
  USER_ID    VARCHAR2(30 BYTE)                  NOT NULL,
  SERIES_CD  VARCHAR2(20 BYTE)                  NOT NULL,
  SEQ        NUMBER,
  OFF_SEQ    NUMBER,
  REG_DT     DATE,
  REG_ID     VARCHAR2(30 BYTE),
  UPD_DT     DATE,
  UPD_ID     VARCHAR2(30 BYTE)
);

COMMENT ON COLUMN TB_MA_MEMBER_SERIES.USER_ID IS '강사 아이디';

COMMENT ON COLUMN TB_MA_MEMBER_SERIES.SERIES_CD IS '직렬 코드';

COMMENT ON COLUMN TB_MA_MEMBER_SERIES.SEQ IS '온라인 순서';

COMMENT ON COLUMN TB_MA_MEMBER_SERIES.OFF_SEQ IS '오프라인 순서';

COMMENT ON COLUMN TB_MA_MEMBER_SERIES.REG_DT IS '등록일';

COMMENT ON COLUMN TB_MA_MEMBER_SERIES.REG_ID IS '등록자 아이디';

COMMENT ON COLUMN TB_MA_MEMBER_SERIES.UPD_DT IS '수정일';

COMMENT ON COLUMN TB_MA_MEMBER_SERIES.UPD_ID IS '수정자 아이디';



--
-- TB_MA_MEMBER_SUBJECT  (Table) 
--
CREATE TABLE TB_MA_MEMBER_SUBJECT
(
  USER_ID     VARCHAR2(30 BYTE)                 NOT NULL,
  SUBJECT_CD  VARCHAR2(50 BYTE)                 NOT NULL,
  REG_DT      DATE,
  REG_ID      VARCHAR2(30 BYTE),
  UPD_DT      DATE,
  UPD_ID      VARCHAR2(30 BYTE)
);

COMMENT ON COLUMN TB_MA_MEMBER_SUBJECT.USER_ID IS '강사아이디';

COMMENT ON COLUMN TB_MA_MEMBER_SUBJECT.SUBJECT_CD IS '과목코드';

COMMENT ON COLUMN TB_MA_MEMBER_SUBJECT.REG_DT IS '등록일';

COMMENT ON COLUMN TB_MA_MEMBER_SUBJECT.REG_ID IS '등록아이디';

COMMENT ON COLUMN TB_MA_MEMBER_SUBJECT.UPD_DT IS '수정일';

COMMENT ON COLUMN TB_MA_MEMBER_SUBJECT.UPD_ID IS '수정아이디';



--
-- TB_MILEAGE_HISTORY  (Table) 
--
CREATE TABLE TB_MILEAGE_HISTORY
(
  IDX       NUMBER                              NOT NULL,
  USERID    VARCHAR2(30 BYTE)                   NOT NULL,
  POINT     NUMBER                              NOT NULL,
  ORDERNO   VARCHAR2(20 BYTE),
  MGNTNO    VARCHAR2(20 BYTE),
  REGDATE   DATE                                DEFAULT (SYSDATE),
  COMMENT1  VARCHAR2(200 BYTE),
  MANAGER   VARCHAR2(20 BYTE),
  SITE      VARCHAR2(50 BYTE)
);

COMMENT ON COLUMN TB_MILEAGE_HISTORY.IDX IS 'SEQ';

COMMENT ON COLUMN TB_MILEAGE_HISTORY.USERID IS '사용자 ID';

COMMENT ON COLUMN TB_MILEAGE_HISTORY.POINT IS '포인트';

COMMENT ON COLUMN TB_MILEAGE_HISTORY.ORDERNO IS '주문번호';

COMMENT ON COLUMN TB_MILEAGE_HISTORY.MGNTNO IS '상품번호';

COMMENT ON COLUMN TB_MILEAGE_HISTORY.REGDATE IS '등록일';

COMMENT ON COLUMN TB_MILEAGE_HISTORY.COMMENT1 IS '코멘트';

COMMENT ON COLUMN TB_MILEAGE_HISTORY.MANAGER IS '관리자';

COMMENT ON COLUMN TB_MILEAGE_HISTORY.SITE IS '사이트';



--
-- TB_MOVIE  (Table) 
--
CREATE TABLE TB_MOVIE
(
  MOVIE_NO             NUMBER                   NOT NULL,
  LECCODE              VARCHAR2(30 BYTE)        NOT NULL,
  MOVIE_NAME           VARCHAR2(300 BYTE),
  MOVIE_DESC           VARCHAR2(300 BYTE),
  MOVIE_URL            VARCHAR2(800 BYTE),
  MOVIE_FILENAME1      VARCHAR2(500 BYTE),
  MP4_URL              VARCHAR2(800 BYTE),
  MOVIE_FILENAME2      VARCHAR2(500 BYTE),
  MOVIE_FILENAME3      VARCHAR2(500 BYTE),
  MOVIE_DATA_FILE_YN   VARCHAR2(1 BYTE),
  MOVIE_DATA_FILENAME  VARCHAR2(500 BYTE),
  MOVIE_TIME           NUMBER                   NOT NULL,
  MOVIE_ORDER1         NUMBER                   NOT NULL,
  MOVIE_ORDER2         NUMBER                   NOT NULL,
  MOVIE_FREE_FLAG      VARCHAR2(1 BYTE)         NOT NULL,
  PMP_URL              VARCHAR2(800 BYTE),
  PMP_FILENAME         VARCHAR2(500 BYTE),
  STOP                 VARCHAR2(1 BYTE)         NOT NULL,
  WIDE_URL             VARCHAR2(800 BYTE),
  MOVIE_FILENAME4      VARCHAR2(500 BYTE)
);

COMMENT ON COLUMN TB_MOVIE.MOVIE_NO IS '순번';

COMMENT ON COLUMN TB_MOVIE.LECCODE IS '강의코드';

COMMENT ON COLUMN TB_MOVIE.MOVIE_NAME IS '동영상 명';

COMMENT ON COLUMN TB_MOVIE.MOVIE_DESC IS '동영상 설명';

COMMENT ON COLUMN TB_MOVIE.MOVIE_URL IS '동영상 파일 URL';

COMMENT ON COLUMN TB_MOVIE.MOVIE_FILENAME1 IS '동영상 파일명';

COMMENT ON COLUMN TB_MOVIE.MP4_URL IS 'MP4 파일 URL';

COMMENT ON COLUMN TB_MOVIE.MOVIE_FILENAME2 IS 'MP4 파일명';

COMMENT ON COLUMN TB_MOVIE.MOVIE_FILENAME3 IS 'MP4 고화질';

COMMENT ON COLUMN TB_MOVIE.MOVIE_DATA_FILE_YN IS '자료 체크';

COMMENT ON COLUMN TB_MOVIE.MOVIE_DATA_FILENAME IS '자료경로';

COMMENT ON COLUMN TB_MOVIE.MOVIE_TIME IS '동영상재생시간(HH24MISS)';

COMMENT ON COLUMN TB_MOVIE.MOVIE_ORDER1 IS '회차 회';

COMMENT ON COLUMN TB_MOVIE.MOVIE_ORDER2 IS '회차 강';

COMMENT ON COLUMN TB_MOVIE.MOVIE_FREE_FLAG IS '무료여부';

COMMENT ON COLUMN TB_MOVIE.PMP_URL IS 'PMP 파일 URL';

COMMENT ON COLUMN TB_MOVIE.PMP_FILENAME IS 'PMP 파일명';

COMMENT ON COLUMN TB_MOVIE.STOP IS '활성,비활성 구분';



--
-- TB_MYLECTURE  (Table) 
--
CREATE TABLE TB_MYLECTURE
(
  USERID           VARCHAR2(30 BYTE)            NOT NULL,
  ORDERNO          VARCHAR2(20 BYTE)            NOT NULL,
  PACKAGE_NO       VARCHAR2(30 BYTE)            NOT NULL,
  LECTURE_NO       VARCHAR2(30 BYTE)            NOT NULL,
  START_DATE       DATE,
  END_DATE         DATE,
  PERIOD           NUMBER,
  STUDY_PERCENT    NUMBER,
  STOP_LECTURE     VARCHAR2(1 BYTE),
  FREE_ID          VARCHAR2(30 BYTE),
  PLUS_BUY         NUMBER,
  PLAYYN           VARCHAR2(1 BYTE)             DEFAULT 'Y',
  REG_DT           DATE                         DEFAULT SYSDATE,
  ADD_LENGTH       NUMBER,
  FIRSTSTART_DATE  DATE,
  PARENT_ORDERNO   VARCHAR2(20 BYTE),
  GIFT_YN          VARCHAR2(1 BYTE)             DEFAULT 'N'
);

COMMENT ON COLUMN TB_MYLECTURE.USERID IS '사용자 ID';

COMMENT ON COLUMN TB_MYLECTURE.ORDERNO IS '상품주문번호';

COMMENT ON COLUMN TB_MYLECTURE.PACKAGE_NO IS '강의코드';

COMMENT ON COLUMN TB_MYLECTURE.LECTURE_NO IS '단과 강의코드';

COMMENT ON COLUMN TB_MYLECTURE.START_DATE IS '수강시작예정일';

COMMENT ON COLUMN TB_MYLECTURE.END_DATE IS '수강종료예정일';

COMMENT ON COLUMN TB_MYLECTURE.PERIOD IS '수강기간(일)';

COMMENT ON COLUMN TB_MYLECTURE.STUDY_PERCENT IS '수강진도율';

COMMENT ON COLUMN TB_MYLECTURE.STOP_LECTURE IS '강좌중지여부';

COMMENT ON COLUMN TB_MYLECTURE.PLUS_BUY IS '연장횟수';

COMMENT ON COLUMN TB_MYLECTURE.PLAYYN IS '강의일시중지여부 (Y: 진행중, N: 중지)';

COMMENT ON COLUMN TB_MYLECTURE.REG_DT IS '등록일';

COMMENT ON COLUMN TB_MYLECTURE.ADD_LENGTH IS '강의수강신청일 변경횟수(최대3회)';

COMMENT ON COLUMN TB_MYLECTURE.FIRSTSTART_DATE IS '강의 최초 시작일 값(강의시작일 수정시 값이 들어 가고 수정을 한번도 안했을경우 null 값이 들간다)';

COMMENT ON COLUMN TB_MYLECTURE.GIFT_YN IS '사은품강좌여부';



--
-- TB_MYLECTURE_PAUSE  (Table) 
--
CREATE TABLE TB_MYLECTURE_PAUSE
(
  USER_ID                   VARCHAR2(20 BYTE),
  ORDERNO                   VARCHAR2(20 BYTE),
  PACKAGE_NO                VARCHAR2(30 BYTE),
  LECTURE_NO                VARCHAR2(30 BYTE),
  MYLECTURE_PAUSED          VARCHAR2(1 BYTE),
  MYLECTURE_PAUSED_COUNT    NUMBER,
  MYLECTURE_PAUSED_PERIOD   NUMBER,
  MYLECTURE_PAUSED_DATE1    DATE,
  MYLECTURE_PAUSED_PERIOD1  NUMBER,
  MYLECTURE_PAUSED_DATE2    DATE,
  MYLECTURE_PAUSED_PERIOD2  NUMBER,
  MYLECTURE_PAUSED_DATE3    DATE,
  MYLECTURE_PAUSED_PERIOD3  NUMBER
);

COMMENT ON TABLE TB_MYLECTURE_PAUSE IS '구매한 강의 일시정지 정보 (최대 3회까지)';

COMMENT ON COLUMN TB_MYLECTURE_PAUSE.USER_ID IS '사용자ID';

COMMENT ON COLUMN TB_MYLECTURE_PAUSE.ORDERNO IS '주문번호';

COMMENT ON COLUMN TB_MYLECTURE_PAUSE.PACKAGE_NO IS '강의코드';

COMMENT ON COLUMN TB_MYLECTURE_PAUSE.LECTURE_NO IS '단과 강의코드';

COMMENT ON COLUMN TB_MYLECTURE_PAUSE.MYLECTURE_PAUSED IS '중지여부';

COMMENT ON COLUMN TB_MYLECTURE_PAUSE.MYLECTURE_PAUSED_COUNT IS '중지한 횟수';

COMMENT ON COLUMN TB_MYLECTURE_PAUSE.MYLECTURE_PAUSED_PERIOD IS '중지한 기간(일)';

COMMENT ON COLUMN TB_MYLECTURE_PAUSE.MYLECTURE_PAUSED_DATE1 IS '1차중지 시작일';

COMMENT ON COLUMN TB_MYLECTURE_PAUSE.MYLECTURE_PAUSED_PERIOD1 IS '1차중지 기간(일';

COMMENT ON COLUMN TB_MYLECTURE_PAUSE.MYLECTURE_PAUSED_DATE2 IS '2차중지 시작일';

COMMENT ON COLUMN TB_MYLECTURE_PAUSE.MYLECTURE_PAUSED_PERIOD2 IS '2차중지 기간(일)';

COMMENT ON COLUMN TB_MYLECTURE_PAUSE.MYLECTURE_PAUSED_DATE3 IS '3차중지 시작일';

COMMENT ON COLUMN TB_MYLECTURE_PAUSE.MYLECTURE_PAUSED_PERIOD3 IS '3차중지 기간(일)';



--
-- TB_MYMOVIE  (Table) 
--
CREATE TABLE TB_MYMOVIE
(
  USERID              VARCHAR2(30 BYTE)         NOT NULL,
  ORDERNO             VARCHAR2(20 BYTE)         NOT NULL,
  PACKAGE_NO          VARCHAR2(30 BYTE)         NOT NULL,
  LECTURE_NO          VARCHAR2(30 BYTE)         NOT NULL,
  MOVIE_NO            NUMBER                    NOT NULL,
  CURR_TIME           NUMBER,
  TOTAL_TIME          NUMBER,
  STUDY_PERCENT       NUMBER,
  STUDY_TIME          NUMBER,
  TOTAL_BAESU         NUMBER,
  BAESU_TIME          NUMBER,
  LAST_POSITION_TIME  NUMBER
);


--
-- TB_OFF_APPROVALS  (Table) 
--
CREATE TABLE TB_OFF_APPROVALS
(
  ORDERNO                VARCHAR2(20 BYTE)      NOT NULL,
  PRICE                  NUMBER(18)             DEFAULT 0                     NOT NULL,
  ADDPRICE               NUMBER(18)             DEFAULT 0                     NOT NULL,
  PAYCODE                VARCHAR2(6 BYTE)       NOT NULL,
  ACCTNOCODE             VARCHAR2(6 BYTE)       NOT NULL,
  PAYNAME                VARCHAR2(50 BYTE)      NOT NULL,
  POINT                  NUMBER                 DEFAULT 0                     NOT NULL,
  RETURNVALUE            VARCHAR2(2000 BYTE),
  REG_DT                 DATE                   DEFAULT SYSDATE,
  BANNER_NAME            VARCHAR2(40 BYTE),
  REPRICE                NUMBER(18),
  REPRICEDATE            DATE,
  ORDERURL               VARCHAR2(10 BYTE),
  VCDBANK                VARCHAR2(2 BYTE),
  VACCT                  VARCHAR2(30 BYTE),
  VACCT_NAME             VARCHAR2(30 BYTE),
  REFUND_POINT           NUMBER                 DEFAULT 0,
  PRICE_CARD             NUMBER                 DEFAULT 0,
  PRICE_CASH             NUMBER                 DEFAULT 0,
  PRICE_BANK             NUMBER                 DEFAULT 0,
  PRICE_UNPAID           NUMBER                 DEFAULT 0,
  PRICE_DISCOUNT         NUMBER                 DEFAULT 0,
  PRICE_DISCOUNT_TYPE    VARCHAR2(10 BYTE),
  PRICE_DISCOUNT_REASON  VARCHAR2(500 BYTE),
  CARD_NAME              VARCHAR2(40 BYTE),
  DUE_DT                 DATE,
  TID                    VARCHAR2(50 BYTE),
  MEMO                   VARCHAR2(2000 BYTE)
);

COMMENT ON COLUMN TB_OFF_APPROVALS.ORDERNO IS '상품주문번호';

COMMENT ON COLUMN TB_OFF_APPROVALS.PRICE IS '주문결제금액';

COMMENT ON COLUMN TB_OFF_APPROVALS.ADDPRICE IS '추가비용(교재구매시 배송료)';

COMMENT ON COLUMN TB_OFF_APPROVALS.PAYCODE IS '결제방법코드(PAY110:카드결제, PAY120:가상계좌,PAT130:계좌이체,PAY140:현금,PAY100:무통장입금)';

COMMENT ON COLUMN TB_OFF_APPROVALS.ACCTNOCODE IS '무통장 번호 (사용 안함)';

COMMENT ON COLUMN TB_OFF_APPROVALS.PAYNAME IS '결제자 이름';

COMMENT ON COLUMN TB_OFF_APPROVALS.POINT IS '사용 포인트';

COMMENT ON COLUMN TB_OFF_APPROVALS.REG_DT IS '등록일';

COMMENT ON COLUMN TB_OFF_APPROVALS.BANNER_NAME IS '배너 이름';

COMMENT ON COLUMN TB_OFF_APPROVALS.REPRICE IS '환불택배비';

COMMENT ON COLUMN TB_OFF_APPROVALS.REPRICEDATE IS '환불택배비 등록일';

COMMENT ON COLUMN TB_OFF_APPROVALS.ORDERURL IS '주문자URL';

COMMENT ON COLUMN TB_OFF_APPROVALS.VCDBANK IS '결제기관코드';

COMMENT ON COLUMN TB_OFF_APPROVALS.VACCT IS '(가상)계좌번호';

COMMENT ON COLUMN TB_OFF_APPROVALS.VACCT_NAME IS '결제기관(은행)이름';

COMMENT ON COLUMN TB_OFF_APPROVALS.REFUND_POINT IS '환불가능포인트';

COMMENT ON COLUMN TB_OFF_APPROVALS.PRICE_CARD IS '카드금액';

COMMENT ON COLUMN TB_OFF_APPROVALS.PRICE_CASH IS '현금금액';

COMMENT ON COLUMN TB_OFF_APPROVALS.PRICE_BANK IS '예금';

COMMENT ON COLUMN TB_OFF_APPROVALS.PRICE_UNPAID IS '미수금';

COMMENT ON COLUMN TB_OFF_APPROVALS.PRICE_DISCOUNT IS '할인 비율 또는 금액';

COMMENT ON COLUMN TB_OFF_APPROVALS.PRICE_DISCOUNT_TYPE IS '관리자 할인구분(R:비율, W: 금액)';

COMMENT ON COLUMN TB_OFF_APPROVALS.PRICE_DISCOUNT_REASON IS '할인내역(이유)';

COMMENT ON COLUMN TB_OFF_APPROVALS.CARD_NAME IS '카드이름(종류)';

COMMENT ON COLUMN TB_OFF_APPROVALS.DUE_DT IS '결제완료예정일';

COMMENT ON COLUMN TB_OFF_APPROVALS.TID IS '온라인결제시PG사ID';

COMMENT ON COLUMN TB_OFF_APPROVALS.MEMO IS '메모';



--
-- TB_OFF_CC_CART  (Table) 
--
CREATE TABLE TB_OFF_CC_CART
(
  SEQ             NUMBER,
  USER_ID         VARCHAR2(20 BYTE)             NOT NULL,
  LECCODE         VARCHAR2(30 BYTE)             NOT NULL,
  KIND_TYPE       VARCHAR2(1 BYTE)              NOT NULL,
  RSC_ID          VARCHAR2(30 BYTE),
  RSC_TYPE        VARCHAR2(1 BYTE),
  MOVIE_TYPE      VARCHAR2(2 BYTE),
  REGDATE         DATE,
  REPRICE         NUMBER,
  PACKAGE_PERIOD  NUMBER,
  SDATE           VARCHAR2(50 BYTE),
  EDATE           VARCHAR2(50 BYTE),
  BOOK_COUNT      NUMBER,
  ORDERNO         VARCHAR2(20 BYTE)
);

COMMENT ON COLUMN TB_OFF_CC_CART.SEQ IS '순번 (자동1씩증가)';

COMMENT ON COLUMN TB_OFF_CC_CART.USER_ID IS '사용자ID';

COMMENT ON COLUMN TB_OFF_CC_CART.LECCODE IS '강의코드';

COMMENT ON COLUMN TB_OFF_CC_CART.KIND_TYPE IS '상품구분(D:단과,J:종합,N:선택형,C:선택형(0원),P:패키지,M:오프라인,L:도서,S:사물함,T:독서실 ...)';

COMMENT ON COLUMN TB_OFF_CC_CART.RSC_ID IS '교재코드';

COMMENT ON COLUMN TB_OFF_CC_CART.RSC_TYPE IS '카트에 담은 1:주교재, 2: 부교재, 3:수강생교재';

COMMENT ON COLUMN TB_OFF_CC_CART.MOVIE_TYPE IS '1:VOD, 2:PMP, 3 VOD+PMP';

COMMENT ON COLUMN TB_OFF_CC_CART.REGDATE IS '등록일';

COMMENT ON COLUMN TB_OFF_CC_CART.REPRICE IS '재수강 신청시 할인된 실제가격';

COMMENT ON COLUMN TB_OFF_CC_CART.PACKAGE_PERIOD IS '연장시 기간';

COMMENT ON COLUMN TB_OFF_CC_CART.SDATE IS '연장시 시작일자';

COMMENT ON COLUMN TB_OFF_CC_CART.EDATE IS '연장시 종료일자';

COMMENT ON COLUMN TB_OFF_CC_CART.BOOK_COUNT IS '카트에 담은 교재 수량';

COMMENT ON COLUMN TB_OFF_CC_CART.ORDERNO IS '연장시 TBL_MYLECTURE4의 값에 orderno값을 저장';



--
-- TB_OFF_CC_J_CART  (Table) 
--
CREATE TABLE TB_OFF_CC_J_CART
(
  SEQ          NUMBER                           NOT NULL,
  LECCODE      VARCHAR2(30 BYTE),
  MST_LECCODE  VARCHAR2(30 BYTE),
  UPDATE_ID    VARCHAR2(30 BYTE),
  REG_DT       DATE,
  PRICE        NUMBER,
  KIND_TYPE    VARCHAR2(1 BYTE)
);

COMMENT ON TABLE TB_OFF_CC_J_CART IS '종합반 장바구니';

COMMENT ON COLUMN TB_OFF_CC_J_CART.SEQ IS '순번(1씩 자동증가)';

COMMENT ON COLUMN TB_OFF_CC_J_CART.LECCODE IS '강의코드';

COMMENT ON COLUMN TB_OFF_CC_J_CART.MST_LECCODE IS '단과 강의코드';

COMMENT ON COLUMN TB_OFF_CC_J_CART.UPDATE_ID IS '수정자 아이디';

COMMENT ON COLUMN TB_OFF_CC_J_CART.REG_DT IS '등록일';

COMMENT ON COLUMN TB_OFF_CC_J_CART.PRICE IS '결제금액';

COMMENT ON COLUMN TB_OFF_CC_J_CART.KIND_TYPE IS '상품구분(D:단과,J:종합,N:선택형,C:선택형(0원),P:패키지,M:오프라인,L:도서,S:사물함,T:독서실 ...)';



--
-- TB_OFF_CHOICE_JONG_NO  (Table) 
--
CREATE TABLE TB_OFF_CHOICE_JONG_NO
(
  SEQ          NUMBER                           NOT NULL,
  LECCODE      VARCHAR2(30 BYTE),
  NO           NUMBER                           NOT NULL,
  CATEGORY_CD  VARCHAR2(100 BYTE)               NOT NULL
);

COMMENT ON COLUMN TB_OFF_CHOICE_JONG_NO.SEQ IS 'TB_LEC_MST 테이블의 SEQ 값 (선택종합반 SEQ 값과 매칭)';

COMMENT ON COLUMN TB_OFF_CHOICE_JONG_NO.LECCODE IS '선택종합반 과목 코드값';

COMMENT ON COLUMN TB_OFF_CHOICE_JONG_NO.NO IS '부과목 선택할수 있는 갯수';

COMMENT ON COLUMN TB_OFF_CHOICE_JONG_NO.CATEGORY_CD IS '카테고리 코드';



--
-- TB_OFF_LECTURE_DATE  (Table) 
--
CREATE TABLE TB_OFF_LECTURE_DATE
(
  LECCODE   VARCHAR2(30 BYTE)                   NOT NULL,
  NUM       NUMBER                              NOT NULL,
  LEC_DATE  DATE
);

COMMENT ON COLUMN TB_OFF_LECTURE_DATE.LECCODE IS '강의코드';

COMMENT ON COLUMN TB_OFF_LECTURE_DATE.NUM IS 'SEQ';

COMMENT ON COLUMN TB_OFF_LECTURE_DATE.LEC_DATE IS '강의일자';



--
-- TB_OFF_LEC_BRIDGE  (Table) 
--
CREATE TABLE TB_OFF_LEC_BRIDGE
(
  SEQ             NUMBER                        NOT NULL,
  BRIDGE_LECCODE  VARCHAR2(30 BYTE)             NOT NULL,
  LECCODE         VARCHAR2(30 BYTE)             NOT NULL,
  REG_DT          DATE,
  REG_ID          VARCHAR2(30 BYTE),
  UPD_DT          DATE,
  UPD_ID          VARCHAR2(30 BYTE)
);

COMMENT ON COLUMN TB_OFF_LEC_BRIDGE.SEQ IS '순번';

COMMENT ON COLUMN TB_OFF_LEC_BRIDGE.BRIDGE_LECCODE IS '연결 과목코드';

COMMENT ON COLUMN TB_OFF_LEC_BRIDGE.LECCODE IS '과목코드';

COMMENT ON COLUMN TB_OFF_LEC_BRIDGE.REG_DT IS '등록일';

COMMENT ON COLUMN TB_OFF_LEC_BRIDGE.REG_ID IS '등록자 아이디';

COMMENT ON COLUMN TB_OFF_LEC_BRIDGE.UPD_DT IS '수정일';

COMMENT ON COLUMN TB_OFF_LEC_BRIDGE.UPD_ID IS '수정자 아이디';



--
-- TB_OFF_LEC_JONG  (Table) 
--
CREATE TABLE TB_OFF_LEC_JONG
(
  SEQ          NUMBER                           NOT NULL,
  LECCODE      VARCHAR2(30 BYTE)                NOT NULL,
  MST_LECCODE  VARCHAR2(30 BYTE)                NOT NULL,
  REG_DT       DATE,
  REG_ID       VARCHAR2(30 BYTE),
  UPD_DT       DATE,
  UPD_ID       VARCHAR2(30 BYTE),
  SORT         NUMBER,
  GUBUN        VARCHAR2(1 BYTE)
);

COMMENT ON COLUMN TB_OFF_LEC_JONG.SEQ IS '순번';

COMMENT ON COLUMN TB_OFF_LEC_JONG.LECCODE IS '종합반 강의코드';

COMMENT ON COLUMN TB_OFF_LEC_JONG.MST_LECCODE IS '단과반 강의코드';

COMMENT ON COLUMN TB_OFF_LEC_JONG.REG_DT IS '등록일';

COMMENT ON COLUMN TB_OFF_LEC_JONG.REG_ID IS '등록자 아이디';

COMMENT ON COLUMN TB_OFF_LEC_JONG.UPD_DT IS '수정일';

COMMENT ON COLUMN TB_OFF_LEC_JONG.UPD_ID IS '수정자 아이디';

COMMENT ON COLUMN TB_OFF_LEC_JONG.SORT IS '단과반 강의코드 소팅';

COMMENT ON COLUMN TB_OFF_LEC_JONG.GUBUN IS '필수, 선택 구분(필수 1, 선택 2)';



--
-- TB_OFF_LEC_MST  (Table) 
--
CREATE TABLE TB_OFF_LEC_MST
(
  SEQ                            NUMBER         NOT NULL,
  LECCODE                        VARCHAR2(30 BYTE) NOT NULL,
  CATEGORY_CD                    VARCHAR2(20 BYTE),
  LEARNING_CD                    VARCHAR2(20 BYTE),
  SUBJECT_TYPE                   VARCHAR2(1 BYTE),
  SUBJECT_GUBUN                  VARCHAR2(1 BYTE),
  SUBJECT_MEMBER_CNT             NUMBER,
  SUBJECT_TEACHER                VARCHAR2(30 BYTE),
  SUBJECT_TEACHER_PAYMENT        VARCHAR2(50 BYTE),
  SUBJECT_SJT_CD                 VARCHAR2(50 BYTE),
  SUBJECT_TITLE                  VARCHAR2(1000 BYTE),
  SUBJECT_DESC                   CLOB,
  SUBJECT_KEYWORD                VARCHAR2(600 BYTE),
  SUBJECT_OPEN_DATE              VARCHAR2(8 BYTE),
  LEC_SCHEDULE                   VARCHAR2(20 BYTE),
  WEEK1                          VARCHAR2(1 BYTE),
  WEEK2                          VARCHAR2(1 BYTE),
  WEEK3                          VARCHAR2(1 BYTE),
  WEEK4                          VARCHAR2(1 BYTE),
  WEEK5                          VARCHAR2(1 BYTE),
  WEEK6                          VARCHAR2(1 BYTE),
  WEEK7                          VARCHAR2(1 BYTE),
  SUBJECT_DISCOUNT               NUMBER,
  SUBJECT_PRICE                  NUMBER,
  SUBJECT_REAL_PRICE             NUMBER,
  SUBJECT_SUMNAIL                VARCHAR2(1000 BYTE),
  SUBJECT_ISUSE                  VARCHAR2(1 BYTE),
  LEC_TYPE_CHOICE                VARCHAR2(1 BYTE),
  LEC_GUBUN                      VARCHAR2(1 BYTE),
  REG_DT                         DATE,
  REG_ID                         VARCHAR2(30 BYTE),
  UPD_DT                         DATE,
  UPD_ID                         VARCHAR2(30 BYTE),
  SUBJECT_TEACHER_MOVIE_PAYMENT  VARCHAR2(50 BYTE),
  PLAN                           CLOB,
  REC_GUBUN                      VARCHAR2(1 BYTE)
);

COMMENT ON COLUMN TB_OFF_LEC_MST.SEQ IS '순번';

COMMENT ON COLUMN TB_OFF_LEC_MST.LECCODE IS '강의코드 (D-단과, J-종합반, N-선택형종합반,P-패키지)';

COMMENT ON COLUMN TB_OFF_LEC_MST.CATEGORY_CD IS '직종코드';

COMMENT ON COLUMN TB_OFF_LEC_MST.LEARNING_CD IS '학습형태코드';

COMMENT ON COLUMN TB_OFF_LEC_MST.SUBJECT_TYPE IS '수강형태(1:실강, 2:영상)';

COMMENT ON COLUMN TB_OFF_LEC_MST.SUBJECT_GUBUN IS '수강신청구분(1:방문접수,2:온라인접수,3:방문접수+온라인접수)';

COMMENT ON COLUMN TB_OFF_LEC_MST.SUBJECT_MEMBER_CNT IS '수강인원';

COMMENT ON COLUMN TB_OFF_LEC_MST.SUBJECT_TEACHER IS '강사 아이디';

COMMENT ON COLUMN TB_OFF_LEC_MST.SUBJECT_TEACHER_PAYMENT IS '강사 지급률';

COMMENT ON COLUMN TB_OFF_LEC_MST.SUBJECT_SJT_CD IS '과목코드';

COMMENT ON COLUMN TB_OFF_LEC_MST.SUBJECT_TITLE IS '강의 제목';

COMMENT ON COLUMN TB_OFF_LEC_MST.SUBJECT_DESC IS '강의소개';

COMMENT ON COLUMN TB_OFF_LEC_MST.SUBJECT_KEYWORD IS '키워드';

COMMENT ON COLUMN TB_OFF_LEC_MST.SUBJECT_OPEN_DATE IS '강의 게시 일자';

COMMENT ON COLUMN TB_OFF_LEC_MST.LEC_SCHEDULE IS '강의 회차';

COMMENT ON COLUMN TB_OFF_LEC_MST.WEEK1 IS '일';

COMMENT ON COLUMN TB_OFF_LEC_MST.WEEK2 IS '월';

COMMENT ON COLUMN TB_OFF_LEC_MST.WEEK3 IS '화';

COMMENT ON COLUMN TB_OFF_LEC_MST.WEEK4 IS '수';

COMMENT ON COLUMN TB_OFF_LEC_MST.WEEK5 IS '목';

COMMENT ON COLUMN TB_OFF_LEC_MST.WEEK6 IS '금';

COMMENT ON COLUMN TB_OFF_LEC_MST.WEEK7 IS '토';

COMMENT ON COLUMN TB_OFF_LEC_MST.SUBJECT_DISCOUNT IS '할인율';

COMMENT ON COLUMN TB_OFF_LEC_MST.SUBJECT_PRICE IS '원가';

COMMENT ON COLUMN TB_OFF_LEC_MST.SUBJECT_REAL_PRICE IS '실강료';

COMMENT ON COLUMN TB_OFF_LEC_MST.SUBJECT_SUMNAIL IS '이미지';

COMMENT ON COLUMN TB_OFF_LEC_MST.SUBJECT_ISUSE IS '활성여부';

COMMENT ON COLUMN TB_OFF_LEC_MST.LEC_TYPE_CHOICE IS '강의 종류 (D-단과, J-종합반, N-선택형종합반,P-패키지)';

COMMENT ON COLUMN TB_OFF_LEC_MST.LEC_GUBUN IS '강의개설 구분(1:강의개설, 2:신규강좌여부, 3:강의개설+신규강좌여부)';

COMMENT ON COLUMN TB_OFF_LEC_MST.REG_DT IS '등록일';

COMMENT ON COLUMN TB_OFF_LEC_MST.REG_ID IS '등록자 아이디';

COMMENT ON COLUMN TB_OFF_LEC_MST.UPD_DT IS '수정일';

COMMENT ON COLUMN TB_OFF_LEC_MST.UPD_ID IS '수정자 아이디';



--
-- TB_OFF_MYLECTURE  (Table) 
--
CREATE TABLE TB_OFF_MYLECTURE
(
  USERID           VARCHAR2(30 BYTE)            NOT NULL,
  ORDERNO          VARCHAR2(20 BYTE)            NOT NULL,
  PACKAGE_NO       VARCHAR2(20 BYTE)            NOT NULL,
  LECTURE_NO       VARCHAR2(20 BYTE)            NOT NULL,
  START_DATE       DATE,
  END_DATE         DATE,
  PERIOD           NUMBER,
  STUDY_PERCENT    NUMBER,
  STOP_LECTURE     VARCHAR2(1 BYTE),
  FREE_ID          VARCHAR2(30 BYTE),
  PLUS_BUY         NUMBER,
  PLAYYN           VARCHAR2(1 BYTE)             DEFAULT 'Y',
  REG_DT           DATE                         DEFAULT SYSDATE,
  ADD_LENGTH       NUMBER,
  FIRSTSTART_DATE  DATE,
  REALPRICE        NUMBER                       DEFAULT NULL
);

COMMENT ON COLUMN TB_OFF_MYLECTURE.USERID IS '사용자 ID';

COMMENT ON COLUMN TB_OFF_MYLECTURE.ORDERNO IS '상품주문번호';

COMMENT ON COLUMN TB_OFF_MYLECTURE.PACKAGE_NO IS '강의코드';

COMMENT ON COLUMN TB_OFF_MYLECTURE.LECTURE_NO IS '단과 강의코드';

COMMENT ON COLUMN TB_OFF_MYLECTURE.START_DATE IS '수강시작예정일';

COMMENT ON COLUMN TB_OFF_MYLECTURE.END_DATE IS '수강종료예정일';

COMMENT ON COLUMN TB_OFF_MYLECTURE.PERIOD IS '수강기간(일)';

COMMENT ON COLUMN TB_OFF_MYLECTURE.STUDY_PERCENT IS '수강진도율';

COMMENT ON COLUMN TB_OFF_MYLECTURE.STOP_LECTURE IS '강좌중지여부';

COMMENT ON COLUMN TB_OFF_MYLECTURE.PLAYYN IS '강좌중지:N';

COMMENT ON COLUMN TB_OFF_MYLECTURE.ADD_LENGTH IS '강의수강신청일 변경횟수(최대3회)';

COMMENT ON COLUMN TB_OFF_MYLECTURE.FIRSTSTART_DATE IS '강의최초 수강일';

COMMENT ON COLUMN TB_OFF_MYLECTURE.REALPRICE IS '최종금액';



--
-- TB_OFF_ORDERS  (Table) 
--
CREATE TABLE TB_OFF_ORDERS
(
  ORDERNO          VARCHAR2(20 BYTE)            NOT NULL,
  USER_ID          VARCHAR2(30 BYTE),
  USER_NM          VARCHAR2(50 BYTE)            NOT NULL,
  TEL_NO           VARCHAR2(15 BYTE),
  PHONE_NO         VARCHAR2(15 BYTE),
  ZIP_CODE         VARCHAR2(7 BYTE),
  ADDRESS1         VARCHAR2(200 BYTE),
  EMAIL            VARCHAR2(50 BYTE),
  REG_DT           DATE                         DEFAULT SYSDATE,
  TID              VARCHAR2(30 BYTE),
  IPDATE           DATE,
  FREE_MOVIE       VARCHAR2(10 BYTE),
  OFF_LINE         VARCHAR2(1 BYTE)             DEFAULT 0,
  ADDRESS2         VARCHAR2(200 BYTE),
  REG_ID           VARCHAR2(30 BYTE),
  ORDER_TYPE       VARCHAR2(5 BYTE),
  TICKET_PRINT_DT  DATE
);

COMMENT ON COLUMN TB_OFF_ORDERS.ORDERNO IS '상품주문번호';

COMMENT ON COLUMN TB_OFF_ORDERS.USER_ID IS '회원 ID';

COMMENT ON COLUMN TB_OFF_ORDERS.USER_NM IS '성명';

COMMENT ON COLUMN TB_OFF_ORDERS.TEL_NO IS '자택전화번호';

COMMENT ON COLUMN TB_OFF_ORDERS.PHONE_NO IS '핸드폰';

COMMENT ON COLUMN TB_OFF_ORDERS.ZIP_CODE IS '우편번호';

COMMENT ON COLUMN TB_OFF_ORDERS.ADDRESS1 IS '자택주소';

COMMENT ON COLUMN TB_OFF_ORDERS.EMAIL IS '이메일';

COMMENT ON COLUMN TB_OFF_ORDERS.REG_DT IS '등록일';

COMMENT ON COLUMN TB_OFF_ORDERS.TID IS '거래번호(PG사)';

COMMENT ON COLUMN TB_OFF_ORDERS.IPDATE IS '결제금액 실제 입금일';

COMMENT ON COLUMN TB_OFF_ORDERS.OFF_LINE IS '오프라인수강자가 온라인에서 수강신청한 경우 1로 표시(기본값:0)';

COMMENT ON COLUMN TB_OFF_ORDERS.ADDRESS2 IS '자택주소 상세';

COMMENT ON COLUMN TB_OFF_ORDERS.REG_ID IS '등록자 아이디';

COMMENT ON COLUMN TB_OFF_ORDERS.ORDER_TYPE IS '수강신청방법 구분(ON:온라인,OFF:학원방문신청, DESK: 데스크 접수)';

COMMENT ON COLUMN TB_OFF_ORDERS.TICKET_PRINT_DT IS '수강증 출력일';



--
-- TB_OFF_ORDER_MGNT_NO  (Table) 
--
CREATE TABLE TB_OFF_ORDER_MGNT_NO
(
  ORDERNO            VARCHAR2(20 BYTE)          NOT NULL,
  MGNTNO             VARCHAR2(20 BYTE)          NOT NULL,
  ISCANCEL           NUMBER                     DEFAULT 0                     NOT NULL,
  CNT                NUMBER,
  PRICE              NUMBER(18),
  STATUSCODE         VARCHAR2(6 BYTE),
  CANCELDATE         DATE,
  CONFIRMDATE        DATE,
  SDATE              VARCHAR2(10 BYTE),
  ISCONFIRM          DATE,
  REPAYMENT_DAY      DATE,
  REPAYMENT_PRICE    NUMBER(18),
  MEMO               VARCHAR2(4000 BYTE),
  CONFIRMID          VARCHAR2(20 BYTE),
  WMV_PMP            VARCHAR2(10 BYTE),
  USER_PACKAGE_FLAG  VARCHAR2(1 BYTE),
  ORDERURL           VARCHAR2(30 BYTE),
  OPEN_ADMIN_ID      VARCHAR2(30 BYTE),
  DISCOUNTPER        NUMBER,
  SPO                VARCHAR2(20 BYTE),
  REG_ID             VARCHAR2(30 BYTE),
  REG_DT             DATE,
  PTYPE              VARCHAR2(2 BYTE),
  SEQ                NUMBER                     DEFAULT 0
);

COMMENT ON COLUMN TB_OFF_ORDER_MGNT_NO.ORDERNO IS '상품 주문번호';

COMMENT ON COLUMN TB_OFF_ORDER_MGNT_NO.MGNTNO IS '개별상품번호';

COMMENT ON COLUMN TB_OFF_ORDER_MGNT_NO.ISCANCEL IS '취소여부';

COMMENT ON COLUMN TB_OFF_ORDER_MGNT_NO.CNT IS '상품수량';

COMMENT ON COLUMN TB_OFF_ORDER_MGNT_NO.PRICE IS '실제 상품가격';

COMMENT ON COLUMN TB_OFF_ORDER_MGNT_NO.STATUSCODE IS '주문처리상태 
100 = 입금확인중, 105 = 입금완료, 110 = 배송준비중, 120 = 배송중, 130 = 배송완료, 140 = 취소요청, 150 = 취소완료, 160 = 교환요청, 170 = 교환배송중, 180 = 교환완료, 220 = 환불요청, 230 = 환불완료, 240 = 단과수강취소, 000 = 환불완료';

COMMENT ON COLUMN TB_OFF_ORDER_MGNT_NO.CANCELDATE IS '취소일시';

COMMENT ON COLUMN TB_OFF_ORDER_MGNT_NO.CONFIRMDATE IS '확인일시';

COMMENT ON COLUMN TB_OFF_ORDER_MGNT_NO.SDATE IS '시작일자';

COMMENT ON COLUMN TB_OFF_ORDER_MGNT_NO.ISCONFIRM IS '확인여부';

COMMENT ON COLUMN TB_OFF_ORDER_MGNT_NO.REPAYMENT_DAY IS '재결제일';

COMMENT ON COLUMN TB_OFF_ORDER_MGNT_NO.REPAYMENT_PRICE IS '재결제금액';

COMMENT ON COLUMN TB_OFF_ORDER_MGNT_NO.MEMO IS '비고';

COMMENT ON COLUMN TB_OFF_ORDER_MGNT_NO.CONFIRMID IS '확인자 아이디';

COMMENT ON COLUMN TB_OFF_ORDER_MGNT_NO.WMV_PMP IS '상품 구분 코드';

COMMENT ON COLUMN TB_OFF_ORDER_MGNT_NO.USER_PACKAGE_FLAG IS '회원 패키지 플래그';

COMMENT ON COLUMN TB_OFF_ORDER_MGNT_NO.ORDERURL IS '주문URL(등록자IP)';

COMMENT ON COLUMN TB_OFF_ORDER_MGNT_NO.DISCOUNTPER IS '장바구니할인 퍼센트';

COMMENT ON COLUMN TB_OFF_ORDER_MGNT_NO.SPO IS '검찰청에서 넘어 오는 값 spo.jsp파일 참조, spo_spo';

COMMENT ON COLUMN TB_OFF_ORDER_MGNT_NO.REG_ID IS '등록자 아이디';

COMMENT ON COLUMN TB_OFF_ORDER_MGNT_NO.REG_DT IS '등록일시';

COMMENT ON COLUMN TB_OFF_ORDER_MGNT_NO.PTYPE IS '상품구분(D:단과,J:종합,R:선택형,M:오프라인,L:도서,S:사물함,T:독서실 ...)';

COMMENT ON COLUMN TB_OFF_ORDER_MGNT_NO.SEQ IS '자동증가SEQ';



--
-- TB_OFF_PLUS_CA_BOOK  (Table) 
--
CREATE TABLE TB_OFF_PLUS_CA_BOOK
(
  IDX      NUMBER                               NOT NULL,
  LECCODE  VARCHAR2(30 BYTE)                    NOT NULL,
  RSC_ID   VARCHAR2(20 BYTE)                    NOT NULL,
  FLAG     VARCHAR2(1 BYTE)
);

COMMENT ON COLUMN TB_OFF_PLUS_CA_BOOK.IDX IS '순번';

COMMENT ON COLUMN TB_OFF_PLUS_CA_BOOK.LECCODE IS '강의코드';

COMMENT ON COLUMN TB_OFF_PLUS_CA_BOOK.RSC_ID IS '교재 과목코드';

COMMENT ON COLUMN TB_OFF_PLUS_CA_BOOK.FLAG IS '구분(주교재 J, 부교재 B, 수강생교재 S)';



--
-- TB_OFF_REFUND  (Table) 
--
CREATE TABLE TB_OFF_REFUND
(
  IDX                 NUMBER                    NOT NULL,
  ORDER_ID            VARCHAR2(20 BYTE)         NOT NULL,
  REFUND_PAY          NUMBER                    NOT NULL,
  SET_YN              VARCHAR2(1 BYTE)          DEFAULT 'N'                   NOT NULL,
  SET_DATE            DATE,
  REG_DATE            DATE                      NOT NULL,
  ACC_BANK_NAME       VARCHAR2(30 BYTE),
  ACC_BANK_NUM        VARCHAR2(30 BYTE),
  REFUND_CARD         NUMBER                    DEFAULT 0,
  REFUND_CASH         NUMBER                    DEFAULT 0,
  REFUND_MEMO         VARCHAR2(300 BYTE),
  ACC_BANK_DEPOSITOR  VARCHAR2(50 BYTE)
);

COMMENT ON COLUMN TB_OFF_REFUND.IDX IS '자동 증가(1씩)';

COMMENT ON COLUMN TB_OFF_REFUND.ORDER_ID IS '주문번호';

COMMENT ON COLUMN TB_OFF_REFUND.REFUND_PAY IS '환불총금액';

COMMENT ON COLUMN TB_OFF_REFUND.SET_DATE IS '환불날짜';

COMMENT ON COLUMN TB_OFF_REFUND.REG_DATE IS '등록일';

COMMENT ON COLUMN TB_OFF_REFUND.ACC_BANK_NAME IS '환불은행 이름';

COMMENT ON COLUMN TB_OFF_REFUND.ACC_BANK_NUM IS '환불은행 계좌번호';

COMMENT ON COLUMN TB_OFF_REFUND.REFUND_CARD IS '환불카드금액';

COMMENT ON COLUMN TB_OFF_REFUND.REFUND_CASH IS '환불현금총액';

COMMENT ON COLUMN TB_OFF_REFUND.REFUND_MEMO IS '환불메모';

COMMENT ON COLUMN TB_OFF_REFUND.ACC_BANK_DEPOSITOR IS '예금주';



--
-- TB_OFF_ROOM  (Table) 
--
CREATE TABLE TB_OFF_ROOM
(
  ROOM_CD     VARCHAR2(10 BYTE)                 NOT NULL,
  ROOM_NM     VARCHAR2(200 BYTE)                NOT NULL,
  ROOM_COUNT  NUMBER                            NOT NULL,
  UPDATE_DT   DATE                              DEFAULT sysdate,
  UPDATE_ID   VARCHAR2(30 BYTE),
  START_NUM   NUMBER,
  END_NUM     NUMBER
);

COMMENT ON COLUMN TB_OFF_ROOM.ROOM_CD IS '독서실코드';

COMMENT ON COLUMN TB_OFF_ROOM.ROOM_NM IS '독서실이름';

COMMENT ON COLUMN TB_OFF_ROOM.ROOM_COUNT IS '독서실개수';

COMMENT ON COLUMN TB_OFF_ROOM.UPDATE_DT IS '등록/수정일';

COMMENT ON COLUMN TB_OFF_ROOM.UPDATE_ID IS '등로/수정자ID';

COMMENT ON COLUMN TB_OFF_ROOM.START_NUM IS '독서실시작번호';

COMMENT ON COLUMN TB_OFF_ROOM.END_NUM IS '독서실종료번호';



--
-- TB_OFF_ROOM_NUM  (Table) 
--
CREATE TABLE TB_OFF_ROOM_NUM
(
  ROOM_CD    VARCHAR2(10 BYTE)                  NOT NULL,
  ROOM_NUM   NUMBER                             NOT NULL,
  USERID     VARCHAR2(30 BYTE),
  ROOM_FLAG  VARCHAR2(1 BYTE)                   DEFAULT ('N'),
  UPDATE_DT  DATE                               DEFAULT sysdate,
  UPDATE_ID  VARCHAR2(30 BYTE),
  RENT_SEQ   NUMBER,
  RENT_MEMO  VARCHAR2(500 BYTE)
);

COMMENT ON COLUMN TB_OFF_ROOM_NUM.ROOM_CD IS '독서실코드';

COMMENT ON COLUMN TB_OFF_ROOM_NUM.ROOM_NUM IS '독서실번호';

COMMENT ON COLUMN TB_OFF_ROOM_NUM.USERID IS '사용자ID';

COMMENT ON COLUMN TB_OFF_ROOM_NUM.ROOM_FLAG IS '독서실상태Y:사용,N:미사용,D:대기,H:홀드,X:고장)';

COMMENT ON COLUMN TB_OFF_ROOM_NUM.UPDATE_DT IS '등록/수정일';

COMMENT ON COLUMN TB_OFF_ROOM_NUM.UPDATE_ID IS '등록/수정자ID';

COMMENT ON COLUMN TB_OFF_ROOM_NUM.RENT_SEQ IS '독서실신청번호';

COMMENT ON COLUMN TB_OFF_ROOM_NUM.RENT_MEMO IS '독서실신청시메모';



--
-- TB_ORDERS  (Table) 
--
CREATE TABLE TB_ORDERS
(
  ORDERNO     VARCHAR2(20 BYTE)                 NOT NULL,
  USER_ID     VARCHAR2(30 BYTE)                 NOT NULL,
  USER_NM     VARCHAR2(50 BYTE)                 NOT NULL,
  TEL_NO      VARCHAR2(15 BYTE),
  PHONE_NO    VARCHAR2(15 BYTE),
  ZIP_CODE    VARCHAR2(7 BYTE),
  ADDRESS1    VARCHAR2(200 BYTE),
  EMAIL       VARCHAR2(100 BYTE),
  REG_DT      DATE                              DEFAULT SYSDATE,
  TID         VARCHAR2(30 BYTE),
  IPDATE      DATE,
  FREE_MOVIE  VARCHAR2(10 BYTE),
  OFF_LINE    VARCHAR2(1 BYTE)                  DEFAULT 0,
  ADDRESS2    VARCHAR2(200 BYTE),
  REG_ID      VARCHAR2(30 BYTE)
);

COMMENT ON COLUMN TB_ORDERS.ORDERNO IS '상품주문번호';

COMMENT ON COLUMN TB_ORDERS.USER_ID IS '회원 ID';

COMMENT ON COLUMN TB_ORDERS.USER_NM IS '성명';

COMMENT ON COLUMN TB_ORDERS.TEL_NO IS '자택전화번호';

COMMENT ON COLUMN TB_ORDERS.PHONE_NO IS '핸드폰';

COMMENT ON COLUMN TB_ORDERS.ZIP_CODE IS '우편번호';

COMMENT ON COLUMN TB_ORDERS.ADDRESS1 IS '자택주소';

COMMENT ON COLUMN TB_ORDERS.EMAIL IS '이메일';

COMMENT ON COLUMN TB_ORDERS.REG_DT IS '등록일';

COMMENT ON COLUMN TB_ORDERS.TID IS '거래번호(PG사)';

COMMENT ON COLUMN TB_ORDERS.IPDATE IS '결제금액 실제 입금일';

COMMENT ON COLUMN TB_ORDERS.OFF_LINE IS '오프라인수강자가 (회차수강신청) 사정상 이유로 온라인 신청을 했을때 컬럼값은 1 로 저장';

COMMENT ON COLUMN TB_ORDERS.ADDRESS2 IS '자택주소 상세';

COMMENT ON COLUMN TB_ORDERS.REG_ID IS '등록자 아이디';



--
-- TB_ORDER_MGNT_NO  (Table) 
--
CREATE TABLE TB_ORDER_MGNT_NO
(
  ORDERNO            VARCHAR2(20 BYTE)          NOT NULL,
  MGNTNO             VARCHAR2(20 BYTE)          NOT NULL,
  ISCANCEL           NUMBER                     DEFAULT 0                     NOT NULL,
  CNT                NUMBER,
  PRICE              NUMBER(18),
  STATUSCODE         VARCHAR2(6 BYTE),
  CANCELDATE         DATE,
  CONFIRMDATE        DATE,
  SDATE              VARCHAR2(10 BYTE),
  ISCONFIRM          DATE,
  REPAYMENT_DAY      DATE,
  REPAYMENT_PRICE    NUMBER(18),
  MEMO               VARCHAR2(4000 BYTE),
  CONFIRMID          VARCHAR2(20 BYTE),
  WMV_PMP            VARCHAR2(10 BYTE),
  USER_PACKAGE_FLAG  VARCHAR2(1 BYTE),
  ORDERURL           VARCHAR2(30 BYTE),
  OPEN_ADMIN_ID      VARCHAR2(30 BYTE),
  DISCOUNTPER        NUMBER,
  SPO                VARCHAR2(20 BYTE),
  REG_ID             VARCHAR2(30 BYTE),
  REG_DT             DATE,
  PTYPE              VARCHAR2(2 BYTE),
  SEQ                NUMBER                     DEFAULT 0,
  GIFT_YN            VARCHAR2(3 BYTE)           DEFAULT 'N'
);

COMMENT ON COLUMN TB_ORDER_MGNT_NO.ORDERNO IS '상품 주문번호';

COMMENT ON COLUMN TB_ORDER_MGNT_NO.MGNTNO IS '개별상품번호';

COMMENT ON COLUMN TB_ORDER_MGNT_NO.ISCANCEL IS '취소여부';

COMMENT ON COLUMN TB_ORDER_MGNT_NO.CNT IS '상품수량';

COMMENT ON COLUMN TB_ORDER_MGNT_NO.PRICE IS '실제 상품가격';

COMMENT ON COLUMN TB_ORDER_MGNT_NO.STATUSCODE IS '주문처리상태 
100 = 입금확인중, 105 = 입금완료, 110 = 배송준비중, 120 = 배송중, 130 = 배송완료, 140 = 취소요청, 150 = 취소완료, 160 = 교환요청, 170 = 교환배송중, 180 = 교환완료, 220 = 환불요청, 230 = 환불완료, 240 = 단과수강취소, 000 = 환불완료';

COMMENT ON COLUMN TB_ORDER_MGNT_NO.CANCELDATE IS '취소일시';

COMMENT ON COLUMN TB_ORDER_MGNT_NO.CONFIRMDATE IS '확인일시';

COMMENT ON COLUMN TB_ORDER_MGNT_NO.SDATE IS '시작일자';

COMMENT ON COLUMN TB_ORDER_MGNT_NO.ISCONFIRM IS '확인여부';

COMMENT ON COLUMN TB_ORDER_MGNT_NO.REPAYMENT_DAY IS '재결제일';

COMMENT ON COLUMN TB_ORDER_MGNT_NO.REPAYMENT_PRICE IS '재결제금액';

COMMENT ON COLUMN TB_ORDER_MGNT_NO.MEMO IS '비고';

COMMENT ON COLUMN TB_ORDER_MGNT_NO.CONFIRMID IS '확인자 아이디';

COMMENT ON COLUMN TB_ORDER_MGNT_NO.WMV_PMP IS '상품 구분 코드';

COMMENT ON COLUMN TB_ORDER_MGNT_NO.USER_PACKAGE_FLAG IS '회원 패키지 플래그';

COMMENT ON COLUMN TB_ORDER_MGNT_NO.ORDERURL IS '주문URL(등록자IP)';

COMMENT ON COLUMN TB_ORDER_MGNT_NO.DISCOUNTPER IS '장바구니할인 퍼센터';

COMMENT ON COLUMN TB_ORDER_MGNT_NO.SPO IS '검찰청에서 받는 값';

COMMENT ON COLUMN TB_ORDER_MGNT_NO.REG_ID IS '등록자 아이디';

COMMENT ON COLUMN TB_ORDER_MGNT_NO.REG_DT IS '등록일시';

COMMENT ON COLUMN TB_ORDER_MGNT_NO.PTYPE IS '상품구분(D:단과,J:종합,L;도서,T:독서실 ...)';

COMMENT ON COLUMN TB_ORDER_MGNT_NO.SEQ IS '자동증가SEQ';

COMMENT ON COLUMN TB_ORDER_MGNT_NO.GIFT_YN IS '사은품 여부';



--
-- TB_ORDER_YEARPACKAGE  (Table) 
--
CREATE TABLE TB_ORDER_YEARPACKAGE
(
  ORDERNO          VARCHAR2(20 BYTE)            NOT NULL,
  PACKAGE_NO       VARCHAR2(30 BYTE)            NOT NULL,
  SUBJECT_TEACHER  VARCHAR2(50 BYTE)            NOT NULL,
  LEARNING_CD      VARCHAR2(20 BYTE),
  REG_DT           DATE,
  START_DATE       DATE,
  END_DATE         DATE
);


--
-- TB_PAYSETTLEMENT  (Table) 
--
CREATE TABLE TB_PAYSETTLEMENT
(
  SEQ                   NUMBER,
  ONOFF                 VARCHAR2(4 BYTE),
  TEACHER_ID            VARCHAR2(30 BYTE),
  TEACHER_NM            VARCHAR2(50 BYTE),
  LECCODE               VARCHAR2(30 BYTE),
  PREAMOUNT             NUMBER(18),
  AMOUNT                NUMBER(18),
  TEACHERAMOUNT         NUMBER(18),
  DEDUCTAMOUNT          NUMBER(18),
  CALCUCRITERIA_DTYPE   VARCHAR2(4 BYTE),
  CALCUCRITERIA_DVALUE  NUMBER,
  CALCUCRITERIA_JTYPE   VARCHAR2(4 BYTE),
  CALCUCRITERIA_JVALUE  NUMBER,
  TEACHERPAY            NUMBER(18),
  WITHHOLDRATIO         NUMBER,
  WITHHOLDTAX           NUMBER(18),
  DEDUCTAMOUNT_ETC      NUMBER(18),
  ADJUSTAMOUNT          NUMBER(18),
  SETTLE_DT             DATE,
  REG_DT                DATE
);

COMMENT ON TABLE TB_PAYSETTLEMENT IS '강사료정산정보';

COMMENT ON COLUMN TB_PAYSETTLEMENT.SEQ IS '순번';

COMMENT ON COLUMN TB_PAYSETTLEMENT.ONOFF IS 'ONOFF구분';

COMMENT ON COLUMN TB_PAYSETTLEMENT.TEACHER_ID IS '강사ID';

COMMENT ON COLUMN TB_PAYSETTLEMENT.TEACHER_NM IS '강사명';

COMMENT ON COLUMN TB_PAYSETTLEMENT.LECCODE IS '과목코드';

COMMENT ON COLUMN TB_PAYSETTLEMENT.PREAMOUNT IS '공제전수강총액';

COMMENT ON COLUMN TB_PAYSETTLEMENT.AMOUNT IS '수강총액';

COMMENT ON COLUMN TB_PAYSETTLEMENT.TEACHERAMOUNT IS '강사료산정대상금액';

COMMENT ON COLUMN TB_PAYSETTLEMENT.DEDUCTAMOUNT IS '공제금액';

COMMENT ON COLUMN TB_PAYSETTLEMENT.CALCUCRITERIA_DTYPE IS '정산기준단가반구분';

COMMENT ON COLUMN TB_PAYSETTLEMENT.CALCUCRITERIA_DVALUE IS '정산기준단가반값';

COMMENT ON COLUMN TB_PAYSETTLEMENT.CALCUCRITERIA_JTYPE IS '정산기준종합반구분';

COMMENT ON COLUMN TB_PAYSETTLEMENT.CALCUCRITERIA_JVALUE IS '정산기준종합반값';

COMMENT ON COLUMN TB_PAYSETTLEMENT.TEACHERPAY IS '강사료';

COMMENT ON COLUMN TB_PAYSETTLEMENT.WITHHOLDRATIO IS '원천세비율';

COMMENT ON COLUMN TB_PAYSETTLEMENT.WITHHOLDTAX IS '원천세';

COMMENT ON COLUMN TB_PAYSETTLEMENT.DEDUCTAMOUNT_ETC IS '기타공제금액';

COMMENT ON COLUMN TB_PAYSETTLEMENT.ADJUSTAMOUNT IS '정산금액';

COMMENT ON COLUMN TB_PAYSETTLEMENT.SETTLE_DT IS '정산일자';

COMMENT ON COLUMN TB_PAYSETTLEMENT.REG_DT IS '등록일';



--
-- TB_PAYSETTLEMENT_ADD  (Table) 
--
CREATE TABLE TB_PAYSETTLEMENT_ADD
(
  TEACHER_ID  VARCHAR2(30 BYTE),
  LECCODE     VARCHAR2(30 BYTE),
  ADDTYPE     VARCHAR2(2 BYTE),
  ADDMEMO     VARCHAR2(100 BYTE),
  ADDMONEY    NUMBER,
  ADDREG_DT   DATE                              DEFAULT SYSDATE,
  ADDUPD_DT   DATE                              DEFAULT SYSDATE,
  ETCYN       VARCHAR2(2 BYTE)                  DEFAULT 'N',
  PSA_NO      NUMBER
);

COMMENT ON TABLE TB_PAYSETTLEMENT_ADD IS '강사료정산공제내역';

COMMENT ON COLUMN TB_PAYSETTLEMENT_ADD.TEACHER_ID IS '강사ID';

COMMENT ON COLUMN TB_PAYSETTLEMENT_ADD.LECCODE IS '강좌코드';

COMMENT ON COLUMN TB_PAYSETTLEMENT_ADD.ADDTYPE IS '추가타입(P:더하기,M:빼기)';

COMMENT ON COLUMN TB_PAYSETTLEMENT_ADD.ADDMEMO IS '공제제목';

COMMENT ON COLUMN TB_PAYSETTLEMENT_ADD.ADDMONEY IS '공제금액';

COMMENT ON COLUMN TB_PAYSETTLEMENT_ADD.ADDREG_DT IS '등록일';

COMMENT ON COLUMN TB_PAYSETTLEMENT_ADD.ADDUPD_DT IS '수정일';

COMMENT ON COLUMN TB_PAYSETTLEMENT_ADD.ETCYN IS '기타공제면 Y';

COMMENT ON COLUMN TB_PAYSETTLEMENT_ADD.PSA_NO IS '순번';



--
-- TB_PLUS_CA_BOOK  (Table) 
--
CREATE TABLE TB_PLUS_CA_BOOK
(
  IDX      NUMBER                               NOT NULL,
  LECCODE  VARCHAR2(30 BYTE)                    NOT NULL,
  RSC_ID   VARCHAR2(20 BYTE)                    NOT NULL,
  FLAG     VARCHAR2(1 BYTE)
);

COMMENT ON COLUMN TB_PLUS_CA_BOOK.IDX IS '순번';

COMMENT ON COLUMN TB_PLUS_CA_BOOK.LECCODE IS '강의코드';

COMMENT ON COLUMN TB_PLUS_CA_BOOK.RSC_ID IS '교재 과목코드';

COMMENT ON COLUMN TB_PLUS_CA_BOOK.FLAG IS '구분(주교재 J, 부교재 B, 수강생교재 S)';



--
-- TB_PMP_DOWNLOG  (Table) 
--
CREATE TABLE TB_PMP_DOWNLOG
(
  IDX          NUMBER                           NOT NULL,
  USERID       VARCHAR2(30 BYTE)                NOT NULL,
  CONTENTID    VARCHAR2(20 BYTE)                NOT NULL,
  DOWNLOGINFO  VARCHAR2(60 BYTE),
  PMP_REGDATE  DATE                             DEFAULT (SYSDATE)
);

COMMENT ON COLUMN TB_PMP_DOWNLOG.IDX IS '번호(1씩 자동증가)';

COMMENT ON COLUMN TB_PMP_DOWNLOG.USERID IS '사용자 아이디';

COMMENT ON COLUMN TB_PMP_DOWNLOG.CONTENTID IS '콘텐츠ID';

COMMENT ON COLUMN TB_PMP_DOWNLOG.DOWNLOGINFO IS '다운로드 정보';

COMMENT ON COLUMN TB_PMP_DOWNLOG.PMP_REGDATE IS 'PMP다운로드일시';



--
-- TB_RENEW_HISTORY  (Table) 
--
CREATE TABLE TB_RENEW_HISTORY
(
  ORDERNO         VARCHAR2(20 BYTE)             NOT NULL,
  OLD_PACKAGE_NO  VARCHAR2(20 BYTE)             NOT NULL,
  NEW_PACKAGE_NO  VARCHAR2(20 BYTE)             NOT NULL,
  REGDATE         DATE                          DEFAULT (SYSDATE)
);

COMMENT ON COLUMN TB_RENEW_HISTORY.ORDERNO IS '주문번호';

COMMENT ON COLUMN TB_RENEW_HISTORY.OLD_PACKAGE_NO IS '기존 패키지 번호';

COMMENT ON COLUMN TB_RENEW_HISTORY.NEW_PACKAGE_NO IS '신규 패키지 번호';

COMMENT ON COLUMN TB_RENEW_HISTORY.REGDATE IS '등록일';



--
-- TB_SEQOFF_ORDERNO  (Table) 
--
CREATE TABLE TB_SEQOFF_ORDERNO
(
  GUBUN  VARCHAR2(3 BYTE),
  GYEAR  NUMBER,
  SEQ    NUMBER
);

COMMENT ON COLUMN TB_SEQOFF_ORDERNO.GUBUN IS '구분(M,L,D,...)';

COMMENT ON COLUMN TB_SEQOFF_ORDERNO.GYEAR IS '올해년도(YYYY)';

COMMENT ON COLUMN TB_SEQOFF_ORDERNO.SEQ IS '채번값';



--
-- TB_SEQ_ORDERNO  (Table) 
--
CREATE TABLE TB_SEQ_ORDERNO
(
  GUBUN  VARCHAR2(3 BYTE),
  GYEAR  NUMBER,
  SEQ    NUMBER                                 DEFAULT 0
);

COMMENT ON COLUMN TB_SEQ_ORDERNO.GUBUN IS '구분(M,D,R,...)';

COMMENT ON COLUMN TB_SEQ_ORDERNO.GYEAR IS '올해년도(YYYY)';

COMMENT ON COLUMN TB_SEQ_ORDERNO.SEQ IS '채번값';



--
-- TB_SERIES_INFO  (Table) 
--
CREATE TABLE TB_SERIES_INFO
(
  SRS_CD   VARCHAR2(20 BYTE)                    NOT NULL,
  SRS_NM   VARCHAR2(50 BYTE),
  ORDR     NUMBER,
  ISUSE    VARCHAR2(1 BYTE),
  REG_DT   DATE,
  REG_ID   VARCHAR2(30 BYTE),
  UPD_DT   DATE,
  UPD_ID   VARCHAR2(30 BYTE),
  P_SRSCD  VARCHAR2(20 BYTE)
);

COMMENT ON COLUMN TB_SERIES_INFO.SRS_CD IS '직렬코드';

COMMENT ON COLUMN TB_SERIES_INFO.SRS_NM IS '직렬명';

COMMENT ON COLUMN TB_SERIES_INFO.ORDR IS '순서';

COMMENT ON COLUMN TB_SERIES_INFO.ISUSE IS '상태(Y:활성, N:비활성)';

COMMENT ON COLUMN TB_SERIES_INFO.REG_DT IS '등록일';

COMMENT ON COLUMN TB_SERIES_INFO.REG_ID IS '등록자 아이디';

COMMENT ON COLUMN TB_SERIES_INFO.UPD_DT IS '수정일';

COMMENT ON COLUMN TB_SERIES_INFO.UPD_ID IS '수정자 아이디';

COMMENT ON COLUMN TB_SERIES_INFO.P_SRSCD IS '상위 직렬코드';



--
-- TB_STAT_PRF  (Table) 
--
CREATE TABLE TB_STAT_PRF
(
  S_YEAR      VARCHAR2(4 BYTE),
  S_MONTH     VARCHAR2(2 BYTE),
  S_TYPE      VARCHAR2(2 BYTE),
  PRF_ID      VARCHAR2(20 BYTE),
  SALE_CNT    NUMBER,
  REFUND_CNT  NUMBER,
  SALE_SUM    NUMBER,
  REFUND_SUM  NUMBER
);

COMMENT ON COLUMN TB_STAT_PRF.S_YEAR IS '정산년도';

COMMENT ON COLUMN TB_STAT_PRF.S_MONTH IS '정산월';

COMMENT ON COLUMN TB_STAT_PRF.S_TYPE IS '구분(ON:온라인, OF:학원, ET:기타)';

COMMENT ON COLUMN TB_STAT_PRF.PRF_ID IS '교수아이디';

COMMENT ON COLUMN TB_STAT_PRF.SALE_CNT IS '판매건수';

COMMENT ON COLUMN TB_STAT_PRF.REFUND_CNT IS '환불건수';

COMMENT ON COLUMN TB_STAT_PRF.SALE_SUM IS '판매금액';

COMMENT ON COLUMN TB_STAT_PRF.REFUND_SUM IS '환불금액';



--
-- TB_SUBJECT_CATEGORY  (Table) 
--
CREATE TABLE TB_SUBJECT_CATEGORY
(
  SUBJECT_CD     VARCHAR2(50 BYTE)              NOT NULL,
  CATEGORY_CODE  VARCHAR2(50 BYTE)              NOT NULL
);


--
-- TB_SUBJECT_INFO  (Table) 
--
CREATE TABLE TB_SUBJECT_INFO
(
  SUBJECT_CD        VARCHAR2(50 BYTE)           NOT NULL,
  SUBJECT_NM        VARCHAR2(500 BYTE),
  SUBJECT_SHORT_NM  VARCHAR2(60 BYTE),
  ISUSE             VARCHAR2(1 BYTE),
  REG_DT            DATE,
  REG_ID            VARCHAR2(30 BYTE),
  UPD_DT            DATE,
  UPD_ID            VARCHAR2(30 BYTE),
  USE_ON            VARCHAR2(1 BYTE),
  USE_OFF           VARCHAR2(1 BYTE)
);

COMMENT ON COLUMN TB_SUBJECT_INFO.SUBJECT_CD IS '과목코드';

COMMENT ON COLUMN TB_SUBJECT_INFO.SUBJECT_NM IS '과목명';

COMMENT ON COLUMN TB_SUBJECT_INFO.SUBJECT_SHORT_NM IS '과목약칭';

COMMENT ON COLUMN TB_SUBJECT_INFO.ISUSE IS '상태(Y:활성N:비활성)';

COMMENT ON COLUMN TB_SUBJECT_INFO.REG_DT IS '등록일';

COMMENT ON COLUMN TB_SUBJECT_INFO.REG_ID IS '등록자 아이디';

COMMENT ON COLUMN TB_SUBJECT_INFO.UPD_DT IS '수정일';

COMMENT ON COLUMN TB_SUBJECT_INFO.UPD_ID IS '수정자 아이디';



--
-- TB_SUBJECT_SERIES  (Table) 
--
CREATE TABLE TB_SUBJECT_SERIES
(
  SUBJECT_CD  VARCHAR2(50 BYTE)                 NOT NULL,
  SERIES_CD   VARCHAR2(50 BYTE)                 NOT NULL
);


--
-- TB_TAPPROVALS  (Table) 
--
CREATE TABLE TB_TAPPROVALS
(
  TID                  VARCHAR2(30 BYTE)        NOT NULL,
  IDENTYID             VARCHAR2(20 BYTE)        NOT NULL,
  ORDERNO              VARCHAR2(20 BYTE),
  PAYMENTTARGETAMOUNT  NUMBER,
  PAYMENTAMOUNT        NUMBER                   NOT NULL,
  ADDDISCOUNTRATIO     NUMBER,
  ADDDISCOUNTAMOUNT    NUMBER,
  ADDDISCOUNTREASON    VARCHAR2(100 BYTE),
  PAYMENTDUEDATE       VARCHAR2(20 BYTE),
  PAYMENTSTATE         NUMBER,
  PAYMENTTYPE          NUMBER                   NOT NULL,
  CARDKIND             VARCHAR2(20 BYTE),
  REG_ID               VARCHAR2(30 BYTE)        NOT NULL,
  REG_DT               DATE                     NOT NULL,
  UPD_ID               VARCHAR2(30 BYTE),
  UPD_DT               DATE
);

COMMENT ON TABLE TB_TAPPROVALS IS '결제정보';

COMMENT ON COLUMN TB_TAPPROVALS.TID IS '결제거래번호';

COMMENT ON COLUMN TB_TAPPROVALS.IDENTYID IS '응시번호';

COMMENT ON COLUMN TB_TAPPROVALS.ORDERNO IS '주문번호';

COMMENT ON COLUMN TB_TAPPROVALS.PAYMENTTARGETAMOUNT IS '결제대상금액';

COMMENT ON COLUMN TB_TAPPROVALS.PAYMENTAMOUNT IS '결제금액';

COMMENT ON COLUMN TB_TAPPROVALS.ADDDISCOUNTRATIO IS '추가할인비율';

COMMENT ON COLUMN TB_TAPPROVALS.ADDDISCOUNTAMOUNT IS '추가할인정액';

COMMENT ON COLUMN TB_TAPPROVALS.ADDDISCOUNTREASON IS '할인사유';

COMMENT ON COLUMN TB_TAPPROVALS.PAYMENTDUEDATE IS '결제완료예정일자';

COMMENT ON COLUMN TB_TAPPROVALS.PAYMENTSTATE IS '결제상태, 0:대기중, 1:결제완료, 2:환불완료, 3:취소완료';

COMMENT ON COLUMN TB_TAPPROVALS.PAYMENTTYPE IS '결제방법, 0:카드, 1:현금, 2:계좌이체, 3:가상계좌';

COMMENT ON COLUMN TB_TAPPROVALS.CARDKIND IS '카드종류';

COMMENT ON COLUMN TB_TAPPROVALS.REG_ID IS '생성자';

COMMENT ON COLUMN TB_TAPPROVALS.REG_DT IS '생성일시';

COMMENT ON COLUMN TB_TAPPROVALS.UPD_ID IS '수정자';

COMMENT ON COLUMN TB_TAPPROVALS.UPD_DT IS '수정일시';



--
-- TB_TATTACHFILE  (Table) 
--
CREATE TABLE TB_TATTACHFILE
(
  ATTACHFILEID  NUMBER                          NOT NULL,
  FILENAME      VARCHAR2(250 BYTE)              NOT NULL,
  FILEPATH      VARCHAR2(250 BYTE)              NOT NULL,
  FILESIZE      VARCHAR2(11 BYTE),
  REGDATE       DATE
);

COMMENT ON COLUMN TB_TATTACHFILE.ATTACHFILEID IS '파일ID';

COMMENT ON COLUMN TB_TATTACHFILE.FILENAME IS '파일명';

COMMENT ON COLUMN TB_TATTACHFILE.FILEPATH IS '파일경로';

COMMENT ON COLUMN TB_TATTACHFILE.FILESIZE IS '파일크기(BYTES)';

COMMENT ON COLUMN TB_TATTACHFILE.REGDATE IS '등록일시';



--
-- TB_TBOARDTESTCLASS  (Table) 
--
CREATE TABLE TB_TBOARDTESTCLASS
(
  BCONTENTID  NUMBER,
  CLASSCODE   VARCHAR2(20 BYTE)
);

COMMENT ON COLUMN TB_TBOARDTESTCLASS.BCONTENTID IS '게시글ID';

COMMENT ON COLUMN TB_TBOARDTESTCLASS.CLASSCODE IS '직급코드';



--
-- TB_TBOARDTESTENV  (Table) 
--
CREATE TABLE TB_TBOARDTESTENV
(
  BOARDENVID   NUMBER                           NOT NULL,
  BOARDTITLE   VARCHAR2(50 BYTE),
  DESCRIPTION  VARCHAR2(200 BYTE),
  BOARDTYPE    VARCHAR2(20 BYTE),
  HASREPLY     NUMBER,
  HASCOMMENT   NUMBER,
  REG_ID       VARCHAR2(20 BYTE),
  REG_DT       DATE,
  UPD_ID       VARCHAR2(20 BYTE),
  UPD_DT       DATE,
  LEVELUSER    NUMBER                           DEFAULT 1,
  LEVELPROF    NUMBER                           DEFAULT 1,
  LEVELADMIN   NUMBER                           DEFAULT 1
);

COMMENT ON COLUMN TB_TBOARDTESTENV.BOARDENVID IS '게시판설정ID';

COMMENT ON COLUMN TB_TBOARDTESTENV.BOARDTITLE IS '게시판제목';

COMMENT ON COLUMN TB_TBOARDTESTENV.DESCRIPTION IS '게시판설명';

COMMENT ON COLUMN TB_TBOARDTESTENV.BOARDTYPE IS '게시판종류';

COMMENT ON COLUMN TB_TBOARDTESTENV.HASREPLY IS '답변사용여부(1:사용,0:미사용)';

COMMENT ON COLUMN TB_TBOARDTESTENV.HASCOMMENT IS '댓글사용여부(1:사용,0:미사용)';

COMMENT ON COLUMN TB_TBOARDTESTENV.REG_ID IS '생성자ID';

COMMENT ON COLUMN TB_TBOARDTESTENV.REG_DT IS '생성일시';

COMMENT ON COLUMN TB_TBOARDTESTENV.UPD_ID IS '수정자ID';

COMMENT ON COLUMN TB_TBOARDTESTENV.UPD_DT IS '수정일시';

COMMENT ON COLUMN TB_TBOARDTESTENV.LEVELUSER IS '수강생권한(0:읽기만, 1: 읽기쓰기)';

COMMENT ON COLUMN TB_TBOARDTESTENV.LEVELPROF IS '강사권한(0:읽기만, 1: 읽기쓰기)';

COMMENT ON COLUMN TB_TBOARDTESTENV.LEVELADMIN IS '관리자권한(0:읽기만, 1: 읽기쓰기)';



--
-- TB_TCCSRSSUBJECTINFO  (Table) 
--
CREATE TABLE TB_TCCSRSSUBJECTINFO
(
  ID                   NUMBER                   NOT NULL,
  CLASSCODE            VARCHAR2(20 BYTE)        NOT NULL,
  CLASSSERIESCODE      VARCHAR2(20 BYTE)        NOT NULL,
  SUBJECT_CD           VARCHAR2(20 BYTE)        NOT NULL,
  SUBJECTTYPEDIVISION  NUMBER                   NOT NULL,
  SUBJECTORDER         NUMBER                   NOT NULL,
  REG_ID               VARCHAR2(20 BYTE),
  REG_DT               DATE,
  UPD_ID               VARCHAR2(20 BYTE),
  UPD_DT               DATE
);

COMMENT ON TABLE TB_TCCSRSSUBJECTINFO IS '직급직렬별과목';

COMMENT ON COLUMN TB_TCCSRSSUBJECTINFO.ID IS 'ID';

COMMENT ON COLUMN TB_TCCSRSSUBJECTINFO.CLASSCODE IS '직급코드';

COMMENT ON COLUMN TB_TCCSRSSUBJECTINFO.CLASSSERIESCODE IS '직렬코드';

COMMENT ON COLUMN TB_TCCSRSSUBJECTINFO.SUBJECT_CD IS '과목코드';

COMMENT ON COLUMN TB_TCCSRSSUBJECTINFO.SUBJECTTYPEDIVISION IS '필수선택구분, 1:필수, 2:선택';

COMMENT ON COLUMN TB_TCCSRSSUBJECTINFO.SUBJECTORDER IS '과목순번';

COMMENT ON COLUMN TB_TCCSRSSUBJECTINFO.REG_ID IS '생성자';

COMMENT ON COLUMN TB_TCCSRSSUBJECTINFO.REG_DT IS '생성일시';

COMMENT ON COLUMN TB_TCCSRSSUBJECTINFO.UPD_ID IS '수정자';

COMMENT ON COLUMN TB_TCCSRSSUBJECTINFO.UPD_DT IS '수정일시';



--
-- TB_TCOMMONCODE  (Table) 
--
CREATE TABLE TB_TCOMMONCODE
(
  ID          NUMBER                            NOT NULL,
  CODE        VARCHAR2(20 BYTE)                 NOT NULL,
  PARENTCODE  VARCHAR2(20 BYTE),
  CODENAME    VARCHAR2(40 BYTE),
  CODEDESC    VARCHAR2(100 BYTE),
  CODEVALUE   VARCHAR2(20 BYTE),
  CODERANK    NUMBER,
  USEFLAG     NUMBER,
  REG_ID      VARCHAR2(20 BYTE),
  REG_DT      DATE,
  UPD_ID      VARCHAR2(20 BYTE),
  UPD_DT      DATE
);

COMMENT ON TABLE TB_TCOMMONCODE IS '공통코드';

COMMENT ON COLUMN TB_TCOMMONCODE.ID IS 'ID';

COMMENT ON COLUMN TB_TCOMMONCODE.CODE IS '공통코드';

COMMENT ON COLUMN TB_TCOMMONCODE.PARENTCODE IS '상위코드';

COMMENT ON COLUMN TB_TCOMMONCODE.CODENAME IS '코드명';

COMMENT ON COLUMN TB_TCOMMONCODE.CODEDESC IS '코드설명';

COMMENT ON COLUMN TB_TCOMMONCODE.CODEVALUE IS '값';

COMMENT ON COLUMN TB_TCOMMONCODE.CODERANK IS '정렬순서';

COMMENT ON COLUMN TB_TCOMMONCODE.USEFLAG IS '사용여부 0:사용, 1:미사용';

COMMENT ON COLUMN TB_TCOMMONCODE.REG_ID IS '생성자';

COMMENT ON COLUMN TB_TCOMMONCODE.REG_DT IS '생성일시';

COMMENT ON COLUMN TB_TCOMMONCODE.UPD_ID IS '수정자';

COMMENT ON COLUMN TB_TCOMMONCODE.UPD_DT IS '수정일시';



--
-- TB_TEXAMIDSEQ  (Table) 
--
CREATE TABLE TB_TEXAMIDSEQ
(
  GUBUN   VARCHAR2(2 BYTE)                      NOT NULL,
  IDTYPE  VARCHAR2(10 BYTE)                     NOT NULL,
  SEQ     NUMBER
);


--
-- TB_TEXAMINEEANSWER  (Table) 
--
CREATE TABLE TB_TEXAMINEEANSWER
(
  ID              NUMBER                        NOT NULL,
  IDENTYID        VARCHAR2(20 BYTE)             NOT NULL,
  ITEMID          NUMBER                        NOT NULL,
  QUESTIONNUMBER  NUMBER                        NOT NULL,
  MOCKCODE        VARCHAR2(20 BYTE)             NOT NULL,
  ANSWERNUMBER    VARCHAR2(200 BYTE),
  REG_ID          VARCHAR2(30 BYTE)             NOT NULL,
  REG_DT          DATE                          NOT NULL,
  UPD_ID          VARCHAR2(30 BYTE),
  UPD_DT          DATE,
  CORRECTYN       VARCHAR2(2 BYTE)
);

COMMENT ON TABLE TB_TEXAMINEEANSWER IS '응시자답변';

COMMENT ON COLUMN TB_TEXAMINEEANSWER.ID IS 'ID';

COMMENT ON COLUMN TB_TEXAMINEEANSWER.IDENTYID IS '응시번호';

COMMENT ON COLUMN TB_TEXAMINEEANSWER.ITEMID IS '문제은행구분번호';

COMMENT ON COLUMN TB_TEXAMINEEANSWER.QUESTIONNUMBER IS '문제번호';

COMMENT ON COLUMN TB_TEXAMINEEANSWER.MOCKCODE IS '모의고사코드';

COMMENT ON COLUMN TB_TEXAMINEEANSWER.ANSWERNUMBER IS '답변번호';

COMMENT ON COLUMN TB_TEXAMINEEANSWER.REG_ID IS '생성자';

COMMENT ON COLUMN TB_TEXAMINEEANSWER.REG_DT IS '생성일시';

COMMENT ON COLUMN TB_TEXAMINEEANSWER.UPD_ID IS '수정자';

COMMENT ON COLUMN TB_TEXAMINEEANSWER.UPD_DT IS '수정일시';

COMMENT ON COLUMN TB_TEXAMINEEANSWER.CORRECTYN IS '정답여부(정답=Y,오답=N)';



--
-- TB_TITEM  (Table) 
--
CREATE TABLE TB_TITEM
(
  ITEMID                      NUMBER            NOT NULL,
  EXAMYEAR                    NUMBER            NOT NULL,
  EXAMROUND                   NUMBER            NOT NULL,
  SUBJECT_CD                  VARCHAR2(20 BYTE),
  PROFCODE                    VARCHAR2(20 BYTE),
  ENTRYNUM                    NUMBER,
  QUESTIONNUM                 NUMBER,
  QUESTIONREGISTRATIONOPTION  NUMBER,
  OPENSTATE                   NUMBER,
  DELETEFLAG                  NUMBER,
  REG_ID                      VARCHAR2(20 BYTE) NOT NULL,
  REG_DT                      DATE              NOT NULL,
  UPD_ID                      VARCHAR2(20 BYTE),
  UPD_DT                      DATE,
  FEE_PROF                    VARCHAR2(5 BYTE),
  CODE_NM                     VARCHAR2(150 BYTE),
  QUESTIONFID                 NUMBER,
  ANSWERFID                   NUMBER
);

COMMENT ON TABLE TB_TITEM IS '과목별문제은행';

COMMENT ON COLUMN TB_TITEM.ITEMID IS '문제은행구분번호';

COMMENT ON COLUMN TB_TITEM.EXAMYEAR IS '년도';

COMMENT ON COLUMN TB_TITEM.EXAMROUND IS '회차';

COMMENT ON COLUMN TB_TITEM.SUBJECT_CD IS '과목코드';

COMMENT ON COLUMN TB_TITEM.PROFCODE IS '교수코드';

COMMENT ON COLUMN TB_TITEM.ENTRYNUM IS '지문수';

COMMENT ON COLUMN TB_TITEM.QUESTIONNUM IS '문제수';

COMMENT ON COLUMN TB_TITEM.QUESTIONREGISTRATIONOPTION IS '문제등록옵션';

COMMENT ON COLUMN TB_TITEM.OPENSTATE IS '개설여부, 0:미오픈, 1:오픈';

COMMENT ON COLUMN TB_TITEM.DELETEFLAG IS '삭제여부, 0:미삭제, 1:삭제';

COMMENT ON COLUMN TB_TITEM.REG_ID IS '생성자';

COMMENT ON COLUMN TB_TITEM.REG_DT IS '생성일시';

COMMENT ON COLUMN TB_TITEM.UPD_ID IS '수정자';

COMMENT ON COLUMN TB_TITEM.UPD_DT IS '수정일시';

COMMENT ON COLUMN TB_TITEM.FEE_PROF IS '강사료지급율';

COMMENT ON COLUMN TB_TITEM.QUESTIONFID IS '문제PDF파일';

COMMENT ON COLUMN TB_TITEM.ANSWERFID IS '해설PDF파일';



--
-- TB_TITEMPOOL  (Table) 
--
CREATE TABLE TB_TITEMPOOL
(
  QUESTIONNUMBER               NUMBER           NOT NULL,
  ITEMID                       NUMBER           NOT NULL,
  QUESTION                     VARCHAR2(500 BYTE),
  QUESTIONFILEID               NUMBER,
  ANSWEREXPLAIN                VARCHAR2(500 BYTE),
  ANSWEREXPLAINFILEID          NUMBER,
  ANSWERNUMBER                 VARCHAR2(200 BYTE),
  QUESTIONRANGE                NUMBER,
  LEVELDIFFICULTY              NUMBER,
  QUESTIONPATTERN              VARCHAR2(20 BYTE),
  USEFLAG                      NUMBER,
  REFERENCEEXAMYEAR            NUMBER,
  REFERENCEEXAMROUND           NUMBER,
  REFERENCEEXAMQUESTIONNUMBER  NUMBER,
  REG_ID                       VARCHAR2(30 BYTE) NOT NULL,
  REG_DT                       DATE             NOT NULL,
  UPD_ID                       VARCHAR2(30 BYTE),
  UPD_DT                       DATE
);

COMMENT ON TABLE TB_TITEMPOOL IS '문제은행질문';

COMMENT ON COLUMN TB_TITEMPOOL.QUESTIONNUMBER IS '문제번호';

COMMENT ON COLUMN TB_TITEMPOOL.ITEMID IS '문제은행구분번호';

COMMENT ON COLUMN TB_TITEMPOOL.QUESTION IS '문제';

COMMENT ON COLUMN TB_TITEMPOOL.QUESTIONFILEID IS '문제 파일ID';

COMMENT ON COLUMN TB_TITEMPOOL.ANSWEREXPLAIN IS '답안해설';

COMMENT ON COLUMN TB_TITEMPOOL.ANSWEREXPLAINFILEID IS '답안해설 파일ID';

COMMENT ON COLUMN TB_TITEMPOOL.ANSWERNUMBER IS '정답번호';

COMMENT ON COLUMN TB_TITEMPOOL.QUESTIONRANGE IS '출제영역';

COMMENT ON COLUMN TB_TITEMPOOL.LEVELDIFFICULTY IS '난이도';

COMMENT ON COLUMN TB_TITEMPOOL.QUESTIONPATTERN IS '문제유형(A:단일선택형, B:다지선택형, C:단답형, D:서술형)';

COMMENT ON COLUMN TB_TITEMPOOL.USEFLAG IS '사용여부';

COMMENT ON COLUMN TB_TITEMPOOL.REFERENCEEXAMYEAR IS '참조년도';

COMMENT ON COLUMN TB_TITEMPOOL.REFERENCEEXAMROUND IS '참조회차';

COMMENT ON COLUMN TB_TITEMPOOL.REFERENCEEXAMQUESTIONNUMBER IS '참조문제번호';

COMMENT ON COLUMN TB_TITEMPOOL.REG_ID IS '생성자';

COMMENT ON COLUMN TB_TITEMPOOL.REG_DT IS '생성일시';

COMMENT ON COLUMN TB_TITEMPOOL.UPD_ID IS '수정자';

COMMENT ON COLUMN TB_TITEMPOOL.UPD_DT IS '수정일시';



--
-- TB_TMOCKCLSCLSSERIES  (Table) 
--
CREATE TABLE TB_TMOCKCLSCLSSERIES
(
  ID               NUMBER                       NOT NULL,
  MOCKCODE         VARCHAR2(20 BYTE),
  CLASSSERIESCODE  VARCHAR2(20 BYTE),
  REG_ID           VARCHAR2(30 BYTE)            NOT NULL,
  REG_DT           DATE                         NOT NULL,
  UPD_ID           VARCHAR2(30 BYTE),
  UPD_DT           DATE
);

COMMENT ON TABLE TB_TMOCKCLSCLSSERIES IS '모의고사선택한 직급직렬코드';

COMMENT ON COLUMN TB_TMOCKCLSCLSSERIES.ID IS 'ID';

COMMENT ON COLUMN TB_TMOCKCLSCLSSERIES.MOCKCODE IS '모의고사코드';

COMMENT ON COLUMN TB_TMOCKCLSCLSSERIES.CLASSSERIESCODE IS '직렬코드';

COMMENT ON COLUMN TB_TMOCKCLSCLSSERIES.REG_ID IS '생성자';

COMMENT ON COLUMN TB_TMOCKCLSCLSSERIES.REG_DT IS '생성일시';

COMMENT ON COLUMN TB_TMOCKCLSCLSSERIES.UPD_ID IS '수정자';

COMMENT ON COLUMN TB_TMOCKCLSCLSSERIES.UPD_DT IS '수정일시';



--
-- TB_TMOCKGRADE  (Table) 
--
CREATE TABLE TB_TMOCKGRADE
(
  ID               NUMBER                       NOT NULL,
  IDENTYID         VARCHAR2(20 BYTE)            NOT NULL,
  MOCKCODE         VARCHAR2(20 BYTE)            NOT NULL,
  SUBJECT_CD       VARCHAR2(20 BYTE)            NOT NULL,
  CLASSCODE        VARCHAR2(20 BYTE),
  CLASSSERIESCODE  VARCHAR2(20 BYTE),
  ORIGINGRADE      NUMBER                       DEFAULT 0,
  ADJUSTGRADE      NUMBER                       DEFAULT 0,
  REG_ID           VARCHAR2(30 BYTE),
  REG_DT           DATE,
  UPD_ID           VARCHAR2(30 BYTE),
  UPD_DT           DATE,
  ITEMID           NUMBER
);

COMMENT ON TABLE TB_TMOCKGRADE IS '모의고사성적';

COMMENT ON COLUMN TB_TMOCKGRADE.ID IS 'ID';

COMMENT ON COLUMN TB_TMOCKGRADE.IDENTYID IS '응시번호';

COMMENT ON COLUMN TB_TMOCKGRADE.MOCKCODE IS '모의고사코드';

COMMENT ON COLUMN TB_TMOCKGRADE.SUBJECT_CD IS '과목코드';

COMMENT ON COLUMN TB_TMOCKGRADE.CLASSCODE IS '직급코드';

COMMENT ON COLUMN TB_TMOCKGRADE.CLASSSERIESCODE IS '직렬코드';

COMMENT ON COLUMN TB_TMOCKGRADE.ORIGINGRADE IS '원점수';

COMMENT ON COLUMN TB_TMOCKGRADE.ADJUSTGRADE IS '조정점수';

COMMENT ON COLUMN TB_TMOCKGRADE.REG_ID IS '생성자';

COMMENT ON COLUMN TB_TMOCKGRADE.REG_DT IS '생성일시';

COMMENT ON COLUMN TB_TMOCKGRADE.UPD_ID IS '수정자';

COMMENT ON COLUMN TB_TMOCKGRADE.UPD_DT IS '수정일시';

COMMENT ON COLUMN TB_TMOCKGRADE.ITEMID IS '과목ID';



--
-- TB_TMOCKREGISTRATION  (Table) 
--
CREATE TABLE TB_TMOCKREGISTRATION
(
  ID                    NUMBER                  NOT NULL,
  MOCKCODE              VARCHAR2(20 BYTE)       NOT NULL,
  MOCKNAME              VARCHAR2(50 BYTE)       NOT NULL,
  EXAMYEAR              NUMBER                  NOT NULL,
  EXAMROUND             NUMBER                  NOT NULL,
  OFFCLOSEPERSONNUMBER  NUMBER,
  CLASSCODE             VARCHAR2(20 BYTE),
  EXAMSTARTTIME         VARCHAR2(20 BYTE),
  EXAMENDTIME           VARCHAR2(20 BYTE),
  EXAMPERIOD            NUMBER,
  EXAMTIME              NUMBER,
  RECEIPTSTARTTIME      VARCHAR2(20 BYTE),
  RECEIPTENDTIME        VARCHAR2(20 BYTE),
  EXAMCOST              NUMBER,
  DISCOUNTRATIO         NUMBER,
  SALEAMOUNTS           NUMBER,
  USEFLAG               VARCHAR2(1 BYTE),
  REG_ID                VARCHAR2(30 BYTE)       NOT NULL,
  REG_DT                DATE,
  UPD_ID                VARCHAR2(30 BYTE),
  UPD_DT                DATE,
  ISEXAMTYPEON          NUMBER,
  ISEXAMTYPEOFF         NUMBER,
  EXAMPERIODTYPE        NUMBER
);

COMMENT ON TABLE TB_TMOCKREGISTRATION IS '모의고사등록정보';

COMMENT ON COLUMN TB_TMOCKREGISTRATION.ID IS 'ID';

COMMENT ON COLUMN TB_TMOCKREGISTRATION.MOCKCODE IS '모의고사코드';

COMMENT ON COLUMN TB_TMOCKREGISTRATION.MOCKNAME IS '모의고사명';

COMMENT ON COLUMN TB_TMOCKREGISTRATION.EXAMYEAR IS '시험년도';

COMMENT ON COLUMN TB_TMOCKREGISTRATION.EXAMROUND IS '시험회차';

COMMENT ON COLUMN TB_TMOCKREGISTRATION.OFFCLOSEPERSONNUMBER IS 'OFF응시마감인원';

COMMENT ON COLUMN TB_TMOCKREGISTRATION.CLASSCODE IS '직급코드';

COMMENT ON COLUMN TB_TMOCKREGISTRATION.EXAMSTARTTIME IS '시험시작일시';

COMMENT ON COLUMN TB_TMOCKREGISTRATION.EXAMENDTIME IS '시험종료일시';

COMMENT ON COLUMN TB_TMOCKREGISTRATION.EXAMPERIOD IS '시험기간';

COMMENT ON COLUMN TB_TMOCKREGISTRATION.EXAMTIME IS '시험시간';

COMMENT ON COLUMN TB_TMOCKREGISTRATION.RECEIPTSTARTTIME IS '접수시작일시';

COMMENT ON COLUMN TB_TMOCKREGISTRATION.RECEIPTENDTIME IS '접수종료일시';

COMMENT ON COLUMN TB_TMOCKREGISTRATION.EXAMCOST IS '응시료';

COMMENT ON COLUMN TB_TMOCKREGISTRATION.DISCOUNTRATIO IS '할인율';

COMMENT ON COLUMN TB_TMOCKREGISTRATION.SALEAMOUNTS IS '판매가';

COMMENT ON COLUMN TB_TMOCKREGISTRATION.USEFLAG IS '개설여부, 0:비활성, 1:활성, 2:마감';

COMMENT ON COLUMN TB_TMOCKREGISTRATION.REG_ID IS '생성자';

COMMENT ON COLUMN TB_TMOCKREGISTRATION.REG_DT IS '생성일시';

COMMENT ON COLUMN TB_TMOCKREGISTRATION.UPD_ID IS '수정자';

COMMENT ON COLUMN TB_TMOCKREGISTRATION.UPD_DT IS '수정일시';

COMMENT ON COLUMN TB_TMOCKREGISTRATION.ISEXAMTYPEON IS '온라인응시가능여부';

COMMENT ON COLUMN TB_TMOCKREGISTRATION.ISEXAMTYPEOFF IS '오프라인응시가능여부';

COMMENT ON COLUMN TB_TMOCKREGISTRATION.EXAMPERIODTYPE IS '시험일자선택구분';



--
-- TB_TMOCKSUBJECT  (Table) 
--
CREATE TABLE TB_TMOCKSUBJECT
(
  ID                   NUMBER                   NOT NULL,
  MOCKCODE             VARCHAR2(20 BYTE)        NOT NULL,
  SUBJECT_CD           VARCHAR2(20 BYTE)        NOT NULL,
  ITEMID               NUMBER,
  SUBJECTORDER         NUMBER,
  SUBJECTTYPEDIVISION  NUMBER,
  SUBJECTPERIOD        NUMBER,
  USEFLAG              NUMBER,
  REG_ID               VARCHAR2(30 BYTE)        NOT NULL,
  REG_DT               DATE,
  UPD_ID               VARCHAR2(30 BYTE),
  UPD_DT               DATE
);

COMMENT ON TABLE TB_TMOCKSUBJECT IS '모의고사선택한 과목교시';

COMMENT ON COLUMN TB_TMOCKSUBJECT.ID IS 'ID';

COMMENT ON COLUMN TB_TMOCKSUBJECT.MOCKCODE IS '모의고사코드';

COMMENT ON COLUMN TB_TMOCKSUBJECT.SUBJECT_CD IS '과목코드';

COMMENT ON COLUMN TB_TMOCKSUBJECT.ITEMID IS '과목문제은행ID';

COMMENT ON COLUMN TB_TMOCKSUBJECT.SUBJECTORDER IS '과목 순번';

COMMENT ON COLUMN TB_TMOCKSUBJECT.SUBJECTTYPEDIVISION IS '필수선택구분 1:필수, 2: 선택';

COMMENT ON COLUMN TB_TMOCKSUBJECT.SUBJECTPERIOD IS '과목교시';

COMMENT ON COLUMN TB_TMOCKSUBJECT.USEFLAG IS '삭제여부 0:미삭제, 1:삭제';

COMMENT ON COLUMN TB_TMOCKSUBJECT.REG_ID IS '생성자';

COMMENT ON COLUMN TB_TMOCKSUBJECT.REG_DT IS '생성일시';

COMMENT ON COLUMN TB_TMOCKSUBJECT.UPD_ID IS '수정자';

COMMENT ON COLUMN TB_TMOCKSUBJECT.UPD_DT IS '수정일시';



--
-- TB_TM_ADMIN  (Table) 
--
CREATE TABLE TB_TM_ADMIN
(
  IDX         NUMBER                            NOT NULL,
  ADMINID     VARCHAR2(30 BYTE)                 NOT NULL,
  ADMINNAME   VARCHAR2(30 BYTE)                 NOT NULL,
  DELETEFLAG  VARCHAR2(1 BYTE)                  NOT NULL,
  REG_DT      DATE                              NOT NULL
);

COMMENT ON COLUMN TB_TM_ADMIN.IDX IS '자동증가인덱스';

COMMENT ON COLUMN TB_TM_ADMIN.ADMINID IS 'TM운영자ID';

COMMENT ON COLUMN TB_TM_ADMIN.ADMINNAME IS 'TM운영자이름';

COMMENT ON COLUMN TB_TM_ADMIN.DELETEFLAG IS '삭제여부(1: 삭제, 0: 미삭제)';

COMMENT ON COLUMN TB_TM_ADMIN.REG_DT IS '등록일';



--
-- TB_TM_BOARD  (Table) 
--
CREATE TABLE TB_TM_BOARD
(
  IDX          NUMBER                           NOT NULL,
  VOCCODE      VARCHAR2(20 BYTE)                NOT NULL,
  DUTYCODE     VARCHAR2(20 BYTE),
  CONTENT      VARCHAR2(4000 BYTE),
  REQUSERID    VARCHAR2(30 BYTE)                NOT NULL,
  REQUSERNAME  VARCHAR2(30 BYTE)                NOT NULL,
  REGUSERID    VARCHAR2(30 BYTE)                NOT NULL,
  REGUSERNAME  VARCHAR2(30 BYTE)                NOT NULL,
  REGDATE      DATE                             NOT NULL,
  UPDDATE      DATE
);

COMMENT ON COLUMN TB_TM_BOARD.IDX IS '자동증가인덱스';

COMMENT ON COLUMN TB_TM_BOARD.VOCCODE IS 'TM처리상태(A:통화,B:재통화,C:부재중,D:거절,E:번호오류,F:관심회원)';

COMMENT ON COLUMN TB_TM_BOARD.DUTYCODE IS '001, 999, HOME';

COMMENT ON COLUMN TB_TM_BOARD.CONTENT IS 'TM상담 내용';

COMMENT ON COLUMN TB_TM_BOARD.REQUSERID IS 'TM상담회원아이디';

COMMENT ON COLUMN TB_TM_BOARD.REQUSERNAME IS 'TM상담회원이름';

COMMENT ON COLUMN TB_TM_BOARD.REGUSERID IS 'TM상담운영자아이디';

COMMENT ON COLUMN TB_TM_BOARD.REGUSERNAME IS 'TM상담운영자이름';

COMMENT ON COLUMN TB_TM_BOARD.REGDATE IS '상담등록일';

COMMENT ON COLUMN TB_TM_BOARD.UPDDATE IS '상담수정일';



--
-- TB_TM_COUPON  (Table) 
--
CREATE TABLE TB_TM_COUPON
(
  CCODE             VARCHAR2(20 BYTE)           NOT NULL,
  CNAME             VARCHAR2(150 BYTE)          NOT NULL,
  CCONTENT          VARCHAR2(1000 BYTE),
  REGDATE           DATE                        NOT NULL,
  REGTYPE           VARCHAR2(1 BYTE)            NOT NULL,
  REGPRICE          NUMBER                      NOT NULL,
  EXPDATES          DATE,
  EXPDATEE          DATE                        NOT NULL,
  EXPDAY            NUMBER                      NOT NULL,
  TCLASS            VARCHAR2(20 BYTE)           NOT NULL,
  TCLASSCAT         NUMBER                      NOT NULL,
  PUB_COUPON_GUBUN  VARCHAR2(2 BYTE),
  TERM              VARCHAR2(2 BYTE),
  DAN_JONG          VARCHAR2(1 BYTE),
  DAN_MENU          VARCHAR2(10 BYTE),
  SUBJECT           VARCHAR2(50 BYTE),
  TEACHER           VARCHAR2(30 BYTE),
  PRICE             NUMBER,
  ADD_FLAG          VARCHAR2(1 BYTE)
);

COMMENT ON COLUMN TB_TM_COUPON.CCODE IS '쿠폰코드';

COMMENT ON COLUMN TB_TM_COUPON.CNAME IS '쿠폰이름';

COMMENT ON COLUMN TB_TM_COUPON.CCONTENT IS '쿠폰내용';

COMMENT ON COLUMN TB_TM_COUPON.REGDATE IS '쿠폰등록일';

COMMENT ON COLUMN TB_TM_COUPON.REGTYPE IS '쿠폰등록타입 (C:쿠폰, P:포인트)';

COMMENT ON COLUMN TB_TM_COUPON.REGPRICE IS '쿠폰등록가격';

COMMENT ON COLUMN TB_TM_COUPON.EXPDATES IS '쿠폰사용시작일';

COMMENT ON COLUMN TB_TM_COUPON.EXPDATEE IS '쿠폰사용종료일';

COMMENT ON COLUMN TB_TM_COUPON.EXPDAY IS '쿠폰사용기간(일)';

COMMENT ON COLUMN TB_TM_COUPON.TERM IS '쿠폰사용제한 (A: 제한없음, NA: 제한있음)';

COMMENT ON COLUMN TB_TM_COUPON.DAN_JONG IS '단과종합반확인코드 (D:단과, J:종합반)';

COMMENT ON COLUMN TB_TM_COUPON.DAN_MENU IS '단과종류코드 (이론,문제,특강)';

COMMENT ON COLUMN TB_TM_COUPON.SUBJECT IS '과목코드';

COMMENT ON COLUMN TB_TM_COUPON.TEACHER IS '강사코드';

COMMENT ON COLUMN TB_TM_COUPON.PRICE IS '강의가격';

COMMENT ON COLUMN TB_TM_COUPON.ADD_FLAG IS '온라인,모의고사';



--
-- TB_TM_MYCOUPON  (Table) 
--
CREATE TABLE TB_TM_MYCOUPON
(
  IDX        NUMBER                             NOT NULL,
  CCODE      VARCHAR2(20 BYTE)                  NOT NULL,
  USERID     VARCHAR2(30 BYTE)                  NOT NULL,
  REGDATE    DATE                               NOT NULL,
  EXPDATES   DATE                               NOT NULL,
  EXPDATEE   DATE                               NOT NULL,
  ORDERNO    VARCHAR2(20 BYTE),
  ORDERDATE  DATE,
  ORDERFLAG  VARCHAR2(1 BYTE)                   NOT NULL,
  REG_ID     VARCHAR2(20 BYTE),
  EVENT_NO   NUMBER
);

COMMENT ON COLUMN TB_TM_MYCOUPON.IDX IS '자동증가(1씩)';

COMMENT ON COLUMN TB_TM_MYCOUPON.CCODE IS '쿠폰코드';

COMMENT ON COLUMN TB_TM_MYCOUPON.USERID IS '사용자ID';

COMMENT ON COLUMN TB_TM_MYCOUPON.REGDATE IS '쿠폰등록일';

COMMENT ON COLUMN TB_TM_MYCOUPON.EXPDATES IS '쿠폰사용시작일';

COMMENT ON COLUMN TB_TM_MYCOUPON.EXPDATEE IS '쿠폰사용종료일';

COMMENT ON COLUMN TB_TM_MYCOUPON.ORDERNO IS '상품주문번호';

COMMENT ON COLUMN TB_TM_MYCOUPON.ORDERDATE IS '상품결제일';

COMMENT ON COLUMN TB_TM_MYCOUPON.ORDERFLAG IS '상품구매 여부(0:안함, 1:구매사용함, 2:관리자삭제)';

COMMENT ON COLUMN TB_TM_MYCOUPON.REG_ID IS '쿠폰 등록자';

COMMENT ON COLUMN TB_TM_MYCOUPON.EVENT_NO IS '쿠폰발행 이벤트';



--
-- TB_TM_USERS  (Table) 
--
CREATE TABLE TB_TM_USERS
(
  IDX             NUMBER                        NOT NULL,
  USERID          VARCHAR2(30 BYTE)             NOT NULL,
  USERNAME        VARCHAR2(30 BYTE)             NOT NULL,
  TEL             VARCHAR2(20 BYTE),
  PHONE           VARCHAR2(20 BYTE),
  EMAIL           VARCHAR2(50 BYTE),
  ADMUSERID       VARCHAR2(30 BYTE),
  ADMUSERNAME     VARCHAR2(20 BYTE),
  ALLOCDATE       DATE,
  USERTYPE        VARCHAR2(1 BYTE)              NOT NULL,
  ORIADMUSERID    VARCHAR2(30 BYTE),
  ORIADMUSERNAME  VARCHAR2(30 BYTE),
  ORIALLOCDATE    DATE,
  ORIUSERTYPE     VARCHAR2(1 BYTE),
  ALLOCADMIN      VARCHAR2(30 BYTE),
  DBSOUACE        VARCHAR2(20 BYTE),
  IDX_TMBOARD     NUMBER
);

COMMENT ON COLUMN TB_TM_USERS.IDX IS '자동증가(1씩)';

COMMENT ON COLUMN TB_TM_USERS.USERID IS '사용자 ID';

COMMENT ON COLUMN TB_TM_USERS.USERNAME IS '사용자 이름';

COMMENT ON COLUMN TB_TM_USERS.TEL IS '전화번호';

COMMENT ON COLUMN TB_TM_USERS.PHONE IS '회원핸드폰';

COMMENT ON COLUMN TB_TM_USERS.EMAIL IS '이메일';

COMMENT ON COLUMN TB_TM_USERS.ADMUSERID IS '배정된운영자ID';

COMMENT ON COLUMN TB_TM_USERS.ADMUSERNAME IS '배정된운영자이름';

COMMENT ON COLUMN TB_TM_USERS.ALLOCDATE IS '배정일';

COMMENT ON COLUMN TB_TM_USERS.USERTYPE IS '배정타입구분(A:신규, B:재수강,C:장바구니,D:부재)';

COMMENT ON COLUMN TB_TM_USERS.ORIADMUSERID IS '기존 배정된운영자ID';

COMMENT ON COLUMN TB_TM_USERS.ORIADMUSERNAME IS '기존 배정된운영자이름';

COMMENT ON COLUMN TB_TM_USERS.ORIALLOCDATE IS '기존배정일';

COMMENT ON COLUMN TB_TM_USERS.ORIUSERTYPE IS '기존 사용자 타입';

COMMENT ON COLUMN TB_TM_USERS.ALLOCADMIN IS '배정한관리자ID';

COMMENT ON COLUMN TB_TM_USERS.DBSOUACE IS 'TM회원의 출처(사이트)';

COMMENT ON COLUMN TB_TM_USERS.IDX_TMBOARD IS 'TMBOARD의 IDX값-중복할당 방지용';



--
-- TB_TOP_MST  (Table) 
--
CREATE TABLE TB_TOP_MST
(
  SEQ                       NUMBER              NOT NULL,
  MSTCODE                   VARCHAR2(30 BYTE)   NOT NULL,
  SUBJECT_TEACHER           VARCHAR2(30 BYTE),
  SUBJECT_TITLE             VARCHAR2(1000 BYTE),
  SUBJECT_SJT_CD            VARCHAR2(50 BYTE),
  SUBJECT_DESC              CLOB,
  SUBJECT_MEMO              CLOB,
  SUBJECT_PERIOD            NUMBER,
  LEC_SCHEDULE              VARCHAR2(50 BYTE),
  SUBJECT_OFF_OPEN_YEAR     VARCHAR2(4 BYTE),
  SUBJECT_OFF_OPEN_MONTH    VARCHAR2(2 BYTE),
  SUBJECT_OFF_OPEN_DAY      VARCHAR2(2 BYTE),
  SUBJECT_PRICE             NUMBER,
  SUBJECT_OPTION            VARCHAR2(1000 BYTE),
  SUBJECT_VOD_DEFAULT_PATH  VARCHAR2(800 BYTE),
  SUBJECT_MP4_DEFAULT_PATH  VARCHAR2(800 BYTE),
  SUBJECT_PMP_DEFAULT_PATH  VARCHAR2(800 BYTE),
  MST_USE_YN                VARCHAR2(1 BYTE),
  REG_DT                    DATE,
  REG_ID                    VARCHAR2(30 BYTE),
  UPD_DT                    DATE,
  UPD_ID                    VARCHAR2(30 BYTE)
);

COMMENT ON COLUMN TB_TOP_MST.SEQ IS 'SEQ';

COMMENT ON COLUMN TB_TOP_MST.MSTCODE IS '강의코드';

COMMENT ON COLUMN TB_TOP_MST.SUBJECT_TEACHER IS '교수아이디';

COMMENT ON COLUMN TB_TOP_MST.SUBJECT_TITLE IS '강의명';

COMMENT ON COLUMN TB_TOP_MST.SUBJECT_SJT_CD IS '교수과목';

COMMENT ON COLUMN TB_TOP_MST.SUBJECT_DESC IS '강의상세설명';

COMMENT ON COLUMN TB_TOP_MST.SUBJECT_MEMO IS '강의요약';

COMMENT ON COLUMN TB_TOP_MST.SUBJECT_PERIOD IS '강의기간';

COMMENT ON COLUMN TB_TOP_MST.SUBJECT_OFF_OPEN_YEAR IS '기간(년)';

COMMENT ON COLUMN TB_TOP_MST.SUBJECT_OFF_OPEN_MONTH IS '기간(월)';

COMMENT ON COLUMN TB_TOP_MST.SUBJECT_OFF_OPEN_DAY IS '기간(일)';

COMMENT ON COLUMN TB_TOP_MST.SUBJECT_PRICE IS '원가';

COMMENT ON COLUMN TB_TOP_MST.SUBJECT_OPTION IS '옵션';

COMMENT ON COLUMN TB_TOP_MST.SUBJECT_VOD_DEFAULT_PATH IS '동영상 기본 정보';

COMMENT ON COLUMN TB_TOP_MST.SUBJECT_MP4_DEFAULT_PATH IS 'MP4기본경로';

COMMENT ON COLUMN TB_TOP_MST.SUBJECT_PMP_DEFAULT_PATH IS 'PMP기본경로 ';

COMMENT ON COLUMN TB_TOP_MST.MST_USE_YN IS '사용여부';

COMMENT ON COLUMN TB_TOP_MST.REG_DT IS '등록일';

COMMENT ON COLUMN TB_TOP_MST.REG_ID IS '등록자 아이디';

COMMENT ON COLUMN TB_TOP_MST.UPD_DT IS '수정일';

COMMENT ON COLUMN TB_TOP_MST.UPD_ID IS '수정자 아이디';



--
-- TB_TORDERS  (Table) 
--
CREATE TABLE TB_TORDERS
(
  ID                   NUMBER                   NOT NULL,
  ORDERNO              VARCHAR2(20 BYTE)        NOT NULL,
  IDENTYID             VARCHAR2(20 BYTE)        NOT NULL,
  EXAMCODE             VARCHAR2(20 BYTE)        NOT NULL,
  USER_ID              VARCHAR2(30 BYTE),
  USER_NM              VARCHAR2(50 BYTE)        NOT NULL,
  PHONE_NO             VARCHAR2(15 BYTE)        NOT NULL,
  RECEIPTTYPE          NUMBER                   NOT NULL,
  EXAMTYPE             NUMBER,
  CLASSCODE            VARCHAR2(20 BYTE),
  CLASSSERIESCODE      VARCHAR2(20 BYTE),
  ADDPOINT1            NUMBER,
  ADDPOINT2            NUMBER,
  ADDPOINT3            NUMBER,
  PRINTFLAG            NUMBER                   DEFAULT 0,
  PRINTUSER            VARCHAR2(20 BYTE),
  PRINTTIME            DATE,
  NOTE                 VARCHAR2(500 BYTE),
  PAYMENTTARGETAMOUNT  NUMBER,
  ADDDISCOUNTRATIO     NUMBER,
  ADDDISCOUNTAMOUNT    NUMBER,
  ADDDISCOUNTREASON    VARCHAR2(100 BYTE),
  PAYMENTDUEDATE       VARCHAR2(20 BYTE),
  PAYMENTSTATE         NUMBER,
  EXAMSTATUS           NUMBER,
  EXAMSTARTTIME        DATE,
  EXAMENDTIME          DATE,
  EXAMSPARETIME        NUMBER,
  EXAMIP               VARCHAR2(20 BYTE),
  REG_ID               VARCHAR2(30 BYTE)        NOT NULL,
  REG_DT               DATE                     NOT NULL,
  UPD_ID               VARCHAR2(30 BYTE),
  UPD_DT               DATE
);

COMMENT ON TABLE TB_TORDERS IS '신청자(응시자)관리';

COMMENT ON COLUMN TB_TORDERS.ID IS 'ID';

COMMENT ON COLUMN TB_TORDERS.ORDERNO IS '주문번호';

COMMENT ON COLUMN TB_TORDERS.IDENTYID IS '응시번호';

COMMENT ON COLUMN TB_TORDERS.EXAMCODE IS '모의고사코드';

COMMENT ON COLUMN TB_TORDERS.USER_ID IS '사용자ID';

COMMENT ON COLUMN TB_TORDERS.USER_NM IS '사용자명';

COMMENT ON COLUMN TB_TORDERS.PHONE_NO IS '전화번호';

COMMENT ON COLUMN TB_TORDERS.RECEIPTTYPE IS '신청접수구분, 0:온라인접수, 1:방문접수, 2:데스크접수';

COMMENT ON COLUMN TB_TORDERS.EXAMTYPE IS '응시형태, 0:온라인, 1:오프라인';

COMMENT ON COLUMN TB_TORDERS.CLASSCODE IS '응시직급코드';

COMMENT ON COLUMN TB_TORDERS.CLASSSERIESCODE IS '응시직렬코드';

COMMENT ON COLUMN TB_TORDERS.ADDPOINT1 IS '취업보호대상가산점';

COMMENT ON COLUMN TB_TORDERS.ADDPOINT2 IS '공통적용자격증가산점';

COMMENT ON COLUMN TB_TORDERS.ADDPOINT3 IS '직렬별적용자격증가산점';

COMMENT ON COLUMN TB_TORDERS.PRINTFLAG IS '응시표출력여부, 0:미출력, 1:출력';

COMMENT ON COLUMN TB_TORDERS.PRINTUSER IS '응시표출력관리자ID';

COMMENT ON COLUMN TB_TORDERS.PRINTTIME IS '응시표출력시간';

COMMENT ON COLUMN TB_TORDERS.NOTE IS '비고';

COMMENT ON COLUMN TB_TORDERS.PAYMENTTARGETAMOUNT IS '결제대상금액';

COMMENT ON COLUMN TB_TORDERS.ADDDISCOUNTRATIO IS '추가할인비율';

COMMENT ON COLUMN TB_TORDERS.ADDDISCOUNTAMOUNT IS '추가할인정액';

COMMENT ON COLUMN TB_TORDERS.ADDDISCOUNTREASON IS '할인사유';

COMMENT ON COLUMN TB_TORDERS.PAYMENTDUEDATE IS '결제완료예정일자';

COMMENT ON COLUMN TB_TORDERS.PAYMENTSTATE IS '결제상태, 0:대기중, 1:결제완료, 2:환불완료, 3:취소완료';

COMMENT ON COLUMN TB_TORDERS.EXAMSTATUS IS '응시상태(0:응시전,1:응시중,2:임시저장,3:제출완료)';

COMMENT ON COLUMN TB_TORDERS.EXAMSTARTTIME IS '응시시작일시';

COMMENT ON COLUMN TB_TORDERS.EXAMENDTIME IS '응시종료일시';

COMMENT ON COLUMN TB_TORDERS.EXAMSPARETIME IS '남은응시시간(초)';

COMMENT ON COLUMN TB_TORDERS.EXAMIP IS '응시자IP';

COMMENT ON COLUMN TB_TORDERS.REG_ID IS '생성자';

COMMENT ON COLUMN TB_TORDERS.REG_DT IS '생성일자';

COMMENT ON COLUMN TB_TORDERS.UPD_ID IS '수정자';

COMMENT ON COLUMN TB_TORDERS.UPD_DT IS '수정일자';



--
-- TB_TSUBJECTAREA  (Table) 
--
CREATE TABLE TB_TSUBJECTAREA
(
  ID           NUMBER                           NOT NULL,
  SUBJECT_CD   VARCHAR2(20 BYTE)                NOT NULL,
  SUBJECTAREA  VARCHAR2(80 BYTE)                NOT NULL,
  AREAORDER    NUMBER                           NOT NULL,
  USEFLAG      NUMBER                           NOT NULL,
  REG_ID       VARCHAR2(30 BYTE),
  REG_DT       VARCHAR2(20 BYTE),
  UPD_ID       VARCHAR2(30 BYTE),
  UPD_DT       VARCHAR2(20 BYTE)
);

COMMENT ON TABLE TB_TSUBJECTAREA IS '과목영역';

COMMENT ON COLUMN TB_TSUBJECTAREA.ID IS '시퀀스ID';

COMMENT ON COLUMN TB_TSUBJECTAREA.SUBJECT_CD IS '과목코드';

COMMENT ON COLUMN TB_TSUBJECTAREA.SUBJECTAREA IS '과목영역';

COMMENT ON COLUMN TB_TSUBJECTAREA.AREAORDER IS '영역순번';

COMMENT ON COLUMN TB_TSUBJECTAREA.USEFLAG IS '활성여부,0:활성,1:비활성';

COMMENT ON COLUMN TB_TSUBJECTAREA.REG_ID IS '생성자';

COMMENT ON COLUMN TB_TSUBJECTAREA.REG_DT IS '생성일시';

COMMENT ON COLUMN TB_TSUBJECTAREA.UPD_ID IS '수정자';

COMMENT ON COLUMN TB_TSUBJECTAREA.UPD_DT IS '수정일시';



--
-- TB_TUSERCHOICESUBJECT  (Table) 
--
CREATE TABLE TB_TUSERCHOICESUBJECT
(
  ID                   NUMBER                   NOT NULL,
  ITEMID               NUMBER                   NOT NULL,
  ORDERNO              VARCHAR2(20 BYTE)        NOT NULL,
  IDENTYID             VARCHAR2(20 BYTE)        NOT NULL,
  REG_ID               VARCHAR2(30 BYTE)        NOT NULL,
  REG_DT               DATE                     NOT NULL,
  UPD_ID               VARCHAR2(30 BYTE),
  UPD_DT               DATE,
  EXAMSTATUS           NUMBER,
  SUBJECTORDER         NUMBER,
  SUBJECTTYPEDIVISION  NUMBER,
  EXAMSSTARTTIME       DATE
);

COMMENT ON TABLE TB_TUSERCHOICESUBJECT IS '응시자선택과목 선택정보';

COMMENT ON COLUMN TB_TUSERCHOICESUBJECT.ID IS 'ID';

COMMENT ON COLUMN TB_TUSERCHOICESUBJECT.ITEMID IS '선택과목문제은행ID';

COMMENT ON COLUMN TB_TUSERCHOICESUBJECT.ORDERNO IS '주문번호';

COMMENT ON COLUMN TB_TUSERCHOICESUBJECT.IDENTYID IS '응시번호';

COMMENT ON COLUMN TB_TUSERCHOICESUBJECT.REG_ID IS '생성자';

COMMENT ON COLUMN TB_TUSERCHOICESUBJECT.REG_DT IS '생성일시';

COMMENT ON COLUMN TB_TUSERCHOICESUBJECT.UPD_ID IS '수정자';

COMMENT ON COLUMN TB_TUSERCHOICESUBJECT.UPD_DT IS '수정일시';

COMMENT ON COLUMN TB_TUSERCHOICESUBJECT.EXAMSTATUS IS '과목응시상태(0:응시전,1:응시중,2:임시저장,3:응시완료)';

COMMENT ON COLUMN TB_TUSERCHOICESUBJECT.SUBJECTORDER IS '과목 순번';

COMMENT ON COLUMN TB_TUSERCHOICESUBJECT.SUBJECTTYPEDIVISION IS '필수/선택구분';

COMMENT ON COLUMN TB_TUSERCHOICESUBJECT.EXAMSSTARTTIME IS '과목응시시작일';



--
-- TB_TWRONGANSWERNOTE  (Table) 
--
CREATE TABLE TB_TWRONGANSWERNOTE
(
  ID              NUMBER                        NOT NULL,
  IDENTYID        VARCHAR2(20 BYTE)             NOT NULL,
  ITEMID          NUMBER                        NOT NULL,
  QUESTIONNUMBER  NUMBER                        NOT NULL,
  NOTE            VARCHAR2(500 BYTE),
  REG_ID          VARCHAR2(30 BYTE)             NOT NULL,
  REG_DT          DATE                          NOT NULL,
  UPD_ID          VARCHAR2(30 BYTE),
  UPD_DT          DATE,
  MOCKCODE        VARCHAR2(20 BYTE)             NOT NULL
);

COMMENT ON TABLE TB_TWRONGANSWERNOTE IS '오답노트';

COMMENT ON COLUMN TB_TWRONGANSWERNOTE.ID IS 'ID';

COMMENT ON COLUMN TB_TWRONGANSWERNOTE.IDENTYID IS '응시번호';

COMMENT ON COLUMN TB_TWRONGANSWERNOTE.ITEMID IS '문제은행구분번호';

COMMENT ON COLUMN TB_TWRONGANSWERNOTE.QUESTIONNUMBER IS '문제번호';

COMMENT ON COLUMN TB_TWRONGANSWERNOTE.NOTE IS '내용';

COMMENT ON COLUMN TB_TWRONGANSWERNOTE.REG_ID IS '생성자';

COMMENT ON COLUMN TB_TWRONGANSWERNOTE.REG_DT IS '생성일시';

COMMENT ON COLUMN TB_TWRONGANSWERNOTE.UPD_ID IS '수정자';

COMMENT ON COLUMN TB_TWRONGANSWERNOTE.UPD_DT IS '수정일시';

COMMENT ON COLUMN TB_TWRONGANSWERNOTE.MOCKCODE IS '모의고사코드';



--
-- TB_ZIPCODE  (Table) 
--
CREATE TABLE TB_ZIPCODE
(
  ZIPCD  VARCHAR2(7 BYTE)                       NOT NULL,
  SIDO   VARCHAR2(500 BYTE),
  GUGUN  VARCHAR2(500 BYTE),
  DONG   VARCHAR2(500 BYTE),
  RI     VARCHAR2(500 BYTE),
  DO     VARCHAR2(100 BYTE),
  BUNJI  VARCHAR2(500 BYTE),
  JUSO   VARCHAR2(500 BYTE)
);


--
-- TB_ZIPCODE_NEW  (Table) 
--
CREATE TABLE TB_ZIPCODE_NEW
(
  ZIPCD  VARCHAR2(7 BYTE)                       NOT NULL,
  SIDO   VARCHAR2(500 BYTE),
  GUGUN  VARCHAR2(500 BYTE),
  DONG   VARCHAR2(500 BYTE),
  RI     VARCHAR2(500 BYTE),
  DO     VARCHAR2(500 BYTE),
  BUNJI  VARCHAR2(500 BYTE),
  JUSO   VARCHAR2(500 BYTE)
);


--
-- TM_DEVICE_HISTORY  (Table) 
--
CREATE TABLE TM_DEVICE_HISTORY
(
  USER_ID           VARCHAR2(30 BYTE),
  DEVICE_ID         VARCHAR2(200 BYTE),
  DEVICE_GUBUN      VARCHAR2(200 BYTE),
  PC_USEYN          VARCHAR2(1 BYTE),
  PC_REG_DT         DATE,
  PC_CANCEL_DT      DATE,
  DEVICE_DESC       VARCHAR2(4000 BYTE),
  ADMIN_ID          VARCHAR2(30 BYTE),
  SEQ               NUMBER,
  MOBILE_USEYN      VARCHAR2(1 BYTE),
  MOBILE_CANCEL_DT  DATE,
  MOBILE_REG_DT     DATE
);

COMMENT ON COLUMN TM_DEVICE_HISTORY.USER_ID IS '사용자아이디';

COMMENT ON COLUMN TM_DEVICE_HISTORY.DEVICE_ID IS '맥어드레스및 모바일 장비 번호';

COMMENT ON COLUMN TM_DEVICE_HISTORY.DEVICE_GUBUN IS 'PC, MOBILE구분';

COMMENT ON COLUMN TM_DEVICE_HISTORY.PC_USEYN IS '사용여부';

COMMENT ON COLUMN TM_DEVICE_HISTORY.PC_REG_DT IS '등록일';

COMMENT ON COLUMN TM_DEVICE_HISTORY.PC_CANCEL_DT IS '취소일';

COMMENT ON COLUMN TM_DEVICE_HISTORY.DEVICE_DESC IS '해제사유';



--
-- TM_IST  (Table) 
--
CREATE TABLE TM_IST
(
  ID    VARCHAR2(20 BYTE)                       NOT NULL,
  NAME  VARCHAR2(20 BYTE)                       NOT NULL,
  HP    VARCHAR2(20 BYTE)                       NOT NULL
);


--
-- "off_user"  (Table) 
--
CREATE TABLE "off_user"
(
  "users_group_code"    NUMBER(29),
  "userId"              VARCHAR2(20 BYTE),
  "userpass"            VARCHAR2(20 BYTE),
  "userName"            VARCHAR2(50 BYTE),
  "jumin1"              VARCHAR2(6 BYTE),
  "jumin2"              VARCHAR2(7 BYTE),
  "sexCode"             VARCHAR2(6 BYTE),
  "passHintQCode"       VARCHAR2(6 BYTE),
  "passHintAnswer"      VARCHAR2(200 BYTE),
  "birthDay"            VARCHAR2(8 BYTE),
  "email"               VARCHAR2(50 BYTE),
  "homeUrl"             VARCHAR2(100 BYTE),
  "zipcd"               VARCHAR2(6 BYTE),
  "addr"                VARCHAR2(200 BYTE),
  "addr2"               VARCHAR2(100 BYTE),
  "telno"               VARCHAR2(15 BYTE),
  "cellno"              VARCHAR2(15 BYTE),
  "telno1"              VARCHAR2(10 BYTE),
  "telno2"              VARCHAR2(10 BYTE),
  "telno3"              VARCHAR2(10 BYTE),
  "cellno1"             VARCHAR2(10 BYTE),
  "cellno2"             VARCHAR2(10 BYTE),
  "cellno3"             VARCHAR2(10 BYTE),
  "regDate"             DATE,
  "point"               NUMBER(29),
  "mailling_yn"         VARCHAR2(1 BYTE),
  "favorites"           VARCHAR2(200 BYTE),
  "path_history"        VARCHAR2(200 BYTE),
  "memo"                CLOB,
  "relation"            NUMBER(29),
  "oldid_hl"            VARCHAR2(20 BYTE),
  "oldid_gosimain"      VARCHAR2(20 BYTE),
  "oldid_passhaja"      VARCHAR2(20 BYTE),
  "oldid_bookgosimain"  VARCHAR2(20 BYTE),
  "id_url"              VARCHAR2(200 BYTE),
  "user_ip"             VARCHAR2(15 BYTE),
  "userRegType"         VARCHAR2(1 BYTE),
  "ipinDI"              VARCHAR2(64 BYTE),
  "pub_code"            VARCHAR2(50 BYTE)
);


--
-- "on_user"  (Table) 
--
CREATE TABLE "on_user"
(
  USER_ID        VARCHAR2(30 BYTE)              NOT NULL,
  USER_NM        VARCHAR2(50 BYTE),
  USER_NICKNM    VARCHAR2(50 BYTE),
  USER_POSITION  VARCHAR2(100 BYTE),
  SEX            VARCHAR2(1 BYTE),
  USER_ROLE      VARCHAR2(4 BYTE),
  ADMIN_ROLE     VARCHAR2(1 BYTE),
  USER_PWD       VARCHAR2(20 BYTE),
  BIRTH_DAY      VARCHAR2(8 BYTE),
  EMAIL          VARCHAR2(50 BYTE),
  PHONE_NO       VARCHAR2(20 BYTE),
  TEL_NO         VARCHAR2(20 BYTE),
  ZIP_CODE       VARCHAR2(7 BYTE),
  ADDRESS1       VARCHAR2(150 BYTE),
  ADDRESS2       VARCHAR2(150 BYTE),
  CATEGORY_CODE  VARCHAR2(10 BYTE),
  USER_POINT     VARCHAR2(1000 BYTE),
  IPINDI         VARCHAR2(64 BYTE),
  ISUSE          VARCHAR2(1 BYTE),
  REG_DT         DATE,
  UPD_DT         DATE,
  REMARK         VARCHAR2(1000 BYTE),
  MEMO           VARCHAR2(8 BYTE)
);


--
-- TB_LEC_MST_LECCODE  (Index) 
--
CREATE INDEX TB_LEC_MST_LECCODE ON TB_LEC_MST
(LECCODE);


--
-- TB_OFF_CC_CART_PK  (Index) 
--
CREATE UNIQUE INDEX TB_OFF_CC_CART_PK ON TB_OFF_CC_CART
(SEQ);


--
-- TB_OFF_CC_J_CART_PK  (Index) 
--
CREATE UNIQUE INDEX TB_OFF_CC_J_CART_PK ON TB_OFF_CC_J_CART
(SEQ);


--
-- TB_MA_MEMBER_SERIES_PK  (Index) 
--
CREATE UNIQUE INDEX TB_MA_MEMBER_SERIES_PK ON TB_MA_MEMBER_SERIES
(USER_ID, SERIES_CD);


--
-- TB_MA_MEMBER_SERIES_IDX01  (Index) 
--
CREATE INDEX TB_MA_MEMBER_SERIES_IDX01 ON TB_MA_MEMBER_SERIES
(SERIES_CD, SEQ);


--
-- TB_MA_MEMBER_SERIES_IDX02  (Index) 
--
CREATE INDEX TB_MA_MEMBER_SERIES_IDX02 ON TB_MA_MEMBER_SERIES
(SERIES_CD, OFF_SEQ);


--
-- PK_TB_SG_MENU_MST  (Index) 
--
CREATE UNIQUE INDEX PK_TB_SG_MENU_MST ON TB_SG_MENU_MST
(MENU_ID);


--
-- GOSI_RST_SBJ_PK  (Index) 
--
CREATE UNIQUE INDEX GOSI_RST_SBJ_PK ON GOSI_RST_SBJ
(GOSI_CD, RST_NO, SUBJECT_CD);


--
-- SC_TRAN_IDX3  (Index) 
--
CREATE INDEX SC_TRAN_IDX3 ON SC_TRAN
(TR_SENDSTAT);


--
-- TB_BOARD_IDX01  (Index) 
--
CREATE INDEX TB_BOARD_IDX01 ON TB_BOARD
(BOARD_SEQ);


--
-- TB_BOARD_IDX02  (Index) 
--
CREATE INDEX TB_BOARD_IDX02 ON TB_BOARD
(BOARD_MNG_SEQ, BOARD_SEQ);


--
-- TB_BOARD_IDX03  (Index) 
--
CREATE INDEX TB_BOARD_IDX03 ON TB_BOARD
(BOARD_MNG_SEQ, PARENT_BOARD_SEQ, BOARD_SEQ);


--
-- TB_BOARD_COMMENT_IDX01  (Index) 
--
CREATE INDEX TB_BOARD_COMMENT_IDX01 ON TB_BOARD_COMMENT
(SEQ, BOARD_MNG_SEQ, BOARD_SEQ);


--
-- TB_BOARD_COMMENT_IDX02  (Index) 
--
CREATE INDEX TB_BOARD_COMMENT_IDX02 ON TB_BOARD_COMMENT
(SEQ, BOARD_MNG_SEQ);


--
-- TB_BOARD_COMMENT_PK  (Index) 
--
CREATE UNIQUE INDEX TB_BOARD_COMMENT_PK ON TB_BOARD_COMMENT
(SEQ);


--
-- TB_TMOCKGRADE_GRP_IDX  (Index) 
--
CREATE INDEX TB_TMOCKGRADE_GRP_IDX ON TB_TMOCKGRADE
(MOCKCODE, IDENTYID);


--
-- TB_TMOCKGRADE_PK  (Index) 
--
CREATE UNIQUE INDEX TB_TMOCKGRADE_PK ON TB_TMOCKGRADE
(ID, IDENTYID, MOCKCODE, SUBJECT_CD);


--
-- TB_TMOCKGRADE_GRP_IDX2  (Index) 
--
CREATE INDEX TB_TMOCKGRADE_GRP_IDX2 ON TB_TMOCKGRADE
(MOCKCODE, IDENTYID, SUBJECT_CD);


--
-- TB_TMOCKREGISTRATION_PK  (Index) 
--
CREATE UNIQUE INDEX TB_TMOCKREGISTRATION_PK ON TB_TMOCKREGISTRATION
(ID, MOCKCODE);


--
-- TB_TMOCKSUBJECT_PK  (Index) 
--
CREATE UNIQUE INDEX TB_TMOCKSUBJECT_PK ON TB_TMOCKSUBJECT
(ID);


--
-- TB_TM_MYCOUPON_PK  (Index) 
--
CREATE UNIQUE INDEX TB_TM_MYCOUPON_PK ON TB_TM_MYCOUPON
(IDX);


--
-- TB_TOP_MST_LECCODE  (Index) 
--
CREATE INDEX TB_TOP_MST_LECCODE ON TB_TOP_MST
(MSTCODE);


--
-- TB_TSORDERS_PK  (Index) 
--
CREATE UNIQUE INDEX TB_TSORDERS_PK ON TB_TORDERS
(ID);


--
-- TB_TSORDERS_IDX01  (Index) 
--
CREATE INDEX TB_TSORDERS_IDX01 ON TB_TORDERS
(ID, ORDERNO);


--
-- TB_TSORDERS_IDX02  (Index) 
--
CREATE INDEX TB_TSORDERS_IDX02 ON TB_TORDERS
(ID, ORDERNO, IDENTYID);


--
-- TB_TSUBJECTAREA_PK  (Index) 
--
CREATE UNIQUE INDEX TB_TSUBJECTAREA_PK ON TB_TSUBJECTAREA
(ID);


--
-- COOP_COUPON_MST_PK  (Index) 
--
CREATE UNIQUE INDEX COOP_COUPON_MST_PK ON COOP_COUPON_MST
(COOP_CD, LECCODE);


--
-- COOP_MST_PK  (Index) 
--
CREATE UNIQUE INDEX COOP_MST_PK ON COOP_MST
(COOP_CD);


--
-- GOSI_AREA_PK  (Index) 
--
CREATE UNIQUE INDEX GOSI_AREA_PK ON GOSI_AREA_MST
(GOSI_TYPE, GOSI_AREA);


--
-- GOSI_CD_PK  (Index) 
--
CREATE UNIQUE INDEX GOSI_CD_PK ON GOSI_COD
(GOSI_TYPE);


--
-- GOSI_MST_PK  (Index) 
--
CREATE UNIQUE INDEX GOSI_MST_PK ON GOSI_MST
(GOSI_CD);


--
-- GOSI_RST_MST_PK  (Index) 
--
CREATE UNIQUE INDEX GOSI_RST_MST_PK ON GOSI_RST_MST
(GOSI_CD, RST_NO);


--
-- TB_TUSERCHOICESUBJECT_IDX  (Index) 
--
CREATE UNIQUE INDEX TB_TUSERCHOICESUBJECT_IDX ON TB_TUSERCHOICESUBJECT
(ID, IDENTYID, ITEMID, ORDERNO);


--
-- TB_TUSERCHOICESUBJECT_PK  (Index) 
--
CREATE UNIQUE INDEX TB_TUSERCHOICESUBJECT_PK ON TB_TUSERCHOICESUBJECT
(ID);


--
-- TB_TUSERCHOICESUBJECT_SODR_IDX  (Index) 
--
CREATE INDEX TB_TUSERCHOICESUBJECT_SODR_IDX ON TB_TUSERCHOICESUBJECT
(SUBJECTORDER);


--
-- TB_TUSERCHOICESUBJECT_IDX03  (Index) 
--
CREATE INDEX TB_TUSERCHOICESUBJECT_IDX03 ON TB_TUSERCHOICESUBJECT
(IDENTYID, ORDERNO);


--
-- TB_TUSERCHOICESUBJECT_IDX02  (Index) 
--
CREATE INDEX TB_TUSERCHOICESUBJECT_IDX02 ON TB_TUSERCHOICESUBJECT
(ITEMID);


--
-- TB_TWRONGANSWERNOTE_PK  (Index) 
--
CREATE UNIQUE INDEX TB_TWRONGANSWERNOTE_PK ON TB_TWRONGANSWERNOTE
(ID, IDENTYID, ITEMID, QUESTIONNUMBER);


--
-- TB_TWRONGANSWERNOTE_IDX  (Index) 
--
CREATE UNIQUE INDEX TB_TWRONGANSWERNOTE_IDX ON TB_TWRONGANSWERNOTE
(ID, IDENTYID, QUESTIONNUMBER, ITEMID, MOCKCODE);


--
-- GOSI_SUBJECT_PK  (Index) 
--
CREATE UNIQUE INDEX GOSI_SUBJECT_PK ON GOSI_SUBJECT
(GOSI_TYPE, GOSI_SUBJECT_CD);


--
-- PK_SC_TRAN  (Index) 
--
CREATE UNIQUE INDEX PK_SC_TRAN ON SC_TRAN
(TR_NUM);


--
-- SC_TRAN_IDX1  (Index) 
--
CREATE INDEX SC_TRAN_IDX1 ON SC_TRAN
(TR_SENDDATE, TR_SENDSTAT);


--
-- SC_TRAN_IDX2  (Index) 
--
CREATE INDEX SC_TRAN_IDX2 ON SC_TRAN
(TR_PHONE);


--
-- TB_BANNER_ITEM_PK  (Index) 
--
CREATE UNIQUE INDEX TB_BANNER_ITEM_PK ON TB_BANNER_ITEM
(SEQ);


--
-- TB_BANNER_ITEM_IDX01  (Index) 
--
CREATE INDEX TB_BANNER_ITEM_IDX01 ON TB_BANNER_ITEM
(SEQ, P_SEQ);


--
-- TB_BOARD_VOTING_PK  (Index) 
--
CREATE UNIQUE INDEX TB_BOARD_VOTING_PK ON TB_BOARD_VOTING
(BOARD_MNG_SEQ, BOARD_SEQ, REG_ID, ISTYPE);


--
-- TB_BOARD_VOTING_IDX01  (Index) 
--
CREATE INDEX TB_BOARD_VOTING_IDX01 ON TB_BOARD_VOTING
(BOARD_MNG_SEQ, BOARD_SEQ);


--
-- TB_BOARD_VOTING_IDX02  (Index) 
--
CREATE INDEX TB_BOARD_VOTING_IDX02 ON TB_BOARD_VOTING
(BOARD_MNG_SEQ, BOARD_SEQ, ISTYPE);


--
-- TB_OFF_REFUND_PK  (Index) 
--
CREATE UNIQUE INDEX TB_OFF_REFUND_PK ON TB_OFF_REFUND
(IDX);


--
-- TB_OFF_ROOM_PK  (Index) 
--
CREATE UNIQUE INDEX TB_OFF_ROOM_PK ON TB_OFF_ROOM
(ROOM_CD);


--
-- TB_OFF_ROOM_NUM_PK  (Index) 
--
CREATE UNIQUE INDEX TB_OFF_ROOM_NUM_PK ON TB_OFF_ROOM_NUM
(ROOM_CD, ROOM_NUM);


--
-- TB_PMP_DOWNLOG_INDEX1  (Index) 
--
CREATE INDEX TB_PMP_DOWNLOG_INDEX1 ON TB_PMP_DOWNLOG
(CONTENTID);


--
-- TB_PMP_DOWNLOG_PK  (Index) 
--
CREATE UNIQUE INDEX TB_PMP_DOWNLOG_PK ON TB_PMP_DOWNLOG
(IDX);


--
-- TB_SUBJECT_SERIES_PK  (Index) 
--
CREATE UNIQUE INDEX TB_SUBJECT_SERIES_PK ON TB_SUBJECT_SERIES
(SUBJECT_CD, SERIES_CD);


--
-- TB_SUBJECT_SERIES_IDX01  (Index) 
--
CREATE INDEX TB_SUBJECT_SERIES_IDX01 ON TB_SUBJECT_SERIES
(SERIES_CD);


--
-- TB_TAPPROVALS_PK  (Index) 
--
CREATE UNIQUE INDEX TB_TAPPROVALS_PK ON TB_TAPPROVALS
(TID);


--
-- TB_TATTACHFILE_PK  (Index) 
--
CREATE UNIQUE INDEX TB_TATTACHFILE_PK ON TB_TATTACHFILE
(ATTACHFILEID);


--
-- TB_TCCSRSSUBJECTINFO_PK  (Index) 
--
CREATE UNIQUE INDEX TB_TCCSRSSUBJECTINFO_PK ON TB_TCCSRSSUBJECTINFO
(ID);


--
-- TB_TCOMMONCODE_PK  (Index) 
--
CREATE UNIQUE INDEX TB_TCOMMONCODE_PK ON TB_TCOMMONCODE
(ID, CODE);


--
-- TB_TEXAMINEEANSWER_IDX  (Index) 
--
CREATE UNIQUE INDEX TB_TEXAMINEEANSWER_IDX ON TB_TEXAMINEEANSWER
(ID, IDENTYID, QUESTIONNUMBER, ITEMID, MOCKCODE);


--
-- TB_TEXAMINEEANSWER_PK  (Index) 
--
CREATE UNIQUE INDEX TB_TEXAMINEEANSWER_PK ON TB_TEXAMINEEANSWER
(ID);


--
-- TB_TEXAMINEEANSWER_IDX2  (Index) 
--
CREATE UNIQUE INDEX TB_TEXAMINEEANSWER_IDX2 ON TB_TEXAMINEEANSWER
(ID, IDENTYID, ITEMID, QUESTIONNUMBER);


--
-- TB_TITEM_PK  (Index) 
--
CREATE UNIQUE INDEX TB_TITEM_PK ON TB_TITEM
(ITEMID);


--
-- TB_TITEMPOOL_PK  (Index) 
--
CREATE UNIQUE INDEX TB_TITEMPOOL_PK ON TB_TITEMPOOL
(QUESTIONNUMBER, ITEMID);


--
-- TB_TMOCKCLSCLSSERIES_PK  (Index) 
--
CREATE UNIQUE INDEX TB_TMOCKCLSCLSSERIES_PK ON TB_TMOCKCLSCLSSERIES
(ID);


--
-- TB_OFF_BOX_PK  (Index) 
--
CREATE UNIQUE INDEX TB_OFF_BOX_PK ON TB_OFF_BOX
(BOX_CD);


--
-- TB_OFF_BOX_NUM_PK  (Index) 
--
CREATE UNIQUE INDEX TB_OFF_BOX_NUM_PK ON TB_OFF_BOX_NUM
(BOX_CD, BOX_NUM);


--
-- TB_OFF_BOX_RENT_PK  (Index) 
--
CREATE UNIQUE INDEX TB_OFF_BOX_RENT_PK ON TB_OFF_BOX_RENT
(SEQ);


--
-- PK_WWW_POLL  (Index) 
--
CREATE UNIQUE INDEX PK_WWW_POLL ON WWW_POLL
(POLL_ID);


--
-- PK_WWW_POLL_ITEM  (Index) 
--
CREATE UNIQUE INDEX PK_WWW_POLL_ITEM ON WWW_POLL_ITEM
(POLL_ID, POLL_ITEM_ID);


--
-- IDX_TB_SG_SITE  (Index) 
--
CREATE UNIQUE INDEX IDX_TB_SG_SITE ON TB_SG_SITE
(SITE_ID);


--
-- TB_BOARD_CS_PK  (Index) 
--
CREATE UNIQUE INDEX TB_BOARD_CS_PK ON TB_BOARD_CS
(BOARD_MNG_SEQ, BOARD_SEQ);


--
-- TB_BOOKMARK_PK  (Index) 
--
CREATE UNIQUE INDEX TB_BOOKMARK_PK ON TB_BOOKMARK
(BOOKMARK_NO);


--
-- TB_COMMENT_BOOK_PK  (Index) 
--
CREATE UNIQUE INDEX TB_COMMENT_BOOK_PK ON TB_COMMENT_BOOK
(SEQ);


--
-- TB_COMMENT_BOOK_IDX01  (Index) 
--
CREATE INDEX TB_COMMENT_BOOK_IDX01 ON TB_COMMENT_BOOK
(SEQ, RSC_ID);


--
-- COOP_COUPON_PK  (Index) 
--
CREATE UNIQUE INDEX COOP_COUPON_PK ON COOP_COUPON
(C_CD);


--
-- GOSI_PASS_STA_PK  (Index) 
--
CREATE UNIQUE INDEX GOSI_PASS_STA_PK ON GOSI_PASS_STA
(GOSI_CD, GOSI_TYPE);


--
-- PKG_EVENT  (Package) 
--
CREATE OR REPLACE PACKAGE                PKG_EVENT AS
/******************************************************************************
   NAME:       CRYPTIT
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2015-06-02                  이벤트 진행 - 쿠폰 / 강의 / 마일리지 지급 / 강의무료연장.
******************************************************************************/
  I_ORDERNO   VARCHAR2 (20);

  -- 쿠폰 지급.
    PROCEDURE INSERT_COUPON (V_COUPON VARCHAR2, V_USERID VARCHAR2, V_DAY NUMBER, V_EVENT_NO NUMBER);

  -- 마일리지 지급.
    PROCEDURE INSERT_POINT (V_POINT NUMBER, V_USERID VARCHAR2, V_TXT VARCHAR2, V_EVENT_NO VARCHAR2);

  -- 단과 강의 지급.
    PROCEDURE INSERT_LECTURE (V_USER_ID VARCHAR2, V_LECCODE VARCHAR2, V_TXT VARCHAR2, V_DAY NUMBER);

  -- 종합반 강의 지급.
    PROCEDURE INSERT_LECTURE_PKG (V_USER_ID VARCHAR2, V_LECCODE VARCHAR2, V_TXT VARCHAR2, V_DAY NUMBER);

  -- 단과 강의 무료 연장.
    PROCEDURE EXT_MY_LECTURE_DAY (V_USER_ID VARCHAR2, V_ORDERNO VARCHAR2, V_LECCODE VARCHAR2, V_DAY NUMBER, V_FREE VARCHAR2);

END PKG_EVENT;

/

--
-- PKG_COOP_COUPON  (Package) 
--
CREATE OR REPLACE PACKAGE                PKG_COOP_COUPON AS
/******************************************************************************
   NAME:       CRYPTIT
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2015-06-02                   제휴쿠폰/수강권 생성 및 삭제.
******************************************************************************/

  -- 제휴쿠폰 등록
   PROCEDURE INSERT_COOP_COUPON (V_COOP_CD VARCHAR2, V_COUPON_NM VARCHAR2, V_LECCODE VARCHAR2, V_ST_DT VARCHAR2, V_ED_DT VARCHAR2, V_COUPON_CNT NUMBER);

  -- 제휴쿠폰 삭제
   PROCEDURE DELETE_COOP_COUPON (V_COOP_CD VARCHAR2, V_LECCODE VARCHAR2);

END PKG_COOP_COUPON;

/

--
-- PKG_CART  (Package) 
--
CREATE OR REPLACE PACKAGE                PKG_CART AS
/******************************************************************************
   NAME:       PKG_CART

   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2015-08-20                   장바구니 관련 프로시져/함수 모음.
******************************************************************************/

  -- 학원 장바구니 종합반 개별 금액 산정.
    PROCEDURE UPDATE_OFF_CART_JONG (V_USER_ID VARCHAR2);
    PROCEDURE UPDATE_CART_JONG (V_USER_ID VARCHAR2, V_LECCODE VARCHAR2);
    
    FUNCTION FN_GET_ON_PRICE_PRF_PACKAGE(V_ORDERNO VARCHAR2, V_PACKAGE_NO VARCHAR2, V_LECTURE_NO VARCHAR2, V_ORDER_STATUS VARCHAR2) RETURN NUMBER;
    FUNCTION FN_GET_OFF_PRICE_PRF_PACKAGE(V_ORDERNO VARCHAR2, V_PACKAGE_NO VARCHAR2, V_LECTURE_NO VARCHAR2) RETURN NUMBER;
    
END PKG_CART;

/

--
-- DAMO  (Package) 
--
CREATE OR REPLACE PACKAGE              DAMO AS
/******************************************************************************
   NAME:       damo
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2015-11-10      rainend       1. Created this package.
******************************************************************************/

  FUNCTION HASH_STR_DATA(PSWD IN VARCHAR2) RETURN VARCHAR2;

END DAMO;

/

--
-- CRYPTIT  (Package) 
--
CREATE OR REPLACE PACKAGE                CRYPTIT AS
/******************************************************************************
   NAME:       CRYPTIT
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2014-04-10             1. Created this package.
******************************************************************************/

  -- 암호화
   FUNCTION ENCRYPT (STR VARCHAR2, HASH VARCHAR2)
      RETURN VARCHAR2;
  -- 복호화
   FUNCTION DECRYPT (XCRYPT VARCHAR2, HASH VARCHAR2)
      RETURN VARCHAR2;

END CRYPTIT; 

/

--
-- SP_SNS_INSERT_POINT  (Procedure) 
--
CREATE OR REPLACE PROCEDURE                SP_SNS_INSERT_POINT (
   V_EVENT_NO      TB_EVENT_OPTION2.EVENT_NO%TYPE,
   V_NO            TB_EVENT_OPTION2.NO%TYPE,
   V_USER_ID       TB_EVENT_OPTION2.USER_ID%TYPE,
   V_RESULT    OUT   NUMBER
) IS

    I_USERID TB_ORDERS.USER_ID%TYPE;
    I_SUM TB_ORDER_MGNT_NO.PRICE%TYPE;
    I_POINT TB_ORDER_MGNT_NO.PRICE%TYPE;
/******************************************************************************
   NAME:       SP_SNS_INSERT_POINT
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2014-09-02   RAINEND         주문 금액에 대해서 포인트 적립.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     SP_BUY_INSERT_POINT
      Sysdate:         2014-09-02
      Date and Time:   2014-09-02, 10:21:22 오전, and 2014-09-02 10:21:22 오전
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/

    BEGIN

        I_POINT := 10000;

        IF TO_CHAR(SYSDATE, 'YYYY-MM-DD') BETWEEN '2014-09-15' AND '2014-09-26' THEN

            IF I_SUM >= 100000 THEN
            
                UPDATE TB_MA_MEMBER SET USER_POINT = USER_POINT + I_POINT WHERE USER_ID = I_USERID;

                INSERT INTO TB_MILEAGE_HISTORY (
                    IDX, USERID, POINT, COMMENT1, MANAGER, SITE, REGDATE
                ) VALUES ( 
                    SEQ_TB_MILEAGE_IDX.NEXTVAL, I_USERID, I_POINT, '수강받Go교재받Go 알림이벤트 포인트 적립', I_USERID, 'pass.willbes.net', SYSDATE
                );
                
            END IF;
            
        END IF;
        
       V_RESULT := SQLCODE;

       IF V_RESULT = 0
       THEN
          V_RESULT := 1;
       ELSE
          V_RESULT := SQLCODE;
       END IF;

    END; 

/

--
-- SP_NEW_MEMBER_UPDATE_EVENT  (Procedure) 
--
CREATE OR REPLACE PROCEDURE                SP_NEW_MEMBER_UPDATE_EVENT (
   V_USER_ID   TB_EVENT_OPTION2.USER_ID%TYPE,
   V_RESULT    OUT   NUMBER
) IS

    I_POINT     TB_MILEAGE_HISTORY.POINT%TYPE;
    I_COUPON    TB_TM_COUPON.CCODE%TYPE;
    I_COUPON2   TB_TM_COUPON.CCODE%TYPE;
    I_CNT       TB_ORDER_MGNT_NO.CNT%TYPE;
/******************************************************************************
   NAME:       SP_NEW_MEMBER_INSERT_LECTURE
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2014-12-02   RAINEND         새로 회원가입시에 무료특강강의를 제공.

   NOTES:
      2015-01-01 ~ 2015-01-20 : 회원정보 변경회원 5천원쿠폰, 5%할인쿠폰, 포인트 5000점 제공.
      2015-02-10 ~ 2015-02-22 : 회원정보 변경회원 5천원쿠폰, 포인트 5000점 제공.

******************************************************************************/

    BEGIN

        IF TO_CHAR(SYSDATE, 'YYYY-MM-DD') BETWEEN '2015-02-10' AND '2015-02-22' THEN
        
            /* 포인트 및 쿠폰 제공 시작 */
            I_POINT := 5000;
            I_COUPON := 'C110531560'; --  윌비스 쿠폰 5000 POINT (단일과목) 
                
            SELECT NVL(COUNT(*),0) INTO I_CNT
            FROM TB_TM_MYCOUPON
            WHERE USERID = V_USER_ID
            AND TO_CHAR(REGDATE, 'YYYY-MM-DD') BETWEEN '2015-02-10' AND '2015-02-22'
            AND CCODE = I_COUPON;

            IF I_CNT = 0 THEN
                INSERT INTO TB_TM_MYCOUPON(
                    IDX, CCODE, USERID, REGDATE, EXPDATES, EXPDATEE, ORDERFLAG, REG_ID
                ) VALUES (
                    (SELECT MAX(IDX)+1 FROM TB_TM_MYCOUPON), I_COUPON, V_USER_ID, SYSDATE, SYSDATE, SYSDATE+30, 0, 'SYSTEM'
                );
                
                UPDATE TB_MA_MEMBER SET USER_POINT = USER_POINT + I_POINT WHERE USER_ID = V_USER_ID;

                INSERT INTO TB_MILEAGE_HISTORY (
                    IDX, USERID, POINT, COMMENT1, MANAGER, SITE, REGDATE
                ) VALUES ( 
                    SEQ_TB_MILEAGE_IDX.NEXTVAL, V_USER_ID, I_POINT, '윌비스 패밀리 이벤트 포인트 적립', V_USER_ID, 'PASS.WILLBES.NET', SYSDATE
                );
            END IF;
            /* 포인트 및 쿠폰 제공 종료 */

            /* 강의 무료 제공 */
            /*SELECT GET_NEXTSEQ_ORDERNO('M') INTO I_ORDERNO FROM DUAL;
            SELECT USER_NM, TEL_NO, PHONE_NO, ZIP_CODE, ADDRESS1, ADDRESS2, EMAIL 
                   INTO I_USER_NM, I_TEL_NO, I_PHONE_NO, I_ZIP_CODE, I_ADDRESS1, I_ADDRESS2, I_EMAIL
            FROM TB_MA_MEMBER;
            I_LECCODE := ' D201402752';

            INSERT INTO TB_ORDERS(
                ORDERNO, USER_ID, USER_NM, TEL_NO, PHONE_NO, 
                ZIP_CODE, ADDRESS1, ADDRESS2, EMAIL, REG_DT, OFF_LINE
            ) VALUES ( 
                I_ORDERNO, V_USER_ID, I_USER_NM, I_TEL_NO, I_PHONE_NO,
                I_ZIP_CODE, I_ADDRESS1, I_ADDRESS2, I_EMAIL,
                SYSDATE, '0'
            );

            INSERT INTO TB_ORDER_MGNT_NO (
                ORDERNO, MGNTNO, CNT, ISCANCEL, PRICE, 
                STATUSCODE, CONFIRMDATE, SDATE, ISCONFIRM, WMV_PMP, 
                OPEN_ADMIN_ID, PTYPE, MEMO
            ) VALUES (
                I_ORDERNO, I_LECCODE, 1, 0, 0, 
                'DLV105', SYSDATE, SYSDATE, SYSDATE, 'VOD', 
                V_USER_ID, 'D', '회원가입 이벤트 특강 무료 제공'
            );

            INSERT INTO TB_APPROVALS (
                ORDERNO, PRICE, ADDPRICE, PAYCODE, ACCTNOCODE, PAYNAME, POINT, REG_DT
            ) VALUES (
                I_ORDERNO, 0, 0, 'PAY100', 'ACT110', I_USER_NM, 0, SYSDATE
            );

            INSERT INTO TB_MYLECTURE (
                ORDERNO, USERID, PACKAGE_NO, LECTURE_NO, 
                START_DATE, END_DATE,
                PERIOD, STUDY_PERCENT, PLAYYN, REG_DT
            ) VALUES (
                I_ORDERNO, V_USER_ID, I_LECCODE, I_LECCODE, 
                TO_DATE(SYSDATE, 'YYYYMMDD'), TO_DATE(TO_CHAR(TO_DATE(SYSDATE, 'YYYYMMDD')+29, 'YYYYMMDD'), 'YYYYMMDD'), 
                30, 0, 'Y', SYSDATE
            );*/
            /* 강의 무료 제공 */

            
        END IF;
    END;

/

--
-- SP_NEW_MEMBER_INSERT_EVENT  (Procedure) 
--
CREATE OR REPLACE PROCEDURE                SP_NEW_MEMBER_INSERT_EVENT (
   V_USER_ID   TB_EVENT_OPTION2.USER_ID%TYPE,
   V_RESULT    OUT   NUMBER
) IS

    I_POINT     TB_MILEAGE_HISTORY.POINT%TYPE;
    I_COUPON    TB_TM_COUPON.CCODE%TYPE;
    I_CNT       TB_ORDER_MGNT_NO.CNT%TYPE;
/******************************************************************************
   NAME:       SP_NEW_MEMBER_INSERT_LECTURE
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2014-12-02   RAINEND         새로 회원가입시에 무료특강강의를 제공.

   NOTES:
      2015-01-01 ~ 2015-01-20 : 신규회원 1만원 쿠폰, 포인트 1000점 제공.
      2015-02-10 ~ 2015-02-22 : 신규회원 1만원 쿠폰, 포인트 1000점 제공.

******************************************************************************/

    BEGIN

        IF TO_CHAR(SYSDATE, 'YYYY-MM-DD') BETWEEN '2015-02-10' AND '2015-02-22' THEN

            /* 포인트 제공 시작 */
            I_POINT := 10000;
        
            UPDATE TB_MA_MEMBER SET USER_POINT = USER_POINT + I_POINT WHERE USER_ID = V_USER_ID;

            INSERT INTO TB_MILEAGE_HISTORY (
                IDX, USERID, POINT, COMMENT1, MANAGER, SITE, REGDATE
            ) VALUES ( 
                SEQ_TB_MILEAGE_IDX.NEXTVAL, V_USER_ID, I_POINT, '윌비스 패밀리 이벤트 포인트 적립', V_USER_ID, 'PASS.WILLBES.NET', SYSDATE
            );
            /* 포인트 제공 종료 */

            /* 강의 무료 제공 시작 */ 
            /*SELECT GET_NEXTSEQ_ORDERNO('M') INTO I_ORDERNO FROM DUAL;
            SELECT USER_NM, TEL_NO, PHONE_NO, ZIP_CODE, ADDRESS1, ADDRESS2, EMAIL 
                   INTO I_USER_NM, I_TEL_NO, I_PHONE_NO, I_ZIP_CODE, I_ADDRESS1, I_ADDRESS2, I_EMAIL
            FROM TB_MA_MEMBER;
            I_LECCODE := ' D201402752';

            INSERT INTO TB_ORDERS(
                ORDERNO, USER_ID, USER_NM, TEL_NO, PHONE_NO, 
                ZIP_CODE, ADDRESS1, ADDRESS2, EMAIL, REG_DT, OFF_LINE
            ) VALUES ( 
                I_ORDERNO, V_USER_ID, I_USER_NM, I_TEL_NO, I_PHONE_NO,
                I_ZIP_CODE, I_ADDRESS1, I_ADDRESS2, I_EMAIL,
                SYSDATE, '0'
            );

            INSERT INTO TB_ORDER_MGNT_NO (
                ORDERNO, MGNTNO, CNT, ISCANCEL, PRICE, 
                STATUSCODE, CONFIRMDATE, SDATE, ISCONFIRM, WMV_PMP, 
                OPEN_ADMIN_ID, PTYPE, MEMO
            ) VALUES (
                I_ORDERNO, I_LECCODE, 1, 0, 0, 
                'DLV105', SYSDATE, SYSDATE, SYSDATE, 'VOD', 
                V_USER_ID, 'D', '회원가입 이벤트 특강 무료 제공'
            );

            INSERT INTO TB_APPROVALS (
                ORDERNO, PRICE, ADDPRICE, PAYCODE, ACCTNOCODE, PAYNAME, POINT, REG_DT
            ) VALUES (
                I_ORDERNO, 0, 0, 'PAY100', 'ACT110', I_USER_NM, 0, SYSDATE
            );

            INSERT INTO TB_MYLECTURE (
                ORDERNO, USERID, PACKAGE_NO, LECTURE_NO, 
                START_DATE, END_DATE,
                PERIOD, STUDY_PERCENT, PLAYYN, REG_DT
            ) VALUES (
                I_ORDERNO, V_USER_ID, I_LECCODE, I_LECCODE, 
                TO_DATE(SYSDATE, 'YYYYMMDD'), TO_DATE(TO_CHAR(TO_DATE(SYSDATE, 'YYYYMMDD')+29, 'YYYYMMDD'), 'YYYYMMDD'), 
                30, 0, 'Y', SYSDATE
            );*/
            /* 강의 무료 제공 종료 */

            
        END IF;
    END;

/

--
-- SP_MAKE_ON_SALES_STAT  (Procedure) 
--
CREATE OR REPLACE PROCEDURE                SP_MAKE_ON_SALES_STAT(
  V_YEAR       TB_STAT_PRF.S_YEAR%TYPE,
  V_RESULT  OUT   NUMBER
)
IS

/******************************************************************************
   NAME:       SP_MAKE_ON_SALES_STAT
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2015-01-14   rainend       1. Created this procedure.

   NOTES:

******************************************************************************/

 I_CNT NUMBER;
 I_YEAR TB_STAT_PRF.S_YEAR%TYPE;
 I_MONTH TB_STAT_PRF.S_MONTH%TYPE;

 CURSOR C1
 IS
    SELECT TO_CHAR(A.REG_DT, 'YYYY-MM') I_DAY, D.SUBJECT_TEACHER, COUNT(B.MGNTNO) CNT_MGNTNO, SUM(B.PRICE) SUM_PRICE
    FROM TB_ORDERS A, TB_ORDER_MGNT_NO B, TB_MYLECTURE C, TB_LEC_MST D
    WHERE A.ORDERNO = B.ORDERNO
    AND A.ORDERNO = C.ORDERNO
    AND A.USER_ID = C.USERID
    AND B.MGNTNO = C.PACKAGE_NO
    AND B.MGNTNO = C.LECTURE_NO
    AND B.MGNTNO = D.LECCODE
    AND TO_CHAR(A.REG_DT, 'YYYY') = V_YEAR
    AND B.STATUSCODE = 'DLV105'
    GROUP BY TO_CHAR(A.REG_DT, 'YYYY-MM'), D.SUBJECT_TEACHER;

 CURSOR C2
 IS
    SELECT TO_CHAR(B.CANCELDATE, 'YYYY-MM') I_DAY, D.SUBJECT_TEACHER, COUNT(B.MGNTNO) CNT_MGNTNO, SUM(B.PRICE) SUM_PRICE
    FROM TB_ORDERS A, TB_ORDER_MGNT_NO B, TB_MYLECTURE C, TB_LEC_MST D
    WHERE A.ORDERNO = B.ORDERNO
    AND A.ORDERNO = C.ORDERNO
    AND A.USER_ID = C.USERID
    AND B.MGNTNO = C.PACKAGE_NO
    AND B.MGNTNO = C.LECTURE_NO
    AND B.MGNTNO = D.LECCODE
    AND B.STATUSCODE = 'DLV230'
    GROUP BY TO_CHAR(B.CANCELDATE, 'YYYY-MM'), D.SUBJECT_TEACHER;

BEGIN
    
    FOR R1 IN C1
    
    LOOP
        I_YEAR := SUBSTR(R1.I_DAY, 0,4);
        I_MONTH := SUBSTR(R1.I_DAY, 6,2);
        SELECT NVL(COUNT(*),0) INTO I_CNT FROM TB_STAT_PRF WHERE S_YEAR = I_YEAR AND S_MONTH = I_MONTH AND S_TYPE = 'ON' AND PRF_ID = R1.SUBJECT_TEACHER;
        
        IF I_CNT = 0 THEN
            INSERT INTO TB_STAT_PRF(
                S_YEAR, S_MONTH, S_TYPE, PRF_ID, SALE_CNT, REFUND_CNT, SALE_SUM, REFUND_SUM
            ) VALUES (
                I_YEAR, I_MONTH, 'ON', R1.SUBJECT_TEACHER, R1.CNT_MGNTNO, 0, R1.SUM_PRICE, 0
            );
        ELSE
            UPDATE TB_STAT_PRF SET 
                SALE_CNT = R1.CNT_MGNTNO, 
                SALE_SUM = R1.SUM_PRICE
            WHERE S_YEAR = I_YEAR
            AND S_MONTH = I_MONTH
            AND S_TYPE = 'ON'
            AND PRF_ID = R1.SUBJECT_TEACHER;
        END IF;

    END LOOP;    


    FOR R2 IN C2
    
    LOOP
        I_YEAR := SUBSTR(R2.I_DAY, 0,4);
        I_MONTH := SUBSTR(R2.I_DAY, 6,2);
        SELECT NVL(COUNT(*),0) INTO I_CNT FROM TB_STAT_PRF WHERE S_YEAR = I_YEAR AND S_MONTH = I_MONTH AND S_TYPE = 'ON' AND PRF_ID = R2.SUBJECT_TEACHER;
        
        IF I_CNT = 0 THEN
            INSERT INTO TB_STAT_PRF(
                S_YEAR, S_MONTH, S_TYPE, PRF_ID, SALE_CNT, REFUND_CNT, SALE_SUM, REFUND_SUM
            ) VALUES (
                I_YEAR, I_MONTH, 'ON', R2.SUBJECT_TEACHER, 0, R2.CNT_MGNTNO, 0, R2.SUM_PRICE
            );
        ELSE
            UPDATE TB_STAT_PRF SET 
                REFUND_CNT = R2.CNT_MGNTNO, 
                REFUND_SUM = R2.SUM_PRICE
            WHERE S_YEAR = I_YEAR
            AND S_MONTH = I_MONTH
            AND S_TYPE = 'ON'
            AND PRF_ID = R2.SUBJECT_TEACHER;
        END IF;

    END LOOP;    


   V_RESULT := SQLCODE;
   
END SP_MAKE_ON_SALES_STAT;

/

--
-- SP_MAKE_OFF_SALES_STAT  (Procedure) 
--
CREATE OR REPLACE PROCEDURE                SP_MAKE_OFF_SALES_STAT (
  V_YEAR       TB_STAT_PRF.S_YEAR%TYPE,
  V_RESULT  OUT   NUMBER
)
IS

/******************************************************************************
   NAME:       SP_MAKE_ON_SALES_STAT
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2015-01-14   rainend       1. Created this procedure.

   NOTES:

******************************************************************************/

 I_CNT NUMBER;
 I_YEAR TB_STAT_PRF.S_YEAR%TYPE;
 I_MONTH TB_STAT_PRF.S_MONTH%TYPE;

 CURSOR C1
 IS
    SELECT TO_CHAR(A.REG_DT, 'YYYY-MM') I_DAY, D.SUBJECT_TEACHER, COUNT(B.MGNTNO) CNT_MGNTNO, SUM(B.PRICE) SUM_PRICE
    FROM TB_OFF_ORDERS A, TB_OFF_ORDER_MGNT_NO B, TB_OFF_MYLECTURE C, TB_OFF_LEC_MST D
    WHERE A.ORDERNO = B.ORDERNO
    AND A.ORDERNO = C.ORDERNO
    AND A.USER_ID = C.USERID
    AND B.MGNTNO = C.PACKAGE_NO
    AND B.MGNTNO = C.LECTURE_NO
    AND B.MGNTNO = D.LECCODE
    AND TO_CHAR(A.REG_DT, 'YYYY') = V_YEAR
    AND B.STATUSCODE = 'DLV105'
    GROUP BY TO_CHAR(A.REG_DT, 'YYYY-MM'), D.SUBJECT_TEACHER;

 CURSOR C2
 IS
    SELECT TO_CHAR(B.CANCELDATE, 'YYYY-MM') I_DAY, D.SUBJECT_TEACHER, COUNT(B.MGNTNO) CNT_MGNTNO, SUM(B.PRICE) SUM_PRICE
    FROM TB_OFF_ORDERS A, TB_OFF_ORDER_MGNT_NO B, TB_OFF_MYLECTURE C, TB_OFF_LEC_MST D
    WHERE A.ORDERNO = B.ORDERNO
    AND A.ORDERNO = C.ORDERNO
    AND A.USER_ID = C.USERID
    AND B.MGNTNO = C.PACKAGE_NO
    AND B.MGNTNO = C.LECTURE_NO
    AND B.MGNTNO = D.LECCODE
    AND B.STATUSCODE = 'DLV230'
    GROUP BY TO_CHAR(B.CANCELDATE, 'YYYY-MM'), D.SUBJECT_TEACHER;

BEGIN
    
    FOR R1 IN C1
    
    LOOP
        I_YEAR := SUBSTR(R1.I_DAY, 0,4);
        I_MONTH := SUBSTR(R1.I_DAY, 6,2);
        SELECT NVL(COUNT(*),0) INTO I_CNT FROM TB_STAT_PRF WHERE S_YEAR = I_YEAR AND S_MONTH = I_MONTH AND S_TYPE = 'ON' AND PRF_ID = R1.SUBJECT_TEACHER;
        
        IF I_CNT = 0 THEN
            INSERT INTO TB_STAT_PRF(
                S_YEAR, S_MONTH, S_TYPE, PRF_ID, SALE_CNT, REFUND_CNT, SALE_SUM, REFUND_SUM
            ) VALUES (
                I_YEAR, I_MONTH, 'ON', R1.SUBJECT_TEACHER, R1.CNT_MGNTNO, 0, R1.SUM_PRICE, 0
            );
        ELSE
            UPDATE TB_STAT_PRF SET 
                SALE_CNT = R1.CNT_MGNTNO, 
                SALE_SUM = R1.SUM_PRICE
            WHERE S_YEAR = I_YEAR
            AND S_MONTH = I_MONTH
            AND S_TYPE = 'ON'
            AND PRF_ID = R1.SUBJECT_TEACHER;
        END IF;

    END LOOP;    


    FOR R2 IN C2
    
    LOOP
        I_YEAR := SUBSTR(R2.I_DAY, 0,4);
        I_MONTH := SUBSTR(R2.I_DAY, 6,2);
        SELECT NVL(COUNT(*),0) INTO I_CNT FROM TB_STAT_PRF WHERE S_YEAR = I_YEAR AND S_MONTH = I_MONTH AND S_TYPE = 'ON' AND PRF_ID = R2.SUBJECT_TEACHER;
        
        IF I_CNT = 0 THEN
            INSERT INTO TB_STAT_PRF(
                S_YEAR, S_MONTH, S_TYPE, PRF_ID, SALE_CNT, REFUND_CNT, SALE_SUM, REFUND_SUM
            ) VALUES (
                I_YEAR, I_MONTH, 'ON', R2.SUBJECT_TEACHER, 0, R2.CNT_MGNTNO, 0, R2.SUM_PRICE
            );
        ELSE
            UPDATE TB_STAT_PRF SET 
                REFUND_CNT = R2.CNT_MGNTNO, 
                REFUND_SUM = R2.SUM_PRICE
            WHERE S_YEAR = I_YEAR
            AND S_MONTH = I_MONTH
            AND S_TYPE = 'ON'
            AND PRF_ID = R2.SUBJECT_TEACHER;
        END IF;

    END LOOP;    


   V_RESULT := SQLCODE;

END SP_MAKE_OFF_SALES_STAT;

/

--
-- SP_MAKE_GOSI_STAT  (Procedure) 
--
CREATE OR REPLACE PROCEDURE                SP_MAKE_GOSI_STAT(
  V_GOSI_CD      GOSI_STAT_MST.GOSI_CD%TYPE,
  V_RESULT  OUT   NUMBER
)
IS

/******************************************************************************
   NAME:       SP_MAKE_GOSI_EXAM_RESULT
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2015-04-14   rainend       1. Created this procedure.

   NOTES:

******************************************************************************/

 I_PASS_ANS NUMBER;
 I_YN VARCHAR2(1);
 I_POINT NUMBER;
 I_SUBJECT_CD GOSI_SUBJECT.GOSI_SUBJECT_CD%TYPE;
 I_SUM_POINT NUMBER;
 I_RANK NUMBER;
 I_AVR NUMBER;
 I_ADJ_AVR NUMBER;
 I_3_NUM NUMBER;
 I_10_NUM NUMBER;
 I_3_AVR NUMBER;
 I_10_AVR NUMBER;
 I_ADJ_3_NUM NUMBER;
 I_ADJ_10_NUM NUMBER;
 I_ADJ_3_AVR NUMBER;
 I_ADJ_10_AVR NUMBER;
 

 CURSOR C1
 IS

    /* 직렬, 지역,과목별 응시인원/점수 계산  */
    SELECT A.GOSI_TYPE, A.GOSI_AREA, C.SUBJECT_CD, 
    NVL(COUNT(C.SUM_POINT),0) CNT_SUM_POINT, NVL(COUNT(C.ADJ_POINT),0) CNT_ADJ_POINT,
    NVL(SUM(C.SUM_POINT),0) TOT_SUM_POINT, NVL(SUM(C.ADJ_POINT),0) TOT_ADJ_POINT
    FROM GOSI_AREA_MST A, GOSI_RST_MST B, GOSI_RST_SBJ C
    WHERE A.GOSI_TYPE = B.GOSI_TYPE
    AND A.GOSI_AREA = B.GOSI_AREA
    AND B.RST_NO = C.RST_NO
    AND B.GOSI_CD = V_GOSI_CD
    GROUP BY A.GOSI_TYPE, A.GOSI_AREA, C.SUBJECT_CD;

BEGIN
    
    DELETE FROM GOSI_STAT_MST WHERE GOSI_CD = V_GOSI_CD; -- 이전에 작성한 통계 자료 삭제

    I_POINT := 0;
    
    FOR R1 IN C1
    
    LOOP

        IF R1.CNT_SUM_POINT > 0 THEN
        
            I_3_NUM := TRUNC(R1.CNT_SUM_POINT * 0.03, 0);
            I_10_NUM := TRUNC(R1.CNT_SUM_POINT * 0.1, 0);
            I_3_AVR := 0;
            I_10_AVR := 0;
        
            /* 상위 원점수 3% 성적 평균 */
            IF I_3_NUM > 0 THEN
                SELECT ROUND(SUM(SUM_POINT)/COUNT(SUM_POINT), 2) INTO I_3_AVR
                FROM (SELECT B.SUBJECT_CD, B.SUM_POINT,
                       RANK () OVER(PARTITION BY B.SUBJECT_CD ORDER BY B.SUM_POINT DESC) RNK
                FROM GOSI_RST_MST A, GOSI_RST_SBJ B, GOSI_AREA_MST C, GOSI_SUBJECT D
                WHERE B.SUM_POINT IS NOT NULL
                AND A.GOSI_CD = B.GOSI_CD
                AND A.RST_NO = B.RST_NO
                AND A.GOSI_TYPE = C.GOSI_TYPE
                AND A.GOSI_AREA = C.GOSI_AREA
                AND A.GOSI_TYPE = D.GOSI_TYPE
                AND B.SUBJECT_CD = D.GOSI_SUBJECT_CD
                AND A.GOSI_TYPE = R1.GOSI_TYPE
                AND A.GOSI_AREA = R1.GOSI_AREA
                AND B.SUBJECT_CD = R1.SUBJECT_CD
                ORDER BY B.SUBJECT_CD, SUM_POINT DESC )
                WHERE RNK <= I_3_NUM;
             END IF;

            /* 상위 원점수 10% 성적 평균 */
            IF I_10_NUM > 0 THEN
                SELECT ROUND(SUM(SUM_POINT)/COUNT(SUM_POINT), 2) INTO I_10_AVR
                FROM (SELECT B.SUBJECT_CD, B.SUM_POINT,
                       RANK () OVER(PARTITION BY B.SUBJECT_CD ORDER BY B.SUM_POINT DESC) RNK
                FROM GOSI_RST_MST A, GOSI_RST_SBJ B, GOSI_AREA_MST C, GOSI_SUBJECT D
                WHERE B.SUM_POINT IS NOT NULL
                AND A.GOSI_CD = B.GOSI_CD
                AND A.RST_NO = B.RST_NO
                AND A.GOSI_TYPE = C.GOSI_TYPE
                AND A.GOSI_AREA = C.GOSI_AREA
                AND A.GOSI_TYPE = D.GOSI_TYPE
                AND B.SUBJECT_CD = D.GOSI_SUBJECT_CD
                AND A.GOSI_TYPE = R1.GOSI_TYPE
                AND A.GOSI_AREA = R1.GOSI_AREA
                AND B.SUBJECT_CD = R1.SUBJECT_CD
                ORDER BY B.SUBJECT_CD, SUM_POINT DESC )
                WHERE RNK <= I_10_NUM;
            END IF;
        
            I_ADJ_3_NUM := TRUNC(R1.CNT_ADJ_POINT * 0.03, 0);
            I_ADJ_10_NUM := TRUNC(R1.CNT_ADJ_POINT * 0.1, 0);
            I_ADJ_3_AVR := 0;
            I_ADJ_10_AVR := 0;
        
            /* 상위 조정점수 3% 성적 평균 */
            IF I_ADJ_3_NUM > 0 THEN
                SELECT ROUND(SUM(ADJ_POINT)/COUNT(ADJ_POINT), 2) INTO I_ADJ_3_AVR
                FROM (SELECT B.SUBJECT_CD, B.ADJ_POINT,
                       RANK () OVER(PARTITION BY B.SUBJECT_CD ORDER BY B.ADJ_POINT DESC) RNK
                FROM GOSI_RST_MST A, GOSI_RST_SBJ B, GOSI_AREA_MST C, GOSI_SUBJECT D
                WHERE B.ADJ_POINT IS NOT NULL
                AND A.GOSI_CD = B.GOSI_CD
                AND A.RST_NO = B.RST_NO
                AND A.GOSI_TYPE = C.GOSI_TYPE
                AND A.GOSI_AREA = C.GOSI_AREA
                AND A.GOSI_TYPE = D.GOSI_TYPE
                AND B.SUBJECT_CD = D.GOSI_SUBJECT_CD
                AND A.GOSI_TYPE = R1.GOSI_TYPE
                AND A.GOSI_AREA = R1.GOSI_AREA
                AND B.SUBJECT_CD = R1.SUBJECT_CD
                ORDER BY B.SUBJECT_CD, ADJ_POINT DESC )
                WHERE RNK <= I_ADJ_3_NUM;
             END IF;

            /* 상위 조정점수 10% 성적 평균 */
            IF I_ADJ_10_NUM > 0 THEN
                SELECT ROUND(SUM(ADJ_POINT)/COUNT(ADJ_POINT), 2) INTO I_ADJ_10_AVR
                FROM (SELECT B.SUBJECT_CD, B.ADJ_POINT,
                       RANK () OVER(PARTITION BY B.SUBJECT_CD ORDER BY B.ADJ_POINT DESC) RNK
                FROM GOSI_RST_MST A, GOSI_RST_SBJ B, GOSI_AREA_MST C, GOSI_SUBJECT D
                WHERE B.ADJ_POINT IS NOT NULL
                AND A.GOSI_CD = B.GOSI_CD
                AND A.RST_NO = B.RST_NO
                AND A.GOSI_TYPE = C.GOSI_TYPE
                AND A.GOSI_AREA = C.GOSI_AREA
                AND A.GOSI_TYPE = D.GOSI_TYPE
                AND B.SUBJECT_CD = D.GOSI_SUBJECT_CD
                AND A.GOSI_TYPE = R1.GOSI_TYPE
                AND A.GOSI_AREA = R1.GOSI_AREA
                AND B.SUBJECT_CD = R1.SUBJECT_CD
                ORDER BY B.SUBJECT_CD, ADJ_POINT DESC )
                WHERE RNK <= I_ADJ_10_NUM;
            END IF;
        
            I_AVR := 0;
            I_ADJ_AVR := 0;
            
            IF R1.CNT_SUM_POINT > 0 THEN 
                I_AVR := ROUND(R1.TOT_SUM_POINT/R1.CNT_SUM_POINT, 2);
            END IF;
            IF R1.CNT_ADJ_POINT > 0 THEN 
                I_ADJ_AVR := ROUND(R1.TOT_SUM_POINT/R1.CNT_SUM_POINT, 2);
            END IF;
            
            INSERT INTO GOSI_STAT_MST (
                GOSI_CD, GOSI_TYPE, GOSI_AREA, GOSI_SUBJECT_CD,
                GOSI_USER_NUM, 
                GOSI_AVR_POINT, GOSI_3_POINT, GOSI_10_POINT,
                GOSI_ADJ_AVR_POINT, GOSI_ADJ_3_POINT, GOSI_ADJ_10_POINT
            ) VALUES (
                V_GOSI_CD, R1.GOSI_TYPE, R1.GOSI_AREA, R1.SUBJECT_CD,
                R1.CNT_SUM_POINT, 
                I_AVR, I_3_AVR, I_10_AVR,
                I_ADJ_AVR, I_ADJ_3_AVR, I_ADJ_10_AVR
            );
            
        END IF;

    END LOOP;    

   V_RESULT := SQLCODE;
   
END SP_MAKE_GOSI_STAT;

/

--
-- SP_MAKE_GOSI_STANDARD  (Procedure) 
--
CREATE OR REPLACE PROCEDURE                SP_MAKE_GOSI_STANDARD(
  V_GOSI_CD      GOSI_STAT_MST.GOSI_CD%TYPE
)
IS

/******************************************************************************
   NAME:       SP_MAKE_GOSI_EXAM_RESULT
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2015-04-14   rainend       1. Created this procedure.

   NOTES:

******************************************************************************/


 CURSOR C1
 IS

    /* 과목별 응시인원/점수 계산  */
    SELECT C.SUBJECT_CD, 
    NVL(COUNT(C.SUM_POINT),0) CNT_SUM_POINT, 
    NVL(SUM(C.SUM_POINT),0) TOT_SUM_POINT,
    ROUND(NVL(SUM(C.SUM_POINT)/COUNT(C.SUM_POINT),0),2) AVR_POINT
    FROM GOSI_RST_MST B, GOSI_RST_SBJ C
    WHERE B.RST_NO = C.RST_NO
    AND B.GOSI_CD = V_GOSI_CD
    GROUP BY C.SUBJECT_CD;
  

BEGIN
    
    FOR R1 IN C1
    
    LOOP

        UPDATE GOSI_SBJ_MST 
        SET 
        REQ_USR_NUM = R1.CNT_SUM_POINT, 
        SUM_POINT = R1.TOT_SUM_POINT, 
        AVR_POINT = R1.AVR_POINT
        WHERE GOSI_CD = V_GOSI_CD 
        AND SUBJECT_CD = R1.SUBJECT_CD;
            
    END LOOP;    

--   V_RESULT := SQLCODE;
   
END SP_MAKE_GOSI_STANDARD;

/

--
-- SP_MAKE_GOSI_EXAM_RESULT  (Procedure) 
--
CREATE OR REPLACE PROCEDURE                SP_MAKE_GOSI_EXAM_RESULT(
  V_GOSI_CD      GOSI_RST_MST.GOSI_CD%TYPE,
  V_RST_NO       GOSI_RST_MST.RST_NO%TYPE,
  V_SUBJECT_CD   GOSI_RST_MST.RST_NO%TYPE,
  V_RESULT  OUT   NUMBER
)
IS

/******************************************************************************
   NAME:       SP_MAKE_GOSI_EXAM_RESULT
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2015-04-14   rainend       1. Created this procedure.

   NOTES:

******************************************************************************/

 I_PASS_ANS NUMBER;
 I_YN VARCHAR2(1);
 I_POINT NUMBER;
 I_ADD_POINT NUMBER;

 CURSOR C1
 IS
    SELECT GOSI_CD, RST_NO, EXAM_TYPE, SUBJECT_CD, ITEM_NO, ANS
    FROM GOSI_RST_DET
    WHERE GOSI_CD = V_GOSI_CD
    AND RST_NO = V_RST_NO
    AND SUBJECT_CD = V_SUBJECT_CD;

BEGIN
    
    I_POINT := 0;

    /* 추가 점수 계산 */
    SELECT CASE ADD_POINT WHEN 'A' THEN 1 WHEN 'B' THEN 1 WHEN 'C' THEN 0.5 WHEN 'D' THEN 0.5 ELSE 0 END INTO I_ADD_POINT
    FROM GOSI_RST_MST
    WHERE GOSI_CD = V_GOSI_CD
    AND RST_NO = V_RST_NO;
    
    FOR R1 IN C1
    
    LOOP

        SELECT PASS_ANS INTO I_PASS_ANS
        FROM GOSI_PASS_MST
        WHERE GOSI_CD = V_GOSI_CD 
        AND EXAM_TYPE = R1.EXAM_TYPE
        AND SUBJECT_CD = R1.SUBJECT_CD
        AND ITEM_NO = R1.ITEM_NO;

        
        IF I_PASS_ANS = R1.ANS THEN
            I_YN := 'Y';
            I_POINT := I_POINT + 5;
        ELSE
            I_YN := 'N';
        END IF;

        UPDATE GOSI_RST_DET SET 
        YN = I_YN
        WHERE GOSI_CD = V_GOSI_CD 
        AND RST_NO = V_RST_NO
        AND EXAM_TYPE = R1.EXAM_TYPE
        AND SUBJECT_CD = R1.SUBJECT_CD
        AND ITEM_NO = R1.ITEM_NO;

    END LOOP;    

    UPDATE GOSI_RST_SBJ SET 
    SUM_POINT = I_POINT + I_ADD_POINT
    WHERE GOSI_CD = V_GOSI_CD 
    AND RST_NO = V_RST_NO
    AND SUBJECT_CD = V_SUBJECT_CD;

   V_RESULT := SQLCODE;
   
END SP_MAKE_GOSI_EXAM_RESULT;

/

--
-- SP_MAKE_GOSI_ADJUST  (Procedure) 
--
CREATE OR REPLACE PROCEDURE                SP_MAKE_GOSI_ADJUST(
  V_GOSI_CD      GOSI_RST_MST.GOSI_CD%TYPE,
  V_RST_NO       GOSI_RST_MST.RST_NO%TYPE,
  V_SUBJECT_CD   GOSI_RST_MST.RST_NO%TYPE
)
IS

/******************************************************************************
   NAME:       SP_MAKE_GOSI_ADJUST : 조정점수 산출
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2015-04-14   rainend       1. Created this procedure.

   NOTES:

******************************************************************************/

 I_POINT NUMBER; 
 I_USR_CNT NUMBER;
 I_USR_AVR NUMBER;
 I_GAP_POINT NUMBER; 
 I_STN_DIV NUMBER; --표준편차 
 I_ADJ_POINT NUMBER; 

 CURSOR C1
 IS
 
    SELECT A.SUM_POINT, B.SBJ_TYPE
    FROM GOSI_RST_SBJ A, GOSI_SBJ_MST B
    WHERE A.SUBJECT_CD = B.SUBJECT_CD
    AND A.GOSI_CD = V_GOSI_CD
    AND A.SUBJECT_CD = V_SUBJECT_CD; --응시자가 선택한 과목의 점수

BEGIN
    
    I_GAP_POINT := 0;
    I_STN_DIV := 0;

    /* 응시자 점수 */
    SELECT SUM_POINT INTO I_POINT
    FROM GOSI_RST_SBJ
    WHERE GOSI_CD = V_GOSI_CD
    AND RST_NO = V_RST_NO
    AND SUBJECT_CD = V_SUBJECT_CD;
    
    /*응시자가 선택한 과목의 인원, 평균점 */
    SELECT REQ_USR_NUM, AVR_POINT, SDV INTO I_USR_CNT, I_USR_AVR, I_STN_DIV
    FROM GOSI_SBJ_MST
    WHERE SUBJECT_CD = V_SUBJECT_CD;
    
    FOR R1 IN C1
    
    LOOP
        
        -- (응시자가 선택한 과목의 과목의 점수 - 응시자가 선택한 과목의 평균점) 의 제곱 의 총합계
        I_GAP_POINT := I_GAP_POINT + ((R1.SUM_POINT - I_USR_AVR) * (R1.SUM_POINT - I_USR_AVR));

    END LOOP;    
    
    IF (I_GAP_POINT > 0 AND I_USR_CNT > 1) THEN

        I_STN_DIV := POWER((I_GAP_POINT / (I_USR_CNT - 1)), 1/2); -- 표준편차 산출
        UPDATE GOSI_SBJ_MST SET SDV = ROUND(I_STN_DIV,2) WHERE GOSI_CD = V_GOSI_CD AND SUBJECT_CD = V_SUBJECT_CD; -- 표준편차를 과목정보에 저장한다.
        I_ADJ_POINT := ( ( (I_POINT - I_USR_AVR) / I_STN_DIV ) * 10 ) + 50; -- 조정점수 산출: 임의적으로 입력한 조정점수를 사용한다.

    END IF;

    UPDATE GOSI_RST_SBJ SET 
    ADJ_POINT = ROUND(I_ADJ_POINT, 2)
    WHERE GOSI_CD = V_GOSI_CD 
    AND RST_NO = V_RST_NO
    AND SUBJECT_CD = V_SUBJECT_CD;

END SP_MAKE_GOSI_ADJUST;

/

--
-- SP_LECTURE_OFF_DAY_INSERT  (Procedure) 
--
CREATE OR REPLACE PROCEDURE                SP_LECTURE_OFF_DAY_INSERT(
  V_NUM        TB_OFF_LECTURE_DATE.NUM%TYPE,
  V_BRIDGE_LEC TB_OFF_LEC_BRIDGE.BRIDGE_LECCODE%TYPE,
  V_LEC_DATE   TB_OFF_LECTURE_DATE.LEC_DATE%TYPE,
  V_RESULT     OUT NUMBER

)
 IS
 
 CURSOR C1
 IS
      SELECT LECCODE 
      FROM TB_OFF_LEC_BRIDGE
      WHERE BRIDGE_LECCODE = V_BRIDGE_LEC;

/******************************************************************************
   NAME:       SP_LECTURE_OFF_DAY_INSERT
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2014/10/30   miraenet       1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     SP_LECTURE_OFF_DAY_INSERT
      Sysdate:         2014/10/30
      Date and Time:   2014/10/30, 오후 2:05:14, and 2014/10/30 오후 2:05:14
      Username:        miraenet (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN

   FOR R1 IN C1
   LOOP
       INSERT INTO TB_OFF_LECTURE_DATE(LECCODE, NUM, LEC_DATE)
       VALUES(R1.LECCODE,V_NUM,TO_DATE(V_LEC_DATE));
   END LOOP;
   
   V_RESULT := SQLCODE;

       IF V_RESULT = 0
       THEN
          V_RESULT := 1;
       ELSE
          V_RESULT := SQLCODE;
       END IF;
       
END SP_LECTURE_OFF_DAY_INSERT;

/

--
-- SP_LECTURE_OFF_BOOK_INSERT  (Procedure) 
--
CREATE OR REPLACE PROCEDURE                SP_LECTURE_OFF_BOOK_INSERT (
  V_LECCODE       TB_OFF_PLUS_CA_BOOK.LECCODE%TYPE,
  V_RSC_ID        TB_OFF_PLUS_CA_BOOK.RSC_ID%TYPE,
  V_FLAG          TB_OFF_PLUS_CA_BOOK.FLAG%TYPE,
  V_BRIDGE_LEC    VARCHAR2,
  V_RESULT  OUT   NUMBER
 
)
 IS

 I_IDX   TB_OFF_PLUS_CA_BOOK.IDX%TYPE;
 
 CURSOR C1
 IS
    SELECT LECCODE 
    FROM TB_OFF_LEC_BRIDGE
    WHERE BRIDGE_LECCODE = V_BRIDGE_LEC;
/******************************************************************************
   NAME:       SP_LECTURE_BOOK_INSERT
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2014/10/30   miraenet       1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     SP_LECTURE_BOOK_INSERT
      Sysdate:         2014/10/30
      Date and Time:   2014/10/30, 오전 11:10:38, and 2014/10/30 오전 11:10:38
      Username:        miraenet (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN

 
  FOR R1 IN C1
  LOOP
  
       SELECT NVL(MAX(IDX),0)+1 INTO I_IDX
       FROM TB_OFF_PLUS_CA_BOOK;
       
       INSERT INTO TB_OFF_PLUS_CA_BOOK(IDX, LECCODE, RSC_ID, FLAG)
       VALUES(I_IDX, R1.LECCODE, V_RSC_ID, V_FLAG); 
       
  END LOOP;
  
  V_RESULT := SQLCODE;

       IF V_RESULT = 0
       THEN
          V_RESULT := 1;
       ELSE
          V_RESULT := SQLCODE;
       END IF;
        
END SP_LECTURE_OFF_BOOK_INSERT;

/

--
-- SP_LECTURE_BOOK_INSERT  (Procedure) 
--
CREATE OR REPLACE PROCEDURE                SP_LECTURE_BOOK_INSERT (
  V_MSTCODE       TB_PLUS_CA_BOOK.LECCODE%TYPE,
  V_RSC_ID        TB_PLUS_CA_BOOK.RSC_ID%TYPE,
  V_FLAG          TB_PLUS_CA_BOOK.FLAG%TYPE,
  V_BRIDGE_LEC    VARCHAR2,
  V_RESULT  OUT   NUMBER
 
)
 IS

 I_IDX   TB_PLUS_CA_BOOK.IDX%TYPE;
 
 CURSOR C1
 IS
    SELECT  LECCODE
    FROM TB_LEC_BRIDGE
    WHERE BRIDGE_LECCODE = V_BRIDGE_LEC;
/******************************************************************************
   NAME:       SP_LECTURE_BOOK_INSERT
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2014/10/30   miraenet       1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     SP_LECTURE_BOOK_INSERT
      Sysdate:         2014/10/30
      Date and Time:   2014/10/30, 오전 11:10:38, and 2014/10/30 오전 11:10:38
      Username:        miraenet (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN

 
  FOR R1 IN C1
  LOOP
  
       SELECT NVL(MAX(IDX),0)+1 INTO I_IDX
       FROM TB_PLUS_CA_BOOK;
       
       INSERT INTO TB_PLUS_CA_BOOK(IDX, LECCODE, RSC_ID, FLAG)
       VALUES(I_IDX, R1.LECCODE, V_RSC_ID, V_FLAG); 
       
  END LOOP;
  
  V_RESULT := SQLCODE;

       IF V_RESULT = 0
       THEN
          V_RESULT := 1;
       ELSE
          V_RESULT := SQLCODE;
       END IF;
        
END SP_LECTURE_BOOK_INSERT;

/

--
-- SP_INS_REPLY  (Procedure) 
--
CREATE OR REPLACE PROCEDURE                SP_INS_REPLY (
   V_LECCODE            TB_COMMENT.LECCODE%TYPE,
   V_USER_ID            TB_COMMENT.USER_ID%TYPE,
   V_USER_NM            TB_COMMENT.USER_NAME%TYPE,
   V_CONTENT            TB_COMMENT.CONTENT%TYPE,
   V_CHOICE_POINT       TB_COMMENT.CHOICE_POINT%TYPE,
   V_TITLE              TB_COMMENT.TITLE%TYPE,
   V_RESULT    OUT   NUMBER
) IS

I_DATE TB_MYLECTURE.END_DATE%TYPE;
I_EVENT_Y TB_MYLECTURE.FREE_ID%TYPE;
I_ORDERNO TB_MYLECTURE.ORDERNO%TYPE;
/******************************************************************************
   NAME:       SP_INS_REPLY
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2014-09-02          1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     SP_INS_REPLY
      Sysdate:         2014-09-02
      Date and Time:   2014-09-02, 10:21:22 오전, and 2014-09-02 10:21:22 오전
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN

    INSERT INTO TB_COMMENT(
                SEQ, LECCODE, USER_ID, USER_NAME, CONTENT, CHOICE_POINT, TITLE, REG_DT
    )VALUES(
                (SELECT NVL(MAX(TO_NUMBER(SEQ)) , 0)+1  FROM TB_COMMENT), 
                V_LECCODE, V_USER_ID, V_USER_NM, V_CONTENT, V_CHOICE_POINT, V_TITLE, SYSDATE
    );

    IF TO_CHAR(SYSDATE, 'YYYY-MM-DD') BETWEEN '2014-09-06' AND '2014-09-11' THEN
    
    SELECT ORDERNO, NVL(FREE_ID, 'N'), END_DATE INTO I_ORDERNO, I_EVENT_Y, I_DATE 
    FROM (SELECT TM.*, RANK () OVER(PARTITION BY USERID ORDER BY END_DATE desc, REG_DT desc) RANK 
    FROM TB_MYLECTURE TM
    WHERE USERID = V_USER_ID
    AND LECTURE_NO = V_LECCODE
    ORDER BY END_DATE desc)
    WHERE RANK = 1;


    IF I_EVENT_Y != 'Y' AND (TO_CHAR(I_DATE, 'YYYY-MM-DD') >= TO_CHAR(SYSDATE, 'YYYY-MM-DD')) THEN
        UPDATE TB_MYLECTURE set END_DATE = END_DATE + 5, FREE_ID = 'Y'
        WHERE LECTURE_NO = V_LECCODE 
        AND USERID = V_USER_ID
        AND ORDERNO = I_ORDERNO;
    END IF;

    end if;
   
   V_RESULT := SQLCODE;

   IF V_RESULT = 0
   THEN
      V_RESULT := 1;
   ELSE
      V_RESULT := SQLCODE;
   END IF;

END SP_INS_REPLY;

/

--
-- SP_INS_EVENT_REPLY  (Procedure) 
--
CREATE OR REPLACE PROCEDURE                SP_INS_EVENT_REPLY (
   V_EVENT_NO           TB_EVENT_OPTION2.EVENT_NO%TYPE,
   V_USER_ID            TB_EVENT_OPTION2.USER_ID%TYPE,
   V_USER_NM            TB_EVENT_OPTION2.USER_NM%TYPE,
   V_TXT                TB_EVENT_OPTION2.TXT%TYPE,
   V_RESULT    OUT   NUMBER
) IS

I_CNT   TB_MILEAGE_HISTORY.IDX%TYPE;
I_POINT TB_MILEAGE_HISTORY.POINT%TYPE;
I_COUPON    TB_TM_COUPON.CCODE%TYPE;
I_TXT   TB_MILEAGE_HISTORY.COMMENT1%TYPE;
I_EVENT_NO  TB_EVENT_OPTION2.EVENT_NO%TYPE;
/******************************************************************************
   NAME:       SP_INS_EVENT_REPLY
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2014-12-01          1. Created this procedure.

   NOTES:이벤트 댓글을 등록하고 해당되는 이벤트가있을경우 이벤트를 진행한다.
  이벤트 번호를 마일리지 주문번호에 등록한다.
  2014-12-09 : 군무원 런칭이벤트 231번 2500원 적립.
  2015-02-10 : 세뱃돈이벤트 OOO번1000원 적립.
  2015-02-01 : 이리라 프로모션 이벤트 301번10000쿠폰증정.
******************************************************************************/
BEGIN

    I_POINT := 1000;
    I_TXT := '합격의 차이를 만드는 기적의 영어 이리라!';
    I_EVENT_NO := '242';
    I_COUPON := 'C131029001'; --  윌비스 쿠폰 10000 POINT (단일과목) 
    
    INSERT INTO TB_EVENT_OPTION2(
                EVENT_NO, NO, USER_ID, USER_NM, TXT, REG_DT
    )VALUES(
                V_EVENT_NO, (SELECT NVL(MAX(NO),0) + 1 FROM TB_EVENT_OPTION2 WHERE EVENT_NO = V_EVENT_NO), 
                V_USER_ID, V_USER_NM, V_TXT, SYSDATE
    );

/*
    SELECT NVL(COUNT(ORDERNO),0) INTO I_CNT
    FROM TB_MILEAGE_HISTORY
    WHERE USERID = V_USER_ID
    AND ORDERNO = I_EVENT_NO;
*/
    SELECT NVL(COUNT(EVENT_NO),0) INTO I_CNT
    FROM TB_TM_MYCOUPON
    WHERE USERID = V_USER_ID
    AND EVENT_NO = I_EVENT_NO;

    IF TO_CHAR(SYSDATE, 'YYYY-MM-DD') BETWEEN '2015-03-09' AND '2015-04-31' THEN
    
        IF V_EVENT_NO = I_EVENT_NO AND I_CNT = 0 THEN
    
           /* UPDATE TB_MA_MEMBER SET USER_POINT = USER_POINT + I_POINT WHERE USER_ID = V_USER_ID;

            INSERT INTO TB_MILEAGE_HISTORY (
                IDX, USERID, POINT, COMMENT1, ORDERNO, MANAGER, SITE, REGDATE
            ) VALUES (
                SEQ_TB_MILEAGE_IDX.NEXTVAL, V_USER_ID, I_POINT, I_TXT, V_EVENT_NO, V_USER_ID, 'PASS.WILLBES.NET', SYSDATE
            );*/

            INSERT INTO TB_TM_MYCOUPON(
                IDX, CCODE, USERID, REGDATE, EXPDATES, EXPDATEE, ORDERFLAG, REG_ID, EVENT_NO
            ) VALUES (
                (SELECT MAX(IDX)+1 FROM TB_TM_MYCOUPON), I_COUPON, V_USER_ID, SYSDATE, SYSDATE, SYSDATE+30, 0, 'SYSTEM', I_EVENT_NO
            );

        END IF;
    END IF;   

   V_RESULT := SQLCODE;

   IF V_RESULT = 0
   THEN
      V_RESULT := 1;
   ELSE
      V_RESULT := SQLCODE;
   END IF;

END SP_INS_EVENT_REPLY;

/

--
-- SP_INS_BOOK_POINT  (Procedure) 
--
CREATE OR REPLACE PROCEDURE                SP_INS_BOOK_POINT (
   V_ORDERNO      TB_ORDER_MGNT_NO.ORDERNO%TYPE,
   V_RESULT    OUT   NUMBER
) IS

    I_BOOKPOINT TB_CA_BOOK.POINT%TYPE;
    I_USERID TB_MA_MEMBER.USER_ID%TYPE;
    I_ORDERNO TB_ORDER_MGNT_NO.ORDERNO%TYPE;
    I_COMMENT TB_MILEAGE_HISTORY.COMMENT1%TYPE;

/******************************************************************************
   NAME:       SP_INS_BOOK_POINT
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2015-03-03   RAINEND         무통장 도서주문  포인트 적립.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     SP_BUY_INSERT_POINT
      Sysdate:         2014-09-02
      Date and Time:   2014-09-02, 10:21:22 오전, and 2014-09-02 10:21:22 오전
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/

    BEGIN
            
        SELECT SUM(POINT) INTO I_BOOKPOINT
        FROM TB_ORDER_MGNT_NO A, TB_CA_BOOK B
        WHERE A.MGNTNO = B.RSC_ID
        AND A.ORDERNO = V_ORDERNO;
    
        SELECT DISTINCT REG_ID INTO I_USERID
        FROM TB_ORDER_MGNT_NO 
        WHERE ORDERNO = V_ORDERNO;
        
        SELECT DISTINCT ORDERNO INTO I_ORDERNO
        FROM TB_ORDER_MGNT_NO 
        WHERE ORDERNO = V_ORDERNO;
    
        UPDATE TB_MA_MEMBER SET USER_POINT = USER_POINT + I_BOOKPOINT
        WHERE USER_ID = I_USERID;
        
        I_COMMENT := '도서포인트 적립';
        
        INSERT INTO TB_MILEAGE_HISTORY(IDX, USERID, POINT, ORDERNO, MGNTNO, COMMENT1, MANAGER, SITE, REGDATE)
        VALUES(SEQ_TB_MILEAGE_IDX.NEXTVAL, I_USERID, I_BOOKPOINT, I_ORDERNO, '', I_COMMENT, '', 'pass.willbes.net', SYSDATE);
           
       V_RESULT := SQLCODE;

       IF V_RESULT = 0
       THEN
          V_RESULT := 1;
       ELSE
          V_RESULT := SQLCODE;
       END IF;

    END;

/

--
-- SP_CART_DELETE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE                SP_CART_DELETE(

    V_USERID IN TB_CC_CART.USER_ID%TYPE,
    V_RESULT    OUT   NUMBER

) IS

    I_ON_CNT  NUMBER;
    I_OFF_CNT NUMBER;
    
/******************************************************************************
   NAME:       SP_CART_DELETE
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2014/12/02   miraenet       1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     SP_CART_DELETE
      Sysdate:         2014/12/02
      Date and Time:   2014/12/02, 오후 1:42:51, and 2014/12/02 오후 1:42:51
      Username:        miraenet (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN

    SELECT COUNT(*) INTO I_ON_CNT
    FROM TB_CC_CART
    WHERE USER_ID = V_USERID;
    
    SELECT COUNT(*) INTO I_OFF_CNT
    FROM TB_OFF_CC_CART
    WHERE USER_ID = V_USERID;
    
    IF I_ON_CNT > 0
    THEN
        DELETE FROM TB_CC_CART 
        WHERE (REGDATE < SYSDATE - 3 OR SDATE < SYSDATE)
        AND USER_ID = V_USERID;    
    END IF;
    
    IF I_OFF_CNT > 0
    THEN
        DELETE FROM TB_OFF_CC_CART 
        WHERE REGDATE < SYSDATE - 3 
        AND USER_ID = V_USERID;    
    END IF;
    
     V_RESULT := SQLCODE;

       IF V_RESULT = 0 THEN
          V_RESULT := 1;
       ELSE
          V_RESULT := SQLCODE;
       END IF;
    
END;

/

--
-- SP_BUY_INSERT_POINT  (Procedure) 
--
CREATE OR REPLACE PROCEDURE                SP_BUY_INSERT_POINT (
   V_ORDER_NO IN TB_ORDERS.ORDERNO%TYPE,
   V_RESULT    OUT   NUMBER
) IS

    I_USERID TB_ORDERS.USER_ID%TYPE;
    I_CNT TB_ORDER_MGNT_NO.CNT%TYPE;
    I_W_CNT TB_ORDER_MGNT_NO.CNT%TYPE;
    I_H_CNT TB_ORDER_MGNT_NO.CNT%TYPE;
    I_C_CNT TB_ORDER_MGNT_NO.CNT%TYPE;
    I_S_CNT TB_ORDER_MGNT_NO.CNT%TYPE;
    I_SUM TB_ORDER_MGNT_NO.PRICE%TYPE;
    I_POINT TB_ORDER_MGNT_NO.PRICE%TYPE;
    I_SJT_CD TB_ORDER_MGNT_NO.MGNTNO%TYPE;
    I_COUPON VARCHAR(20);
    I_H_COUPON VARCHAR(20);
    I_C_COUPON VARCHAR(20);
    I_S_COUPON VARCHAR(20);
    
 CURSOR C1 --황남기 헌법/행정법 쿠폰 지을 위한 주문정보 확인
 IS
    SELECT A.USER_ID, B.MGNTNO, B.PRICE, D.SUBJECT_SJT_CD
    FROM TB_ORDERS A, TB_ORDER_MGNT_NO B, TB_APPROVALS C, TB_LEC_MST D
    WHERE A.ORDERNO = B.ORDERNO
    AND A.ORDERNO = B.ORDERNO
    AND B.ORDERNO = C.ORDERNO
    AND B.PTYPE = 'D'
    AND B.STATUSCODE = 'DLV105'
    AND B.MGNTNO = D.LECCODE
    AND A.ORDERNO = V_ORDER_NO;
/******************************************************************************
   NAME:       SP_BUY_INSERT_POINT
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2014-09-02   RAINEND         주문 금액에 대해서 포인트 적립.
   1.1        2014-12-23                   황남기 행정법/헌법 이벤트 추가.

   NOTES:
      2014-09-06 ~ 2014-09-11 : 5만원 이상 8% 적립
      2014-09-15 ~ 2014-09-26 : 10만원 이상 5% 적립
      2014-11-28 ~ 2014-12-12 : 1과목 수강시 5%적립
                                2과목 수강시 10%할인 + 5%적립-문제풀이(기출문제 1과목 수강 10%할인권 제공)
                                3과목 수강시 20%할인 + 5%적립-문제풀이(기출문제 1과목 수강 20%할인권 제공)
      2014-12-18 ~ 2014-12-31 : 전체구매자 20% 적립
                                전체구매자 문제풀이 1과목 수강 20%할인권 제공
                                14일 수강기간 연장
      2015-02-10 ~ 2015-02-22 : 전체구매자 15일 수강기간 연장
      2015-03-18 ~ 2015-05-31 : 2015 방성은 행정학 딱풀 프리미엄 패키지 구매자 만원 할인 쿠폰 제공
      2015-04-01 ~ 2015-08-31 : 2015 황정빈 경제학 총정리 특강 구매자 만원 할인 쿠폰 제공
      2015-04-13 ~ 2015-05-18 : 2015 굿모닝 영어 특강 구매자 10% 할인 쿠폰 제공
      2015-05-18 ~ 2015-06-03 : 단원별ㆍ전범위 문풀 솔루션 구매자 10% 할인 쿠폰(100일) 제공
******************************************************************************/
    BEGIN
    
        SELECT A.USER_ID, SUM(B.PRICE), ROUND((SUM(B.PRICE)*0.2)) INTO I_USERID, I_SUM, I_POINT
        FROM TB_ORDERS A, TB_ORDER_MGNT_NO B, TB_APPROVALS C, TB_LEC_MST D
        WHERE A.ORDERNO = B.ORDERNO
        AND A.ORDERNO = B.ORDERNO
        AND B.ORDERNO = C.ORDERNO
        AND B.PTYPE IN ('N', 'J', 'D')
        AND B.STATUSCODE = 'DLV105'
        AND B.MGNTNO = D.LECCODE
        AND A.ORDERNO = V_ORDER_NO
        GROUP BY A.USER_ID, A.ORDERNO;             

        /* 2015 방성은 행정학 딱풀 프리미엄 패키지구매자 */
        SELECT COUNT(MGNTNO) INTO I_CNT
        FROM TB_ORDERS A, TB_ORDER_MGNT_NO B
        WHERE A.ORDERNO = B.ORDERNO
        AND B.STATUSCODE = 'DLV105'
        AND B.MGNTNO = 'J201400054'
        AND A.ORDERNO = V_ORDER_NO;

        /* 2015 황정빈 경제학 총정리 특강 구매자 */
        SELECT COUNT(MGNTNO) INTO I_H_CNT
        FROM TB_ORDERS A, TB_ORDER_MGNT_NO B
        WHERE A.ORDERNO = B.ORDERNO
        AND B.STATUSCODE = 'DLV105'
        AND B.MGNTNO = 'D201500470'
        AND A.ORDERNO = V_ORDER_NO;
        
        /* 2015 굿모닝 영어 특강 구매자 */
        SELECT COUNT(MGNTNO) INTO I_C_CNT
        FROM TB_ORDERS A, TB_ORDER_MGNT_NO B
        WHERE A.ORDERNO = B.ORDERNO
        AND B.STATUSCODE = 'DLV105'
        AND B.MGNTNO IN ('D201500892', 'D201500893', 'D201402695', 'D201402775')
        AND A.ORDERNO = V_ORDER_NO;
        
        /* 2015 단원별ㆍ전범위 문풀 솔루션 구매자 */
        SELECT COUNT(MGNTNO) INTO I_S_CNT
        FROM TB_ORDERS A, TB_ORDER_MGNT_NO B
        WHERE A.ORDERNO = B.ORDERNO
        AND B.STATUSCODE = 'DLV105'
        AND B.MGNTNO IN ('J201500027', 'J201500028', 'J201500029', 'J201500030', 'J201500031',
                        'J201500032', 'J201500033', 'J201500034', 'J201500035', 'J201500036',
                        'J201500037', 'J201500039', 'J201500040', 'J201500042', 'J201500041',
                        'N201500018', 'N201500020', 'N201500019', 'N201500021', 'J201500043',
                        'J201500044', 'J201500045', 'J201500046')
        AND A.ORDERNO = V_ORDER_NO;

        I_COUPON := 'C131029001'; --동영상 1만원 할인쿠폰
        I_H_COUPON := 'C150402001'; -- 황정빈 강의 1만원 할인쿠폰
        I_C_COUPON := 'C150413001'; -- 강의 1만원 할인쿠폰
        I_S_COUPON := 'C150518001'; -- 강의 1만원 할인쿠(100일)
        
        
        IF TO_CHAR(SYSDATE, 'YYYY-MM-DD') BETWEEN '2015-04-13' AND '2015-05-18' THEN

            IF I_C_CNT > 0 THEN
            
                INSERT INTO TB_TM_MYCOUPON(
                    IDX, CCODE, USERID, REGDATE, EXPDATES, EXPDATEE, ORDERFLAG, REG_ID
                ) VALUES (
                    (SELECT MAX(IDX)+1 FROM TB_TM_MYCOUPON), I_C_COUPON, I_USERID, SYSDATE, SYSDATE, SYSDATE+30, 0, 'SYSTEM'
                );

            END IF;
            
        END IF;

        IF TO_CHAR(SYSDATE, 'YYYY-MM-DD') BETWEEN '2015-03-18' AND '2015-05-31' THEN

            IF I_CNT > 0 THEN
            
                SELECT NVL(COUNT(*),0) INTO I_CNT
                FROM TB_TM_MYCOUPON 
                WHERE USERID = I_USERID 
                AND TO_CHAR(REGDATE, 'YYYY-MM-DD') BETWEEN '2015-03-18' AND '2015-05-31'
                AND CCODE = I_COUPON;

                IF I_CNT = 0 THEN
                INSERT INTO TB_TM_MYCOUPON(
                    IDX, CCODE, USERID, REGDATE, EXPDATES, EXPDATEE, ORDERFLAG, REG_ID
                ) VALUES (
                    (SELECT MAX(IDX)+1 FROM TB_TM_MYCOUPON), I_COUPON, I_USERID, SYSDATE, SYSDATE, SYSDATE+30, 0, 'SYSTEM'
                );
                END IF;

            END IF;
            
        END IF;
         
        IF TO_CHAR(SYSDATE, 'YYYY-MM-DD') BETWEEN '2015-05-18' AND '2015-06-03' THEN

            IF I_S_CNT > 0 THEN
            
                SELECT NVL(COUNT(*),0) INTO I_S_CNT
                FROM TB_TM_MYCOUPON 
                WHERE USERID = I_USERID 
                AND CCODE = I_S_COUPON;

                IF I_S_CNT = 0 THEN
                INSERT INTO TB_TM_MYCOUPON(
                    IDX, CCODE, USERID, REGDATE, EXPDATES, EXPDATEE, ORDERFLAG, REG_ID
                ) VALUES (
                    (SELECT MAX(IDX)+1 FROM TB_TM_MYCOUPON), I_S_COUPON, I_USERID, SYSDATE, SYSDATE, SYSDATE+100, 0, 'SYSTEM'
                );
                END IF;

            END IF;
            
        END IF;
        
        IF TO_CHAR(SYSDATE, 'YYYY-MM-DD') BETWEEN '2015-04-01' AND '2015-08-31' THEN

            IF I_H_CNT > 0 THEN
            
                INSERT INTO TB_TM_MYCOUPON(
                    IDX, CCODE, USERID, REGDATE, EXPDATES, EXPDATEE, ORDERFLAG, REG_ID
                ) VALUES (
                    (SELECT MAX(IDX)+1 FROM TB_TM_MYCOUPON), I_H_COUPON, I_USERID, SYSDATE, SYSDATE, SYSDATE+30, 0, 'SYSTEM'
                );

            END IF;
            
        END IF;

        
        FOR R1 IN C1
        LOOP
            
            SELECT SUBJECT_SJT_CD INTO I_SJT_CD
            FROM TB_LEC_MST 
            WHERE LEARNING_CD = 'M0101' AND UPPER(SUBJECT_TEACHER) = 'WGT53' AND SUBJECT_SJT_CD IN ('1005', '1008') AND LECCODE = R1.MGNTNO;

            SELECT NVL(COUNT(USERID),0) INTO I_W_CNT FROM TB_TM_MYCOUPON WHERE USERID = I_USERID AND CCODE = 'C131203001';

            IF I_SJT_CD = '1005' AND R1.PRICE > 0 AND I_W_CNT = 0 THEN  
             --행정법 구매시 헌법 쿠폰 발행
                INSERT INTO TB_TM_MYCOUPON(IDX, CCODE, USERID, REGDATE, EXPDATES, EXPDATEE, ORDERFLAG, REG_ID
                ) VALUES (
                (SELECT NVL(MAX(IDX), 0) + 1  FROM TB_TM_MYCOUPON), 'C131203001', I_USERID, SYSDATE, SYSDATE, '2050-12-31', '0', I_USERID);
            END IF;
                   
            SELECT NVL(COUNT(USERID),0) INTO I_W_CNT FROM TB_TM_MYCOUPON WHERE USERID = I_USERID AND CCODE = 'C131203002';

            IF I_SJT_CD = '1008' AND R1.PRICE > 0 AND I_W_CNT = 0 THEN 
                --헌법법 구매시 행정법 쿠폰 발행
                INSERT INTO TB_TM_MYCOUPON(IDX, CCODE, USERID, REGDATE, EXPDATES, EXPDATEE, ORDERFLAG, REG_ID
                ) VALUES (
                (SELECT NVL(MAX(IDX), 0) + 1  FROM TB_TM_MYCOUPON), 'C131203002', I_USERID, SYSDATE, SYSDATE, '2050-12-31', '0', I_USERID);
            END IF;

        END LOOP;    


       V_RESULT := SQLCODE;

       IF V_RESULT = 0 THEN
          V_RESULT := 1;
       ELSE
          V_RESULT := SQLCODE;
       END IF;

    END;

/

--
-- GET_DDL_PARTITION  (Procedure) 
--
CREATE OR REPLACE PROCEDURE                "GET_DDL_PARTITION"  ( I_OWNER IN VARCHAR2, I_OBJECT_NAME IN  VARCHAR2, I_OBJECT_TYPE IN VARCHAR2, O_PARTITION OUT VARCHAR2, O_CODE OUT NUMBER, O_MSG OUT VARCHAR2 )  AS   V_PARTITION_SQL   VARCHAR2(32000);  V_LOCAL_CNT       NUMBER;  V_GLOBAL_CNT      NUMBER; BEGIN   V_PARTITION_SQL := DBMS_METADATA.GET_DDL( I_OBJECT_TYPE , I_OBJECT_NAME, I_OWNER );   IF    I_OBJECT_TYPE = 'TABLE' THEN   O_PARTITION     := SUBSTR( V_PARTITION_SQL, INSTR(V_PARTITION_SQL, ' PARTITION BY ' ) );   ELSIF I_OBJECT_TYPE = 'INDEX' THEN   V_LOCAL_CNT  := INSTR(V_PARTITION_SQL, ' LOCAL' ) ;   V_GLOBAL_CNT := INSTR(V_PARTITION_SQL, ' GLOBAL' ) ;   IF    V_LOCAL_CNT  > 0 THEN  O_PARTITION     := SUBSTR( V_PARTITION_SQL, V_LOCAL_CNT );   ELSIF V_GLOBAL_CNT > 0 THEN  O_PARTITION     := SUBSTR( V_PARTITION_SQL, V_GLOBAL_CNT );   END IF;   END IF;   O_CODE          := 0;   O_MSG           := 'SUCCESSFUL COMPLETION';   RETURN;   EXCEPTION       WHEN OTHERS THEN           O_CODE := SQLCODE;           O_MSG := SUBSTR(SQLERRM, 11, 1024);           RETURN;  END;  

/

--
-- REVERSE_STR  (Function) 
--
CREATE OR REPLACE FUNCTION REVERSE_STR (I_STRING IN VARCHAR2)
RETURN VARCHAR2 IS

SUB_1                NUMBER;
IN_STR               VARCHAR2 (4000);
OUT_REVERSE_STRING   VARCHAR2 (4000); -- max: varchar2(32767);

/******************************************************************************
   NAME:       REVERSE_STR
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2014-04-10          1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     REVERSE_STR
      Sysdate:         2014-04-10
      Date and Time:   2014-04-10, 2:12:02 오후, and 2014-04-10 2:12:02 오후
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN
      IN_STR := I_STRING;                                          --// LTRIM, RTRIM 으로 대체 가능
      SUB_1 := NVL (LENGTH (IN_STR), 0);

      WHILE SUB_1 > 0
      LOOP
         OUT_REVERSE_STRING := OUT_REVERSE_STRING || SUBSTR (IN_STR, SUB_1, 1);
         SUB_1 := SUB_1 - 1;
      END LOOP;

      RETURN OUT_REVERSE_STRING;

   EXCEPTION
     WHEN NO_DATA_FOUND THEN
         OUT_REVERSE_STRING := '';
         RETURN OUT_REVERSE_STRING;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END REVERSE_STR; 

/

--
-- HASH_STR_DATA  (Function) 
--
CREATE OR REPLACE FUNCTION HASH_STR_DATA RETURN NUMBER IS
TMPVAR NUMBER;
/******************************************************************************
   NAME:       damo.hash_str_data
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2015-01-08   rainend       1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     damo.hash_str_data
      Sysdate:         2015-01-08
      Date and Time:   2015-01-08, 오전 9:25:01, and 2015-01-08 오전 9:25:01
      Username:        rainend (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN
   TMPVAR := 0;
   RETURN TMPVAR;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- CONSIDER LOGGING THE ERROR AND THEN RE-RAISE
       RAISE;
END HASH_STR_DATA;

/

--
-- GET_NEXTSEQ_OFFNO  (Function) 
--
CREATE OR REPLACE FUNCTION GET_NEXTSEQ_OFFNO(l_gubun IN VARCHAR2)
 RETURN NUMBER IS
 l_nextseq NUMBER;
 pragma autonomous_transaction;
 BEGIN

    INSERT INTO TB_SEQOFF_ORDERNO (GUBUN,GYEAR,SEQ) 
    SELECT UPPER(l_gubun) ,TO_CHAR(SYSDATE,'yyyy') ,1 FROM DUAL
    WHERE NOT EXISTS( SELECT SEQ FROM TB_SEQOFF_ORDERNO
                WHERE GUBUN = UPPER(l_gubun) AND GYEAR = TO_CHAR(SYSDATE,'yyyy'));
    COMMIT;
    
    UPDATE TB_SEQOFF_ORDERNO
    SET SEQ = SEQ + 1
    WHERE GUBUN = UPPER(l_gubun) AND GYEAR = TO_CHAR(SYSDATE,'yyyy')
    RETURNING SEQ
    INTO l_nextseq;
    COMMIT;
    RETURN l_nextseq;

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
    RAISE;
    
 END;

/

--
-- GET_NEXTSEQ_NO  (Function) 
--
CREATE OR REPLACE FUNCTION GET_NEXTSEQ_NO(l_gubun IN VARCHAR2)
 RETURN NUMBER IS
 l_nextseq NUMBER;
 pragma autonomous_transaction;
 BEGIN

    INSERT INTO TB_SEQ_ORDERNO (GUBUN,GYEAR,SEQ) 
    SELECT UPPER(l_gubun) ,TO_CHAR(SYSDATE,'yyyy') ,1 FROM DUAL
    WHERE NOT EXISTS( SELECT SEQ FROM TB_SEQ_ORDERNO
                WHERE GUBUN = UPPER(l_gubun) AND GYEAR = TO_CHAR(SYSDATE,'yyyy'));
    COMMIT;
    
    UPDATE TB_SEQ_ORDERNO
    SET SEQ = SEQ + 1
    WHERE GUBUN = UPPER(l_gubun) AND GYEAR = TO_CHAR(SYSDATE,'yyyy')
    RETURNING SEQ
    INTO l_nextseq;
    COMMIT;
    RETURN l_nextseq;

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
    RAISE;
    
 END;

/

--
-- GET_EXAM_NEXTSEQ  (Function) 
--
CREATE OR REPLACE FUNCTION GET_EXAM_NEXTSEQ(l_gubun IN VARCHAR2,l_param IN VARCHAR2)
RETURN NUMBER IS
l_nextseq NUMBER;
pragma autonomous_transaction;
/******************************************************************************
   NAME:       GET_EXAM_NEXTSEQ
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2014-01-15   baegaio       1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     GET_EXAM_NEXTSEQ
      Sysdate:         2014-01-15
      Date and Time:   2014-01-15, 오후 1:13:35, and 2014-01-15 오후 1:13:35
      Username:        baegaio (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN

    INSERT INTO TB_TEXAMIDSEQ (GUBUN,IDTYPE,SEQ) 
    SELECT UPPER(l_gubun) ,UPPER(l_param) ,100 FROM DUAL
    WHERE NOT EXISTS( SELECT SEQ FROM TB_TEXAMIDSEQ
                WHERE GUBUN = UPPER(l_gubun) AND IDTYPE = UPPER(l_param));
    COMMIT;
    
    UPDATE TB_TEXAMIDSEQ
    SET SEQ = SEQ + 1
    WHERE GUBUN = UPPER(l_gubun) AND IDTYPE = UPPER(l_param)
    RETURNING SEQ
    INTO l_nextseq;
    COMMIT;
    RETURN l_nextseq;

 EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
    RAISE;

END GET_EXAM_NEXTSEQ;

/

--
-- GET_EXAM_IDENTYID  (Function) 
--
CREATE OR REPLACE FUNCTION GET_EXAM_IDENTYID(l_gubun IN VARCHAR2,l_param IN VARCHAR2) 
 RETURN VARCHAR2 IS N_IDENTYID VARCHAR2(30);
 BEGIN

    SELECT (UPPER(l_param) || LPAD(GET_EXAM_NEXTSEQ(l_gubun,l_param),4,'0')) INTO N_IDENTYID 
    FROM DUAL;
    RETURN N_IDENTYID;

    EXCEPTION
    WHEN OTHERS THEN
    N_IDENTYID := 'NO';
    RETURN N_IDENTYID;

 END GET_EXAM_IDENTYID;

/

--
-- GET_COUNSEL_USERLEC_NM  (Function) 
--
CREATE OR REPLACE FUNCTION                GET_COUNSEL_USERLEC_NM
(
    v_userlec          COUNSEL_RST.USER_LEC%TYPE
)
RETURN VARCHAR2
IS
    v_user_lec_val NUMBER;
    v_user_lec_nm VARCHAR2(100);
/*
* FunctionName    : GET_COUNSEL_USERLEC_NM
* Description    : 회원이 등록한 강의 정보 리턴
* Author        : 
* CreateDate    : 2015/08/30
*/

BEGIN
v_user_lec_nm := '';
    
    SELECT INSTR(v_userlec, 'F') into v_user_lec_val FROM DUAL;
    IF v_user_lec_val > 0 THEN
        v_user_lec_nm := '학원';
    END IF;

    SELECT INSTR(v_userlec, 'O') into v_user_lec_val FROM DUAL;
    IF v_user_lec_val > 0 AND LENGTH(v_user_lec_nm) > 0 THEN
        v_user_lec_nm := v_user_lec_nm || ',온라인';
    ELSIF v_user_lec_val > 0 THEN
        v_user_lec_nm := v_user_lec_nm || '온라인';
    END IF;

    SELECT INSTR(v_userlec, 'E') into v_user_lec_val FROM DUAL;
    IF v_user_lec_val > 0 AND LENGTH(v_user_lec_nm) > 0 THEN
        v_user_lec_nm := v_user_lec_nm || ',기타';
    ELSIF v_user_lec_val > 0 THEN
        v_user_lec_nm := v_user_lec_nm || '기타';
    END IF;


    RETURN v_user_lec_nm;


END GET_COUNSEL_USERLEC_NM;

/

--
-- GET_COUNSEL_USERCODE_NM  (Function) 
--
CREATE OR REPLACE FUNCTION                GET_COUNSEL_USERCODE_NM
(
    v_usercode          COUNSEL_RST.USER_CODE1%TYPE
)
RETURN VARCHAR2
IS
   -- v_user_code_str VARCHAR2(100);
    v_user_code_var VARCHAR2(100);
    v_user_code_val VARCHAR2(100);
    v_user_code_nm VARCHAR2(100);
/*
* FunctionName    : GET_COUNSEL_USERCODE_NM
* Description    : 회원이 등록한 직렬 정보 리턴
* Author        : 
* CreateDate    : 2015/08/30
*/

CURSOR CUR_USER_CODE IS
    WITH X AS (
        SELECT v_usercode v_user_code_str FROM DUAL
    )
    SELECT regexp_substr(v_user_code_str, '[^,]+', 1, level) 
    FROM X
    CONNECT BY level <= LENGTH(regexp_replace(v_user_code_str, '[^,]+')) + 1;


BEGIN
v_user_code_nm := '';

    OPEN CUR_USER_CODE;

    LOOP

        FETCH CUR_USER_CODE INTO v_user_code_var;
        EXIT WHEN CUR_USER_CODE%NOTFOUND;

        SELECT NAME INTO v_user_code_val FROM TB_CATEGORY_INFO INFO WHERE INFO.CODE = v_user_code_var;
        IF LENGTH(v_user_code_val) > 0 AND LENGTH(v_user_code_nm) > 0 THEN
            v_user_code_nm := v_user_code_nm || ',' || v_user_code_val;
        ELSIF LENGTH(v_user_code_val) > 0 THEN
            v_user_code_nm := v_user_code_nm || v_user_code_val;
        END IF;


    END LOOP;

    CLOSE CUR_USER_CODE;

    RETURN v_user_code_nm;


END GET_COUNSEL_USERCODE_NM;

/

--
-- FN_GET_STUDY_DATE  (Function) 
--
CREATE OR REPLACE FUNCTION                FN_GET_STUDY_DATE
(
    V_USERID    VARCHAR2,    -- 기준일자
    V_LECCODE   VARCHAR2,    -- 기준일자
    V_TYPE      VARCHAR2  -- 시작일/종료일 구분
)
RETURN DATE IS

I_START_DATE TB_MYLECTURE.START_DATE%TYPE;
I_END_DATE TB_MYLECTURE.END_DATE%TYPE;
I_SUBJECT_PERIOD TB_LEC_MST.SUBJECT_PERIOD%TYPE;
I_LEC_ST_DT DATE;
I_DATE DATE;
/******************************************************************************
   NAME:       FN_GET_STUDY_DATE
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2015-04-29                   현재일과 비교해서 남은기간이 있는 확인.
******************************************************************************/
BEGIN

    SELECT A.SDATE, A.EDATE, B.SUBJECT_PERIOD, 
           TO_DATE(B.SUBJECT_OFF_OPEN_YEAR || '-' || B.SUBJECT_OFF_OPEN_MONTH || '-' || B.SUBJECT_OFF_OPEN_DAY)
           INTO I_START_DATE, I_END_DATE, I_SUBJECT_PERIOD, I_LEC_ST_DT
    FROM TB_CC_CART A INNER JOIN TB_LEC_MST B
    ON A.LECCODE = B.LECCODE
    WHERE USER_ID = V_USERID
    AND A.LECCODE = V_LECCODE
    AND A.KIND_TYPE <> 'L';
    
    IF I_LEC_ST_DT < SYSDATE THEN
        I_START_DATE := NVL(TO_DATE(I_START_DATE, 'YY-MM-DD'), SYSDATE);
        I_END_DATE := TO_DATE(I_START_DATE + (I_SUBJECT_PERIOD - 1), 'YY-MM-DD');
    ELSE
        I_START_DATE := I_LEC_ST_DT + 1;
        I_END_DATE := I_LEC_ST_DT + I_SUBJECT_PERIOD;
    END IF;


   IF V_TYPE = 'S' THEN
    I_DATE := I_START_DATE;
   ELSE
    I_DATE := I_END_DATE;
   END IF;

   RETURN I_DATE;
   
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- CONSIDER LOGGING THE ERROR AND THEN RE-RAISE
       RAISE;
END FN_GET_STUDY_DATE;

/

--
-- FN_GET_PRICE_PRF_PACKAGE  (Function) 
--
CREATE OR REPLACE FUNCTION                FN_GET_PRICE_PRF_PACKAGE
( 
    V_ORDERNO       VARCHAR2,  -- 주문번호
    V_PACKAGE_NO    VARCHAR2,  -- 패키지번호
    V_LECTURE_NO    VARCHAR2   -- 강의번호
)
RETURN NUMBER IS

O_PRICE NUMBER;
P_PRICE NUMBER;
L_PRICE NUMBER;
S_PRICE NUMBER;
/******************************************************************************
   NAME:       FN_GET_PRICE_PRF_PACKAGE
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2015-05-12                   1.강사별패키지강의 개별 금액 산출.
******************************************************************************/

 CURSOR C1
 IS
    SELECT A.LECTURE_NO, B.LECCODE, B.SUBJECT_PRICE
    FROM TB_MYLECTURE A, TB_LEC_MST B
    WHERE A.LECTURE_NO = B.LECCODE
    AND ORDERNO = V_ORDERNO
    AND PACKAGE_NO = V_PACKAGE_NO;

BEGIN

    S_PRICE := 0;
    
    SELECT PRICE INTO O_PRICE
    FROM TB_ORDER_MGNT_NO
    WHERE ORDERNO = V_ORDERNO
    AND MGNTNO = V_PACKAGE_NO;

    FOR R1 IN C1
    
    LOOP
        
        S_PRICE := S_PRICE + R1.SUBJECT_PRICE;

    END LOOP;    

    SELECT SUBJECT_PRICE INTO L_PRICE
    FROM TB_LEC_MST
    WHERE LECCODE = V_LECTURE_NO;

    P_PRICE := ROUND(O_PRICE * (L_PRICE / S_PRICE), 0);

   RETURN P_PRICE;
   
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- CONSIDER LOGGING THE ERROR AND THEN RE-RAISE
       RAISE;
END FN_GET_PRICE_PRF_PACKAGE;

/

--
-- FN_GET_MULTI_BOOK_NM  (Function) 
--
CREATE OR REPLACE FUNCTION                FN_GET_MULTI_BOOK_NM 
(V_ORDERNO VARCHAR2)
RETURN VARCHAR2 IS

V_BOOK_ALL_NM VARCHAR2(1000);
V_BOOK_NM varchar2(100);
/******************************************************************************
   NAME:       FN_GET_MULTI_BOOK_NM
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2014-04-30          1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     FN_GET_MULTI_BOOK_NM
      Sysdate:         2014-04-30
      Date and Time:   2014-04-30, 3:45:26 오후, and 2014-04-30 3:45:26 오후
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
CURSOR C1 IS
    SELECT (B.BOOK_NM || ' ' || B.BOOK_AUTHOR) NM
    FROM    TB_ORDER_MGNT_NO A, TB_CA_BOOK B
    WHERE    A.ORDERNO = V_ORDERNO
    AND A.MGNTNO = B.RSC_ID
    AND A.STATUSCODE = 'DLV105';

BEGIN

    V_BOOK_ALL_NM := '';

    OPEN C1;
        LOOP
        
        FETCH C1 INTO V_BOOK_NM;
        EXIT WHEN C1%NOTFOUND;

            V_BOOK_ALL_NM := V_BOOK_ALL_NM || CHR(13)||CHR(11) || V_BOOK_NM;

        END LOOP;
    CLOSE C1;

   RETURN V_BOOK_ALL_NM;

   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END FN_GET_MULTI_BOOK_NM; 

/

--
-- FN_GET_LEC_REST  (Function) 
--
CREATE OR REPLACE FUNCTION FN_GET_LEC_REST
(
    V_LECCODE VARCHAR2,    -- 강의코드
    V_DATE    VARCHAR2    -- 기준일자
)
RETURN NUMBER IS 

TMPVAR NUMBER;
/******************************************************************************
   NAME:       FN_GET_LEC_REST
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2014-03-11          1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     FN_GET_LEC_REST
      Sysdate:         2014-03-11
      Date and Time:   2014-03-11, 오후 2:39:26, and 2014-03-11 오후 2:39:26
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN
   TMPVAR := 0;

   SELECT COUNT(NUM) INTO TMPVAR FROM TB_OFF_LECTURE_DATE WHERE LECCODE = V_LECCODE AND LEC_DATE > V_DATE;    

   RETURN TMPVAR;
   
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END FN_GET_LEC_REST; 

/

--
-- FN_GET_LEC_ON_REQ_CNT  (Function) 
--
CREATE OR REPLACE FUNCTION                FN_GET_LEC_ON_REQ_CNT
( 
    V_LECCODE VARCHAR2,    -- 강의코드
    V_WMP_PMP VARCHAR2,    -- 상품구분
    V_FREE VARCHAR2    -- 유료/무료 구분
)
RETURN NUMBER IS

CNT NUMBER;
/******************************************************************************
   NAME:       FN_GET_LEC_ON_REQ_CNT
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2014-06-23          1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     FN_GET_LEC_BRG_REQ_CNT
      Sysdate:         2014-06-23
      Date and Time:   2014-06-23, 1:44:56 오후, and 2014-06-23 1:44:56 오후
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN
    CNT := 0;


    IF V_FREE = 'Y' THEN
        SELECT NVL(COUNT(B.MGNTNO),0) INTO CNT
        FROM TB_MYLECTURE A, TB_ORDER_MGNT_NO B
        WHERE A.ORDERNO = B.ORDERNO
        AND A.PACKAGE_NO = B.MGNTNO
        AND B.STATUSCODE = 'DLV105'
        AND B.ISCANCEL <> '2'
        AND B.PRICE = 0
        AND B.WMV_PMP = V_WMP_PMP
        AND A.PACKAGE_NO = V_LECCODE;
    ELSE
        SELECT NVL(COUNT(B.MGNTNO),0) INTO CNT
        FROM TB_MYLECTURE A, TB_ORDER_MGNT_NO B
        WHERE A.ORDERNO = B.ORDERNO
        AND A.PACKAGE_NO = B.MGNTNO
        AND B.STATUSCODE = 'DLV105'
        AND B.ISCANCEL <> '2'
        AND B.PRICE > 0
        AND B.WMV_PMP = V_WMP_PMP
        AND A.PACKAGE_NO = V_LECCODE;
    END IF;

    
   RETURN CNT;
   
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END FN_GET_LEC_ON_REQ_CNT; 

/

--
-- FN_GET_LEC_BRG_REQ_CNT  (Function) 
--
CREATE OR REPLACE FUNCTION                FN_GET_LEC_BRG_REQ_CNT
( 
    V_LECCODE VARCHAR2    -- 강의코드
)
RETURN NUMBER IS

CNT NUMBER;
/******************************************************************************
   NAME:       FN_GET_LEC_BRG_REQ_CNT
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2014-06-23          1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     FN_GET_LEC_BRG_REQ_CNT
      Sysdate:         2014-06-23
      Date and Time:   2014-06-23, 1:44:56 오후, and 2014-06-23 1:44:56 오후
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN
    CNT := 0;

    SELECT NVL(SUM(COUNT(B.MGNTNO)),0) into CNT
    FROM TB_OFF_MYLECTURE A, TB_OFF_ORDER_MGNT_NO B, TB_OFF_LEC_BRIDGE C, 
         (SELECT BRIDGE_LECCODE, LECCODE FROM TB_OFF_LEC_BRIDGE WHERE LECCODE = V_LECCODE) D
    WHERE A.ORDERNO = B.ORDERNO
    AND A.PACKAGE_NO = B.MGNTNO
    AND A.LECTURE_NO = C.LECCODE
    AND B.STATUSCODE IN ('DLV105', 'DLV230')
    AND C.BRIDGE_LECCODE = D.BRIDGE_LECCODE
    GROUP BY B.ORDERNO
    HAVING COUNT(B.MGNTNO) = 1;
   
   RETURN CNT;
   
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END FN_GET_LEC_BRG_REQ_CNT; 

/

--
-- FN_GET_GOSI_STANDARD  (Function) 
--
CREATE OR REPLACE FUNCTION                FN_GET_GOSI_STANDARD
( 
    V_SUBJECT_CD VARCHAR2    -- 강의코드
)
RETURN NUMBER IS

CNT NUMBER;
/******************************************************************************
   NAME:       SP_MAKE_GOSI_ADJUST : 조정점수 산출
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2015-04-14   rainend       1. Created this procedure.

   NOTES:

******************************************************************************/

 I_POINT NUMBER; 
 I_USR_CNT NUMBER;
 I_USR_AVR NUMBER;
 I_GAP_POINT NUMBER; 
 I_STN_DIV NUMBER; --표준편차 
 I_ADJ_POINT NUMBER; 

 CURSOR C1
 IS
    SELECT SUM_POINT
    FROM GOSI_RST_SBJ
    WHERE SUBJECT_CD = V_SUBJECT_CD
    AND SUM_POINT > 0; --응시자가 선택한 과목의 점수

BEGIN
    
    I_GAP_POINT := 0;
    I_STN_DIV := 0;

    /*응시자가 선택한 과목의 인원, 평균점 */
    SELECT COUNT(SUM_POINT), ROUND(SUM(SUM_POINT)/COUNT(SUM_POINT), 2) INTO I_USR_CNT, I_USR_AVR
    FROM GOSI_RST_SBJ
    WHERE SUBJECT_CD = V_SUBJECT_CD
    AND SUM_POINT > 0;
    
    FOR R1 IN C1
    
    LOOP
        
        -- (응시자가 선택한 과목의 과목의 점수 - 응시자가 선택한 과목의 평균점) 의 제곱 의 총합계
        I_GAP_POINT := I_GAP_POINT + ((R1.SUM_POINT - I_USR_AVR) * (R1.SUM_POINT - I_USR_AVR));

    END LOOP;    
    
    IF (I_GAP_POINT > 0 AND I_USR_CNT > 1) THEN
        I_STN_DIV := POWER((I_GAP_POINT / (I_USR_CNT - 1)), 1/2); -- 표준편차 산출
    END IF;

   RETURN I_STN_DIV;
   
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- CONSIDER LOGGING THE ERROR AND THEN RE-RAISE
       RAISE;
END FN_GET_GOSI_STANDARD;

/

--
-- FN_GET_DATE_EXPIRED  (Function) 
--
CREATE OR REPLACE FUNCTION                FN_GET_DATE_EXPIRED
(
    V_DATE    VARCHAR2    -- 기준일자
)
RETURN VARCHAR2 IS

RET VARCHAR2(1);
TMPVAR NUMBER;
/******************************************************************************
   NAME:       FN_GET_DATE_EXPIRED
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2015-04-29                   현재일과 비교해서 남은기간이 있는 확인.
******************************************************************************/
BEGIN
   TMPVAR := TO_NUMBER(V_DATE - TO_CHAR(SYSDATE, 'YYYYMMDD'));

   IF TMPVAR >= 0 THEN
    RET := 'Y';
   ELSE
    RET := 'N';
   END IF;

   RETURN RET;
   
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- CONSIDER LOGGING THE ERROR AND THEN RE-RAISE
       RAISE;
END FN_GET_DATE_EXPIRED;

/

--
-- FN_GET_BOOK_ORDER_CNT  (Function) 
--
CREATE OR REPLACE FUNCTION                FN_GET_BOOK_ORDER_CNT
( 
    V_RSC_ID VARCHAR2,   -- 교재코드
    V_LECCODE VARCHAR2,  -- 강의코드
    V_USER_ID VARCHAR2   -- 아이디
)
RETURN NUMBER IS

CNT1 NUMBER;
CNT2 NUMBER;
CNT NUMBER;
/******************************************************************************
   NAME:       FN_GET_BOOK_ORDER_CNT
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2014-06-23          1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     FN_GET_LEC_BRG_REQ_CNT
      Sysdate:         2014-08-19
      Date and Time:   2014-08-19
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN

    CNT1 := 0;
    CNT2 := 0;
    CNT := 0;

    SELECT COUNT(*) INTO CNT1
    FROM TB_ORDERS A, TB_ORDER_MGNT_NO B
    WHERE A.ORDERNO = B.ORDERNO
    AND A.USER_ID = V_USER_ID
    AND B.MGNTNO = V_RSC_ID;

    SELECT COUNT(*) INTO CNT2
    FROM TB_ORDERS A, TB_ORDER_MGNT_NO B
    WHERE A.ORDERNO = B.ORDERNO
    AND A.USER_ID = V_USER_ID
    AND B.MGNTNO = V_LECCODE
    AND B.MGNTNO IN ('D201401365', 'D201401406', 'D201401448', 'D201401418', 'D201401481', 'D201401495')
    AND A.REG_DT < '2014-08-15';

    CNT := CNT1 + CNT2;
    
   RETURN CNT;
   
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END FN_GET_BOOK_ORDER_CNT; 

/

--
-- ADVANCE_RECEIVED  (Function) 
--
CREATE OR REPLACE FUNCTION                ADVANCE_RECEIVED (
    I_START_DATE        IN      VARCHAR2,
    I_PERIOD            IN      NUMBER,
    I_PAUSE_COUNT       IN      NUMBER,
    I_PAUSE_DATE1       IN      VARCHAR2,
    I_PAUSE_DATE2       IN      VARCHAR2,
    I_PAUSE_DATE3       IN      VARCHAR2,
    I_PAUSE_PERIOD1     IN      NUMBER,
    I_PAUSE_PERIOD2     IN      NUMBER,
    I_PAUSE_PERIOD3     IN      NUMBER,
    I_SEARCH_DATE       IN      VARCHAR2
)
RETURN NUMBER IS
    V_START_DATE        VARCHAR2(8);
    V_PERIOD            NUMBER;
    V_PAUSE_COUNT       NUMBER;
    V_PAUSE_DATE1       VARCHAR2(8);
    V_PAUSE_DATE2       VARCHAR2(8);
    V_PAUSE_DATE3       VARCHAR2(8);
    V_PAUSE_PERIOD1     NUMBER;
    V_PAUSE_PERIOD2     NUMBER;
    V_PAUSE_PERIOD3     NUMBER;
    V_SEARCH_DATE       VARCHAR2(8);

    V_RE_PERIOD_TEMP    NUMBER;   -- 재조정된 기간 TEMP
    V_RE_PERIOD         NUMBER;   -- 재조정된 기간
    V_RE_PAUSE_PERIOD   NUMBER;   -- 재조정된 강의중지기간

    V_END_DATE          VARCHAR2(8);
    V_TEMPDATE          VARCHAR2(8);

    V_PAUSE_DATE        VARCHAR(8);
    V_PAUSE_END_DATE    VARCHAR(8);
    V_PAUSE_PERIOD      NUMBER;

BEGIN
    V_START_DATE        := I_START_DATE;
    V_PERIOD            := I_PERIOD;
    V_PAUSE_COUNT       := I_PAUSE_COUNT;
    V_PAUSE_DATE1       := I_PAUSE_DATE1;
    V_PAUSE_DATE2       := I_PAUSE_DATE2;
    V_PAUSE_DATE3       := I_PAUSE_DATE3;
    V_PAUSE_PERIOD1     := I_PAUSE_PERIOD1;
    V_PAUSE_PERIOD2     := I_PAUSE_PERIOD2;
    V_PAUSE_PERIOD3     := I_PAUSE_PERIOD3;
    V_SEARCH_DATE       := I_SEARCH_DATE;

    SELECT TO_CHAR(TO_DATE(V_START_DATE,'YYYYMMDD') + (V_PERIOD-1),'YYYYMMDD')
    INTO   V_END_DATE
    FROM   DUAL;

    IF(V_PAUSE_COUNT >= 1) THEN
        V_PAUSE_DATE := V_PAUSE_DATE1;
        V_PAUSE_PERIOD := V_PAUSE_PERIOD1;

        IF(V_PAUSE_DATE1 <= V_END_DATE) THEN
            SELECT TO_CHAR(TO_DATE(V_END_DATE,'YYYYMMDD') + 1,'YYYYMMDD')
            INTO   V_TEMPDATE
            FROM   DUAL;

            SELECT TO_CHAR(TO_DATE(V_TEMPDATE,'YYYYMMDD') + (V_PAUSE_PERIOD1-1),'YYYYMMDD')
            INTO   V_END_DATE
            FROM   DUAL;
        END IF;
    END IF;

    IF(V_PAUSE_COUNT >= 2) THEN
        V_PAUSE_DATE := V_PAUSE_DATE2;
        V_PAUSE_PERIOD := V_PAUSE_PERIOD2;

        IF(V_PAUSE_DATE2 <= V_END_DATE) THEN
            SELECT TO_CHAR(TO_DATE(V_END_DATE,'YYYYMMDD') + 1,'YYYYMMDD')
            INTO   V_TEMPDATE
            FROM   DUAL;

            SELECT TO_CHAR(TO_DATE(V_TEMPDATE,'YYYYMMDD') + (V_PAUSE_PERIOD2-1),'YYYYMMDD')
            INTO   V_END_DATE
            FROM   DUAL;
        END IF;
    END IF;

    IF(V_PAUSE_COUNT >= 3) THEN
        V_PAUSE_DATE := V_PAUSE_DATE3;
        V_PAUSE_PERIOD := V_PAUSE_PERIOD3;

        IF(V_PAUSE_DATE3 <= V_END_DATE) THEN
            SELECT TO_CHAR(TO_DATE(V_END_DATE,'YYYYMMDD') + 1,'YYYYMMDD')
            INTO   V_TEMPDATE
            FROM   DUAL;

            SELECT TO_CHAR(TO_DATE(V_TEMPDATE,'YYYYMMDD') + (V_PAUSE_PERIOD3-1),'YYYYMMDD')
            INTO   V_END_DATE
            FROM   DUAL;
        END IF;
    END IF;

    DBMS_OUTPUT.PUT_LINE('V_PAUSE_DATE : ' || V_PAUSE_DATE);

    IF(V_PAUSE_COUNT >= 1) THEN
        SELECT TO_CHAR(TO_DATE(V_PAUSE_DATE,'YYYYMMDD') + (V_PAUSE_PERIOD-1),'YYYYMMDD')
        INTO   V_PAUSE_END_DATE
        FROM   DUAL;
    END IF;

    DBMS_OUTPUT.PUT_LINE('V_END_DATE : ' || V_END_DATE);

    SELECT TO_CHAR(TO_DATE(V_END_DATE,'YYYYMMDD') + 1,'YYYYMMDD')
    INTO   V_END_DATE
    FROM DUAL;

    DBMS_OUTPUT.PUT_LINE('V_END_DATE : ' || V_END_DATE);

    SELECT TO_DATE(V_START_DATE,'YYYYMMDD') - TO_DATE(V_END_DATE,'YYYYMMDD')
    INTO   V_PERIOD
    FROM DUAL;

    DBMS_OUTPUT.PUT_LINE('V_PERIOD : ' || V_PERIOD);

    IF V_PERIOD < 0 THEN
        V_PERIOD := V_PERIOD * -1;
    END IF;
    V_PERIOD := V_PERIOD + 1;

    DBMS_OUTPUT.PUT_LINE('V_PERIOD1 : ' || V_PERIOD);

    SELECT TO_DATE(V_START_DATE,'YYYYMMDD') - TO_DATE(V_SEARCH_DATE,'YYYYMMDD')
    INTO   V_RE_PERIOD_TEMP
    FROM   DUAL;

    DBMS_OUTPUT.PUT_LINE('V_RE_PERIOD_TEMP : ' || V_RE_PERIOD_TEMP);

    IF V_RE_PERIOD_TEMP < 0 THEN
        V_RE_PERIOD_TEMP := V_RE_PERIOD_TEMP * -1;
    END IF;
    V_RE_PERIOD_TEMP := V_RE_PERIOD_TEMP + 1;

    DBMS_OUTPUT.PUT_LINE('V_RE_PERIOD_TEMP1 : ' || V_RE_PERIOD_TEMP);

    V_RE_PERIOD := V_PERIOD - V_RE_PERIOD_TEMP;

    DBMS_OUTPUT.PUT_LINE('V_RE_PERIOD : ' || V_RE_PERIOD);

    IF V_PAUSE_COUNT > 0 THEN
        IF(V_SEARCH_DATE >= V_PAUSE_DATE) THEN
            IF(V_PAUSE_END_DATE >= V_SEARCH_DATE) THEN
                SELECT TO_DATE(V_PAUSE_END_DATE,'YYYYMMDD') - TO_DATE(V_SEARCH_DATE,'YYYYMMDD')
                INTO   V_RE_PAUSE_PERIOD
                FROM   DUAL;

                DBMS_OUTPUT.PUT_LINE('V_PAUSE_END_DATE >= V_SEARCH_DATE V_PAUSE_PERIOD : ' || V_RE_PAUSE_PERIOD);

                IF(V_RE_PAUSE_PERIOD < 0) THEN
                    V_RE_PAUSE_PERIOD := V_RE_PAUSE_PERIOD * -1;
                END IF;

                DBMS_OUTPUT.PUT_LINE('V_PAUSE_END_DATE >= V_SEARCH_DATE V_RE_PAUSE_PERIOD : ' || V_RE_PAUSE_PERIOD);

                V_RE_PAUSE_PERIOD := V_RE_PAUSE_PERIOD + 1;
                DBMS_OUTPUT.PUT_LINE('V_PAUSE_END_DATE >= V_SEARCH_DATE V_RE_PAUSE_PERIOD : ' || V_RE_PAUSE_PERIOD);
                V_RE_PERIOD := V_RE_PERIOD - V_RE_PAUSE_PERIOD;
                DBMS_OUTPUT.PUT_LINE('V_PAUSE_END_DATE >= V_SEARCH_DATE V_RE_PERIOD : ' || V_RE_PERIOD);
            END IF;
        ELSIF(V_PAUSE_DATE <= V_END_DATE) THEN
            V_RE_PERIOD := V_RE_PERIOD - V_PAUSE_PERIOD;
            DBMS_OUTPUT.PUT_LINE('V_PAUSE_DATE <= V_END_DATE V_RE_PERIOD : ' || V_RE_PERIOD);
            DBMS_OUTPUT.PUT_LINE('V_PAUSE_DATE <= V_END_DATE V_PAUSE_PERIOD : ' || V_PAUSE_PERIOD);
            DBMS_OUTPUT.PUT_LINE('V_PAUSE_DATE <= V_END_DATE V_RE_PERIOD : ' || V_RE_PERIOD);
        END IF;
    END IF;

    IF(V_RE_PERIOD < 0) THEN
        V_RE_PERIOD := V_RE_PERIOD * -1;
    END IF;

    V_RE_PERIOD := V_RE_PERIOD -1;

    DBMS_OUTPUT.PUT_LINE('V_RE_PERIOD <= V_END_DATE V_RE_PERIOD : ' || V_RE_PERIOD);

    RETURN V_RE_PERIOD;


END;

/

--
-- VW_SERIES_INFO  (View) 
--
CREATE OR REPLACE FORCE VIEW VW_SERIES_INFO
(SRS_CD, SRS_NM, P_SRSCD, ORDR, LVL)
AS 
SELECT
            SRS_CD, SRS_NM, NVL(P_SRSCD, -1) as P_SRSCD, ORDR, LEVEL
        FROM (
            SELECT M.SRS_CD, M.SRS_NM, M.ORDR, M.P_SRSCD
            FROM TB_SERIES_INFO M 
            WHERE (1=1)
                AND    M.ISUSE = 'Y'
            ORDER BY M.P_SRSCD, M.ORDR, M.SRS_CD
        )
        WHERE (1=1)
            AND LEVEL > 1
            START WITH SRS_CD LIKE '00'
        CONNECT BY PRIOR SRS_CD = P_SRSCD;


--
-- VW_LEC_SCH  (View) 
--
CREATE OR REPLACE FORCE VIEW VW_LEC_SCH
(LECCODE, SDATE, EDATE, CNT, REST)
AS 
SELECT   B.LECCODE, MIN (B.LEC_DATE) SDATE, MAX (B.LEC_DATE) EDATE,
            COUNT (NUM) CNT,
            (SELECT COUNT (NUM)
               FROM TB_OFF_LECTURE_DATE
              WHERE LECCODE = B.LECCODE AND LEC_DATE > SYSDATE) REST
       FROM TB_OFF_LECTURE_DATE B
   GROUP BY B.LECCODE;


--
-- VW_LEC_REQ_ON  (View) 
--
CREATE OR REPLACE FORCE VIEW VW_LEC_REQ_ON
(LECCODE, FREE, WMV_PMP, CNT)
AS 
SELECT   LECCODE, DECODE (OM.PRICE, 0, 'Y', 'N') FREE, WMV_PMP,
            NVL(COUNT(USERID),0) CNT
       FROM TB_MYLECTURE M,
            TB_ORDER_MGNT_NO OM,
            (SELECT LM.LECCODE USE_LECCODE, AA.LECCODE
               FROM TB_LEC_MST LM,
                    TB_LEC_BRIDGE LB,
                    (SELECT B.LECCODE, B.BRIDGE_LECCODE
                       FROM TB_LEC_MST A, TB_LEC_BRIDGE B
                      WHERE A.LECCODE = B.LECCODE) AA
              WHERE LM.LECCODE = LB.LECCODE
                AND LB.BRIDGE_LECCODE = AA.BRIDGE_LECCODE) BB
      WHERE M.ORDERNO = OM.ORDERNO
        AND M.PACKAGE_NO = OM.MGNTNO
        AND M.LECTURE_NO = BB.USE_LECCODE
        AND OM.STATUSCODE = 'DLV150'
        AND OM.ISCANCEL <> 2
   GROUP BY LECCODE, DECODE (OM.PRICE, 0, 'Y', 'N'), WMV_PMP;


--
-- TBL_USERS  (View) 
--
CREATE OR REPLACE FORCE VIEW TBL_USERS
(USER_ID, USER_NM, USER_PWD, PHONE_NO, EMAIL)
AS 
select 
user_id
, user_nm
, utl_raw.cast_to_varchar2(utl_encode.base64_decode(utl_raw.cast_to_raw(user_pwd))) as user_pwd
, phone_no
, email
From TB_MA_MEMBER;


--
-- SP_MAKE_GOSI_ADJ_MST  (Procedure) 
--
CREATE OR REPLACE PROCEDURE                SP_MAKE_GOSI_ADJ_MST(
  V_GOSI_CD      GOSI_RST_MST.GOSI_CD%TYPE,
  V_RESULT  OUT   NUMBER
)
IS

/******************************************************************************
   NAME:       SP_MAKE_GOSI_ADJ_MST : 조정점수 산출마스터
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2015-04-14   rainend       1. Created this procedure.

   NOTES:

******************************************************************************/

 I_RST_NO GOSI_RST_SBJ.RST_NO%TYPE; 
 I_SBJ_CD GOSI_RST_SBJ.SUBJECT_CD%TYPE;

 CURSOR C1
 IS
 
    SELECT A.RST_NO, A.SUBJECT_CD, A.SUM_POINT, B.SBJ_TYPE
    FROM GOSI_RST_SBJ A, GOSI_SBJ_MST B
    WHERE A.GOSI_CD = V_GOSI_CD
    AND A.SUBJECT_CD = B.SUBJECT_CD
    AND A.SUM_POINT IS NOT NULL;

BEGIN
    
    FOR R1 IN C1
    
    LOOP
    
        IF R1.SBJ_TYPE = 'M' THEN
            UPDATE GOSI_RST_SBJ
            SET ADJ_POINT = R1.SUM_POINT
            WHERE GOSI_CD = V_GOSI_CD
            AND RST_NO = R1.RST_NO
            AND SUBJECT_CD = R1.SUBJECT_CD;
        ELSE 
            IF R1.SUBJECT_CD = 'S21' THEN
                UPDATE GOSI_RST_SBJ
                SET ADJ_POINT = R1.SUM_POINT
                WHERE GOSI_CD = V_GOSI_CD
                AND RST_NO = R1.RST_NO
                AND SUBJECT_CD = R1.SUBJECT_CD;
            ELSE 
                SP_MAKE_GOSI_ADJUST(V_GOSI_CD, R1.RST_NO, R1.SUBJECT_CD);
            END IF;
    
        END IF;
    END LOOP;    
   
END SP_MAKE_GOSI_ADJ_MST;

/

--
-- GET_NEXTSEQ_ORDERNO  (Function) 
--
CREATE OR REPLACE FUNCTION GET_NEXTSEQ_ORDERNO(l_gubun IN VARCHAR2)
 RETURN VARCHAR2 IS N_ORDERNO VARCHAR2(20);
 BEGIN

    SELECT (UPPER(l_gubun) || TO_CHAR(SYSDATE,'yy') || LPAD(GET_NEXTSEQ_NO(l_gubun),7,'0')) INTO N_ORDERNO 
    FROM DUAL;
    RETURN N_ORDERNO;

    EXCEPTION
    WHEN OTHERS THEN
    N_ORDERNO := 'NO';
    RETURN N_ORDERNO;

 END;

/

--
-- GET_NEXTSEQ_OFFORDERNO  (Function) 
--
CREATE OR REPLACE FUNCTION GET_NEXTSEQ_OFFORDERNO(l_gubun IN VARCHAR2)
 RETURN VARCHAR2 IS N_ORDERNO VARCHAR2(20);
 BEGIN

    SELECT (UPPER(l_gubun) || 'F' || TO_CHAR(SYSDATE,'yy') || LPAD(GET_NEXTSEQ_OFFNO(l_gubun),7,'0')) INTO N_ORDERNO 
    FROM DUAL;
    RETURN N_ORDERNO;

    EXCEPTION
    WHEN OTHERS THEN
    N_ORDERNO := 'NO';
    RETURN N_ORDERNO;

 END;

/

--
-- GET_EXAM_OFFERERID  (Function) 
--
CREATE OR REPLACE FUNCTION GET_EXAM_OFFERERID(l_gubun IN VARCHAR2,l_param IN VARCHAR2) 
 RETURN VARCHAR2 IS N_OFFERERID VARCHAR2(30);
 BEGIN

    SELECT (UPPER(l_param) || LPAD(GET_EXAM_NEXTSEQ(l_gubun,l_param),6,'0')) INTO N_OFFERERID 
    FROM DUAL;
    RETURN N_OFFERERID;

    EXCEPTION
    WHEN OTHERS THEN
    N_OFFERERID := 'NO';
    RETURN N_OFFERERID;

 END GET_EXAM_OFFERERID;

/

-- 
-- Non Foreign Key Constraints for Table TB_BANNER 
-- 
ALTER TABLE TB_BANNER ADD (
  PRIMARY KEY
  (SEQ)
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_BANNER_ITEM 
-- 
ALTER TABLE TB_BANNER_ITEM ADD (
  CONSTRAINT TB_BANNER_ITEM_PK
  PRIMARY KEY
  (SEQ)
  USING INDEX TB_BANNER_ITEM_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_BA_CONFIG_CD 
-- 
ALTER TABLE TB_BA_CONFIG_CD ADD (
  PRIMARY KEY
  (CODE_CD, CODE_SEQ)
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_BOARD_MNG 
-- 
ALTER TABLE TB_BOARD_MNG ADD (
  PRIMARY KEY
  (BOARD_MNG_SEQ, ONOFF_DIV)
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_BOARD_VOTING 
-- 
ALTER TABLE TB_BOARD_VOTING ADD (
  CONSTRAINT TB_BOARD_VOTING_PK
  PRIMARY KEY
  (BOARD_MNG_SEQ, BOARD_SEQ, REG_ID, ISTYPE)
  USING INDEX TB_BOARD_VOTING_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_DDAY 
-- 
ALTER TABLE TB_DDAY ADD (
  PRIMARY KEY
  (DDAY_IDX)
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_MA_MEMBER 
-- 
ALTER TABLE TB_MA_MEMBER ADD (
  PRIMARY KEY
  (USER_ID)
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_OFF_BOX 
-- 
ALTER TABLE TB_OFF_BOX ADD (
  CONSTRAINT TB_OFF_BOX_PK
  PRIMARY KEY
  (BOX_CD)
  USING INDEX TB_OFF_BOX_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_OFF_BOX_NUM 
-- 
ALTER TABLE TB_OFF_BOX_NUM ADD (
  CONSTRAINT TB_OFF_BOX_NUM_PK
  PRIMARY KEY
  (BOX_CD, BOX_NUM)
  USING INDEX TB_OFF_BOX_NUM_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_OFF_BOX_RENT 
-- 
ALTER TABLE TB_OFF_BOX_RENT ADD (
  CONSTRAINT TB_OFF_BOX_RENT_PK
  PRIMARY KEY
  (SEQ)
  USING INDEX TB_OFF_BOX_RENT_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_SG_MENU_MST 
-- 
ALTER TABLE TB_SG_MENU_MST ADD (
  CONSTRAINT PK_TB_SG_MENU_MST
  PRIMARY KEY
  (MENU_ID)
  USING INDEX PK_TB_SG_MENU_MST
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_SG_SITE 
-- 
ALTER TABLE TB_SG_SITE ADD (
  CONSTRAINT IDX_TB_SG_SITE
  PRIMARY KEY
  (SITE_ID)
  USING INDEX IDX_TB_SG_SITE
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_SG_SITE_MENU 
-- 
ALTER TABLE TB_SG_SITE_MENU ADD (
  PRIMARY KEY
  (SITE_ID, MENU_ID)
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table WWW_POLL 
-- 
ALTER TABLE WWW_POLL ADD (
  CONSTRAINT PK_WWW_POLL
  PRIMARY KEY
  (POLL_ID)
  USING INDEX PK_WWW_POLL
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table WWW_POLL_ITEM 
-- 
ALTER TABLE WWW_POLL_ITEM ADD (
  CONSTRAINT PK_WWW_POLL_ITEM
  PRIMARY KEY
  (POLL_ID, POLL_ITEM_ID)
  USING INDEX PK_WWW_POLL_ITEM
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table COOP_COUPON 
-- 
ALTER TABLE COOP_COUPON ADD (
  CONSTRAINT COOP_COUPON_PK
  PRIMARY KEY
  (C_CD)
  USING INDEX COOP_COUPON_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table COOP_COUPON_MST 
-- 
ALTER TABLE COOP_COUPON_MST ADD (
  CONSTRAINT COOP_COUPON_MST_PK
  PRIMARY KEY
  (COOP_CD, LECCODE)
  USING INDEX COOP_COUPON_MST_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table COOP_MST 
-- 
ALTER TABLE COOP_MST ADD (
  CONSTRAINT COOP_MST_PK
  PRIMARY KEY
  (COOP_CD)
  USING INDEX COOP_MST_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table GOSI_AREA_MST 
-- 
ALTER TABLE GOSI_AREA_MST ADD (
  CONSTRAINT GOSI_AREA_PK
  PRIMARY KEY
  (GOSI_TYPE, GOSI_AREA)
  USING INDEX GOSI_AREA_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table GOSI_COD 
-- 
ALTER TABLE GOSI_COD ADD (
  CONSTRAINT GOSI_CD_PK
  PRIMARY KEY
  (GOSI_TYPE)
  USING INDEX GOSI_CD_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table GOSI_MST 
-- 
ALTER TABLE GOSI_MST ADD (
  CONSTRAINT GOSI_MST_PK
  PRIMARY KEY
  (GOSI_CD)
  USING INDEX GOSI_MST_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table GOSI_PASS_STA 
-- 
ALTER TABLE GOSI_PASS_STA ADD (
  CONSTRAINT GOSI_PASS_STA_PK
  PRIMARY KEY
  (GOSI_CD, GOSI_TYPE)
  USING INDEX GOSI_PASS_STA_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table GOSI_RST_MST 
-- 
ALTER TABLE GOSI_RST_MST ADD (
  CONSTRAINT GOSI_RST_MST_PK
  PRIMARY KEY
  (GOSI_CD, RST_NO)
  USING INDEX GOSI_RST_MST_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table GOSI_RST_SBJ 
-- 
ALTER TABLE GOSI_RST_SBJ ADD (
  CONSTRAINT GOSI_RST_SBJ_PK
  PRIMARY KEY
  (GOSI_CD, RST_NO, SUBJECT_CD)
  USING INDEX GOSI_RST_SBJ_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table GOSI_SUBJECT 
-- 
ALTER TABLE GOSI_SUBJECT ADD (
  CONSTRAINT GOSI_SUBJECT_PK
  PRIMARY KEY
  (GOSI_TYPE, GOSI_SUBJECT_CD)
  USING INDEX GOSI_SUBJECT_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table SC_TRAN 
-- 
ALTER TABLE SC_TRAN ADD (
  CONSTRAINT PK_SC_TRAN
  PRIMARY KEY
  (TR_NUM)
  USING INDEX PK_SC_TRAN
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_APPROVALS 
-- 
ALTER TABLE TB_APPROVALS ADD (
  PRIMARY KEY
  (ORDERNO)
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_BOARD_COMMENT 
-- 
ALTER TABLE TB_BOARD_COMMENT ADD (
  CONSTRAINT TB_BOARD_COMMENT_PK
  PRIMARY KEY
  (SEQ)
  USING INDEX TB_BOARD_COMMENT_IDX01
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_BOARD_CS 
-- 
ALTER TABLE TB_BOARD_CS ADD (
  CONSTRAINT TB_BOARD_CS_PK
  PRIMARY KEY
  (BOARD_MNG_SEQ, BOARD_SEQ)
  USING INDEX TB_BOARD_CS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_BOOKMARK 
-- 
ALTER TABLE TB_BOOKMARK ADD (
  CONSTRAINT TB_BOOKMARK_PK
  PRIMARY KEY
  (BOOKMARK_NO)
  USING INDEX TB_BOOKMARK_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_CATEGORY_INFO 
-- 
ALTER TABLE TB_CATEGORY_INFO ADD (
  PRIMARY KEY
  (ID, CODE)
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_CATEGORY_SERIES 
-- 
ALTER TABLE TB_CATEGORY_SERIES ADD (
  PRIMARY KEY
  (SEQ)
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_CA_BOOK 
-- 
ALTER TABLE TB_CA_BOOK ADD (
  PRIMARY KEY
  (SEQ, RSC_ID)
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_CC_CART 
-- 
ALTER TABLE TB_CC_CART ADD (
  PRIMARY KEY
  (SEQ)
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_CC_J_CART 
-- 
ALTER TABLE TB_CC_J_CART ADD (
  PRIMARY KEY
  (SEQ)
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_COMMENT 
-- 
ALTER TABLE TB_COMMENT ADD (
  PRIMARY KEY
  (SEQ, LECCODE)
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_COMMENT_BOOK 
-- 
ALTER TABLE TB_COMMENT_BOOK ADD (
  CONSTRAINT TB_COMMENT_BOOK_PK
  PRIMARY KEY
  (SEQ)
  USING INDEX TB_COMMENT_BOOK_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_DELIVERS 
-- 
ALTER TABLE TB_DELIVERS ADD (
  PRIMARY KEY
  (ORDERNO)
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_EVENT_OPTION1 
-- 
ALTER TABLE TB_EVENT_OPTION1 ADD (
  PRIMARY KEY
  (EVENT_NO, OPTION_NO)
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_LEARNING_FORM_INFO 
-- 
ALTER TABLE TB_LEARNING_FORM_INFO ADD (
  PRIMARY KEY
  (LEC_DIV, CODE)
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_LEC_BRIDGE 
-- 
ALTER TABLE TB_LEC_BRIDGE ADD (
  PRIMARY KEY
  (SEQ, BRIDGE_LECCODE, LECCODE)
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_LEC_JONG 
-- 
ALTER TABLE TB_LEC_JONG ADD (
  PRIMARY KEY
  (SEQ, LECCODE, MST_LECCODE)
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_MA_MEMBER_CATEGORY 
-- 
ALTER TABLE TB_MA_MEMBER_CATEGORY ADD (
  PRIMARY KEY
  (USER_ID, CATEGORY_CODE)
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_MA_MEMBER_SERIES 
-- 
ALTER TABLE TB_MA_MEMBER_SERIES ADD (
  CONSTRAINT TB_MA_MEMBER_SERIES_PK
  PRIMARY KEY
  (USER_ID, SERIES_CD)
  USING INDEX TB_MA_MEMBER_SERIES_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_MA_MEMBER_SUBJECT 
-- 
ALTER TABLE TB_MA_MEMBER_SUBJECT ADD (
  PRIMARY KEY
  (USER_ID, SUBJECT_CD)
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_MYLECTURE 
-- 
ALTER TABLE TB_MYLECTURE ADD (
  PRIMARY KEY
  (USERID, ORDERNO, PACKAGE_NO, LECTURE_NO)
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_MYMOVIE 
-- 
ALTER TABLE TB_MYMOVIE ADD (
  PRIMARY KEY
  (USERID, ORDERNO, PACKAGE_NO, LECTURE_NO, MOVIE_NO)
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_OFF_APPROVALS 
-- 
ALTER TABLE TB_OFF_APPROVALS ADD (
  PRIMARY KEY
  (ORDERNO)
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_OFF_CC_CART 
-- 
ALTER TABLE TB_OFF_CC_CART ADD (
  CONSTRAINT TB_OFF_CC_CART_PK
  PRIMARY KEY
  (SEQ)
  USING INDEX TB_OFF_CC_CART_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_OFF_CC_J_CART 
-- 
ALTER TABLE TB_OFF_CC_J_CART ADD (
  CONSTRAINT TB_OFF_CC_J_CART_PK
  PRIMARY KEY
  (SEQ)
  USING INDEX TB_OFF_CC_J_CART_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_OFF_MYLECTURE 
-- 
ALTER TABLE TB_OFF_MYLECTURE ADD (
  PRIMARY KEY
  (USERID, ORDERNO, PACKAGE_NO, LECTURE_NO)
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_OFF_ORDER_MGNT_NO 
-- 
ALTER TABLE TB_OFF_ORDER_MGNT_NO ADD (
  PRIMARY KEY
  (ORDERNO, MGNTNO, ISCANCEL)
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_OFF_REFUND 
-- 
ALTER TABLE TB_OFF_REFUND ADD (
  CONSTRAINT TB_OFF_REFUND_PK
  PRIMARY KEY
  (IDX)
  USING INDEX TB_OFF_REFUND_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_OFF_ROOM 
-- 
ALTER TABLE TB_OFF_ROOM ADD (
  CONSTRAINT TB_OFF_ROOM_PK
  PRIMARY KEY
  (ROOM_CD)
  USING INDEX TB_OFF_ROOM_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_OFF_ROOM_NUM 
-- 
ALTER TABLE TB_OFF_ROOM_NUM ADD (
  CONSTRAINT TB_OFF_ROOM_NUM_PK
  PRIMARY KEY
  (ROOM_CD, ROOM_NUM)
  USING INDEX TB_OFF_ROOM_NUM_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_ORDER_MGNT_NO 
-- 
ALTER TABLE TB_ORDER_MGNT_NO ADD (
  PRIMARY KEY
  (ORDERNO, MGNTNO, ISCANCEL)
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_PLUS_CA_BOOK 
-- 
ALTER TABLE TB_PLUS_CA_BOOK ADD (
  PRIMARY KEY
  (IDX)
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_PMP_DOWNLOG 
-- 
ALTER TABLE TB_PMP_DOWNLOG ADD (
  CONSTRAINT TB_PMP_DOWNLOG_PK
  PRIMARY KEY
  (IDX)
  USING INDEX TB_PMP_DOWNLOG_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_SERIES_INFO 
-- 
ALTER TABLE TB_SERIES_INFO ADD (
  PRIMARY KEY
  (SRS_CD)
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_SUBJECT_INFO 
-- 
ALTER TABLE TB_SUBJECT_INFO ADD (
  PRIMARY KEY
  (SUBJECT_CD)
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_SUBJECT_SERIES 
-- 
ALTER TABLE TB_SUBJECT_SERIES ADD (
  CONSTRAINT TB_SUBJECT_SERIES_PK
  PRIMARY KEY
  (SUBJECT_CD, SERIES_CD)
  USING INDEX TB_SUBJECT_SERIES_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_TAPPROVALS 
-- 
ALTER TABLE TB_TAPPROVALS ADD (
  CONSTRAINT TB_TAPPROVALS_PK
  PRIMARY KEY
  (TID)
  USING INDEX TB_TAPPROVALS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_TATTACHFILE 
-- 
ALTER TABLE TB_TATTACHFILE ADD (
  CONSTRAINT TB_TATTACHFILE_PK
  PRIMARY KEY
  (ATTACHFILEID)
  USING INDEX TB_TATTACHFILE_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_TCCSRSSUBJECTINFO 
-- 
ALTER TABLE TB_TCCSRSSUBJECTINFO ADD (
  CONSTRAINT TB_TCCSRSSUBJECTINFO_PK
  PRIMARY KEY
  (ID)
  USING INDEX TB_TCCSRSSUBJECTINFO_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_TCOMMONCODE 
-- 
ALTER TABLE TB_TCOMMONCODE ADD (
  CONSTRAINT TB_TCOMMONCODE_PK
  PRIMARY KEY
  (ID, CODE)
  USING INDEX TB_TCOMMONCODE_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_TEXAMINEEANSWER 
-- 
ALTER TABLE TB_TEXAMINEEANSWER ADD (
  CONSTRAINT TB_TEXAMINEEANSWER_PK
  PRIMARY KEY
  (ID)
  USING INDEX TB_TEXAMINEEANSWER_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_TITEM 
-- 
ALTER TABLE TB_TITEM ADD (
  CONSTRAINT TB_TITEM_PK
  PRIMARY KEY
  (ITEMID)
  USING INDEX TB_TITEM_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_TITEMPOOL 
-- 
ALTER TABLE TB_TITEMPOOL ADD (
  CONSTRAINT TB_TITEMPOOL_PK
  PRIMARY KEY
  (QUESTIONNUMBER, ITEMID)
  USING INDEX TB_TITEMPOOL_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_TMOCKCLSCLSSERIES 
-- 
ALTER TABLE TB_TMOCKCLSCLSSERIES ADD (
  CONSTRAINT TB_TMOCKCLSCLSSERIES_PK
  PRIMARY KEY
  (ID)
  USING INDEX TB_TMOCKCLSCLSSERIES_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_TMOCKGRADE 
-- 
ALTER TABLE TB_TMOCKGRADE ADD (
  CONSTRAINT TB_TMOCKGRADE_PK
  PRIMARY KEY
  (ID, IDENTYID, MOCKCODE, SUBJECT_CD)
  USING INDEX TB_TMOCKGRADE_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_TMOCKREGISTRATION 
-- 
ALTER TABLE TB_TMOCKREGISTRATION ADD (
  CONSTRAINT TB_TMOCKREGISTRATION_PK
  PRIMARY KEY
  (ID, MOCKCODE)
  USING INDEX TB_TMOCKREGISTRATION_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_TMOCKSUBJECT 
-- 
ALTER TABLE TB_TMOCKSUBJECT ADD (
  CONSTRAINT TB_TMOCKSUBJECT_PK
  PRIMARY KEY
  (ID)
  USING INDEX TB_TMOCKSUBJECT_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_TM_MYCOUPON 
-- 
ALTER TABLE TB_TM_MYCOUPON ADD (
  CONSTRAINT TB_TM_MYCOUPON_PK
  PRIMARY KEY
  (IDX)
  USING INDEX TB_TM_MYCOUPON_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_TORDERS 
-- 
ALTER TABLE TB_TORDERS ADD (
  CONSTRAINT TB_TSORDERS_PK
  PRIMARY KEY
  (ID)
  USING INDEX TB_TSORDERS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_TSUBJECTAREA 
-- 
ALTER TABLE TB_TSUBJECTAREA ADD (
  CONSTRAINT TB_TSUBJECTAREA_PK
  PRIMARY KEY
  (ID)
  USING INDEX TB_TSUBJECTAREA_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_TUSERCHOICESUBJECT 
-- 
ALTER TABLE TB_TUSERCHOICESUBJECT ADD (
  CONSTRAINT TB_TUSERCHOICESUBJECT_PK
  PRIMARY KEY
  (ID)
  USING INDEX TB_TUSERCHOICESUBJECT_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TB_TWRONGANSWERNOTE 
-- 
ALTER TABLE TB_TWRONGANSWERNOTE ADD (
  CONSTRAINT TB_TWRONGANSWERNOTE_PK
  PRIMARY KEY
  (ID, IDENTYID, ITEMID, QUESTIONNUMBER)
  USING INDEX TB_TWRONGANSWERNOTE_PK
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table WWW_POLL_ITEM 
-- 
ALTER TABLE WWW_POLL_ITEM ADD (
  CONSTRAINT FK_WWW_POLL_ITEM 
  FOREIGN KEY (POLL_ID) 
  REFERENCES WWW_POLL (POLL_ID)
  ENABLE NOVALIDATE);