<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="room">

	<!-- 독서실정보를 모두 가져온다.  -->
	<select id="roomList" parameterType="hashMap" resultType="hashMap">
		SELECT TOB.*, 
		(SELECT COUNT(ROOM_NUM) FROM TB_OFF_ROOM_NUM WHERE ROOM_CD=TOB.ROOM_CD AND ROOM_FLAG = 'Y') Y_CNT,
		(SELECT COUNT(ROOM_NUM) FROM TB_OFF_ROOM_NUM WHERE ROOM_CD=TOB.ROOM_CD AND ROOM_FLAG = 'N') N_CNT
		FROM TB_OFF_ROOM TOB  
		ORDER BY TOB.ROOM_CD ASC
	</select>

	<!-- 독서실정보 한개를 가져온다.  -->
	<select id="getRoomDetail" parameterType="hashMap" resultType="hashMap">
		SELECT *
		FROM TB_OFF_ROOM
		WHERE ROOM_CD=#{ROOM_CD}    
	</select>

	<!-- 독서실 세부정보를 가져온다.  -->
	<select id="getRoomNumList" parameterType="hashMap" resultType="hashMap">
		SELECT ROOM_CD, ROOM_NUM, USERID, USER_NM, ROOM_FLAG, UPDATE_DT, UPDATE_ID, RENT_SEQ 
		FROM TB_OFF_ROOM_NUM TOBN 
		LEFT OUTER JOIN TB_MA_MEMBER TMM ON TOBN.USERID=TMM.USER_ID  
		WHERE TOBN.ROOM_CD=#{ROOM_CD}
		ORDER BY TOBN.ROOM_NUM ASC
	</select>

	<!-- 독서실 상세정보 테이블에서 사용중인 독서실 갯수를 조회 -->
	<select id="getRoomNumYCount" parameterType="hashMap" resultType="int">
		SELECT 
			COUNT(ROOM_NUM)  
		FROM TB_OFF_ROOM_NUM			
		WHERE ROOM_CD = #{ROOM_CD} AND ROOM_FLAG = 'Y'
	</select>

	<!-- 독서실 상세정보 테이블에서 존재하는 독서실의 갯수를 조회 -->
	<select id="getRoomNumExistCount" parameterType="hashMap" resultType="int">
		SELECT 
			COUNT(ROOM_NUM)  
		FROM TB_OFF_ROOM_NUM			
		WHERE ROOM_CD = #{ROOM_CD} AND ROOM_NUM = #{ROOM_NUM}
	</select>

	<!-- 독서실 대여 신청 결제정보를 한개 가져온다.  -->
	<select id="roomNumRentDetail" parameterType="hashMap" resultType="hashMap">
		SELECT TOB.ROOM_NM, TOBN.ROOM_CD, TOBN.USERID, TOBN.ROOM_FLAG, TOBN.RENT_SEQ, TOBR.RENT_MEMO, TOBR.RENT_SEQ,
			TO_CHAR(TOBR.RENT_START , 'YYYY-MM-DD') RENT_START, TO_CHAR(TOBR.RENT_END , 'YYYY-MM-DD') RENT_END,
			TOBR.ORDER_ID, TOBR.EXTEND_YN, TOBR.RENT_TYPE, TOBR.PAY_GUBUN 
		FROM TB_OFF_ROOM TOB INNER JOIN TB_OFF_ROOM_NUM TOBN 
			ON TOB.ROOM_CD = TOBN.ROOM_CD 
			AND TOBN.ROOM_CD = #{ROOM_CD}
			AND TOBN.ROOM_NUM = #{ROOM_NUM}
		LEFT OUTER JOIN TB_OFF_ROOM_RENT TOBR
			ON TOB.ROOM_CD=TOBR.ROOM_CD
			AND TOBN.ROOM_NUM = TOBR.ROOM_NUM
			AND TOBR.RENT_SEQ = #{RENT_SEQ}
	</select>

	<!-- 독서실 대여 현재 결제 정보를 가져온다.  -->
	<select id="roomNumRentOrderDetail" parameterType="hashMap" resultType="hashMap">
		SELECT TOO.ORDERNO, TOO.USER_NM, TOO.REG_DT, TOO.OFF_LINE, TOO.USER_ID,
       		TOA.PAYCODE, TOA.PRICE, TOA.PRICE_CARD, TOA.PRICE_CASH, TOA.PRICE_BANK, TOA.PAYNAME, 
       		TOA.PRICE_DISCOUNT, TOA.PRICE_DISCOUNT_REASON
		FROM TB_OFF_ORDERS TOO, TB_OFF_ORDER_MGNT_NO TOM, TB_OFF_APPROVALS TOA
		WHERE TOO.ORDERNO = TOM.ORDERNO
		AND TOM.ORDERNO = TOA.ORDERNO
		AND TOM.ISCANCEL= 0
		AND TOO.ORDERNO = #{ORDER_ID}
	</select>

	<!-- 독서실 대여 현재 결제 정보를 가져온다.  -->
	<select id="roomOrderDetail" parameterType="hashMap" resultType="hashMap">
 		SELECT A.ORDERNO, A.USER_ID, A.USER_NM, A.PHONE_NO, A.EMAIL, A.REG_DT, A.ORDER_TYPE, 
  			C.PRICE, C.PRICE_CARD, C.PRICE_CASH, C.PRICE_BANK, C.PRICE_UNPAID, C.PRICE_DISCOUNT, C.PRICE_DISCOUNT_TYPE, C.PRICE_DISCOUNT_REASON,
  			D.RENT_SEQ, D.ROOM_NUM, D.RENT_TYPE, E.ROOM_NM, E.ROOM_CD, D.RENT_MEMO,
  			TO_CHAR(D.RENT_START , 'YYYY-MM-DD') RENT_START, TO_CHAR(D.RENT_END , 'YYYY-MM-DD') RENT_END
 		FROM TB_OFF_ORDERS A, TB_OFF_APPROVALS C, TB_OFF_ROOM_RENT D, TB_OFF_ROOM E
 		WHERE A.ORDERNO = C.ORDERNO
    		AND C.ORDERNO = D.ORDER_ID
    		AND D.ROOM_CD = E.ROOM_CD
    		AND A.ORDERNO = #{ORDERNO}
 	</select>
 

	<!-- 독서실 대여 결제 이력 정보들을 가져온다.  -->
	<select id="roomNumRentOrderList" parameterType="hashMap" resultType="hashMap">
		SELECT TOBR.USERID, TOBN.ROOM_FLAG, TOBR.RENT_MEMO, TOBR.RENT_SEQ,
			TO_CHAR(TOBR.RENT_START , 'YYYY-MM-DD') RENT_START, TO_CHAR(TOBR.RENT_END , 'YYYY-MM-DD') RENT_END,
			DECODE(TOBR.EXTEND_YN,'R','대여','Y','연장','비연장') EXTEND_YN,
			DECODE(TOBR.RENT_TYPE,'ON','온라인','오프라인') RENT_TYPE,
			TOBR.ORDER_ID, TOBR.PAY_GUBUN, 
			TMM.USER_NM, TMM.PHONE_NO
		FROM TB_OFF_ROOM TOB INNER JOIN TB_OFF_ROOM_NUM TOBN 
			ON TOB.ROOM_CD = TOBN.ROOM_CD 
		LEFT OUTER JOIN TB_OFF_ROOM_RENT TOBR
			ON TOB.ROOM_CD=TOBR.ROOM_CD
			AND TOBN.ROOM_NUM = TOBR.ROOM_NUM
		LEFT OUTER JOIN TB_MA_MEMBER TMM
			ON TOBR.USERID = TMM.USER_ID 
		WHERE TOBR.ROOM_CD = #{ROOM_CD}
			AND TOBR.ROOM_NUM = #{ROOM_NUM}
		ORDER BY TOBR.ORDER_ID DESC	
	</select>


	<!-- 독서실신청(결제완료) 정보들을 가져온다.  -->
	<select id="getRoomOrderList" parameterType="hashMap" resultType="hashMap">
		SELECT * FROM 	( 
			SELECT A.*, ROWNUM RNUM 
		  	FROM (
					SELECT 
						TOO.ORDERNO, TOO.REG_DT, TOO.USER_NM, TOO.PHONE_NO, TOBR.ROOM_CD, TOB.ROOM_NM, TOBR.ROOM_NUM, TOA.PRICE, 
						TOA.PAYCODE, DECODE(TOA.PAYCODE,'PAY110','카드결제','PAY140','현금결제','PAY150','예금결제','PAY100','무통장입금','없음') PAYCODE_NM,
						TOBR.RENT_TYPE, DECODE(TOBR.RENT_TYPE,'ON','온라인','OFF','오프라인','데스트접수') RENT_TYPE_NM,
						TOM.STATUSCODE, DECODE(TOM.STATUSCODE,'DLV105','결제완료','DLV230','환불완료','DLV150','취소완료','대기중') STATUSCODE_NM
					FROM TB_OFF_ORDERS TOO INNER JOIN TB_OFF_APPROVALS TOA
						ON TOO.ORDERNO = TOA.ORDERNO
						INNER JOIN TB_OFF_ROOM_RENT TOBR
						ON TOO.ORDERNO = TOBR.ORDER_ID
						INNER JOIN TB_OFF_ROOM TOB
						ON TOBR.ROOM_CD = TOB.ROOM_CD
						INNER JOIN (SELECT ORDERNO, MAX(STATUSCODE) STATUSCODE FROM TB_OFF_ORDER_MGNT_NO WHERE PTYPE='T' GROUP BY ORDERNO) TOM
						ON TOO.ORDERNO = TOM.ORDERNO 
						LEFT OUTER JOIN TB_OFF_REFUND TOR
						ON TOO.ORDERNO = TOR.ORDER_ID 
					WHERE 1=1
						<if test="ORDERSTATUSCODE !=null and ORDERSTATUSCODE == 'DLV105' ">
						AND NVL(TOA.PRICE_UNPAID,0) <![CDATA[ < ]]> 1
						AND TOM.STATUSCODE = 'DLV105'
						</if>
						<if test="ORDERSTATUSCODE !=null and ORDERSTATUSCODE == 'DLV230' ">
						AND TOM.STATUSCODE = 'DLV230'
						</if>
						
						<if test="SDATE !=null and SDATE != '' and EDATE !=null and EDATE != ''">
						AND TO_CHAR(TOO.REG_DT, 'YYYYMMDD') BETWEEN #{SDATE} AND #{EDATE}
						</if>
											   		
						<if test="SEARCHKEY !=null and SEARCHKEY != '' ">
					   		<if test="SEARCHTYPE !=null and SEARCHTYPE != '' ">
					   			<choose>
								  <when test="SEARCHTYPE != 'ALL'">
									  AND ${SEARCHTYPE} LIKE '%'||#{searchkey}||'%'
								  </when>
								  <when test="SEARCHTYPE == 'ALL'">
									  AND (
										  TOO.ORDERNO LIKE '%'||#{searchkey}||'%'
										  OR TOO.USER_NM LIKE '%'||#{searchkey}||'%'
										   )
								  </when>
							 	</choose>
					   		</if>							
						</if>
					ORDER BY TOO.REG_DT DESC
					) A 
               	WHERE ROWNUM <![CDATA[ <= ]]> #{ENDNO}
			)
		WHERE RNUM <![CDATA[ > ]]> #{STARTNO}
	</select>

	<select id="getRoomOrderListCount" parameterType="hashMap" resultType="int">
		SELECT  
			COUNT(*) CNT
		FROM TB_OFF_ORDERS TOO INNER JOIN TB_OFF_APPROVALS TOA
			ON TOO.ORDERNO = TOA.ORDERNO
			INNER JOIN TB_OFF_ROOM_RENT TOBR
			ON TOO.ORDERNO = TOBR.ORDER_ID
			INNER JOIN TB_OFF_ROOM TOB
			ON TOBR.ROOM_CD = TOB.ROOM_CD
			INNER JOIN (SELECT ORDERNO, MAX(STATUSCODE) STATUSCODE FROM TB_OFF_ORDER_MGNT_NO WHERE PTYPE='T' GROUP BY ORDERNO) TOM
			ON TOO.ORDERNO = TOM.ORDERNO 
			LEFT OUTER JOIN TB_OFF_REFUND TOR
			ON TOO.ORDERNO = TOR.ORDER_ID 
		WHERE 1=1
			<if test="ORDERSTATUSCODE !=null and ORDERSTATUSCODE == 'DLV105' ">
			AND NVL(TOA.PRICE_UNPAID,0) <![CDATA[ < ]]> 1
			AND TOM.STATUSCODE = 'DLV105'
			</if>
			<if test="ORDERSTATUSCODE !=null and ORDERSTATUSCODE == 'DLV230' ">
			AND TOM.STATUSCODE = 'DLV230'
			</if>
			<if test="SDATE !=null and SDATE != '' and EDATE !=null and EDATE != ''">
			AND TO_CHAR(TOO.REG_DT, 'YYYYMMDD') BETWEEN #{SDATE} AND #{EDATE}
			</if>
			<if test="SEARCHKEY !=null and SEARCHKEY != '' ">
		   		<if test="SEARCHTYPE !=null and SEARCHTYPE != '' ">
		   			<choose>
					  <when test="SEARCHTYPE != 'ALL'">
						  AND ${SEARCHTYPE} LIKE '%'||#{searchkey}||'%'
					  </when>
					  <when test="SEARCHTYPE == 'ALL'">
						  AND (
							  TOO.ORDERNO LIKE '%'||#{searchkey}||'%'
							  OR TOO.USER_NM LIKE '%'||#{searchkey}||'%'
							   )
					  </when>
				 	</choose>
		   		</if>							
			</if>
		ORDER BY TOO.REG_DT DESC
	</select>				
	
		
	<!-- 독서실신청(결제완료) 정보들을 엑셀 출력용으로 가져온다.  -->
	<select id="getRoomOrderListExcel" parameterType="hashMap" resultType="hashMap">
		SELECT 
			TOO.ORDERNO, TOO.REG_DT, TOO.USER_NM, TOO.PHONE_NO, TOBR.ROOM_CD, TOB.ROOM_NM, TOBR.ROOM_NUM, TOA.PRICE, 
			TOA.PAYCODE, DECODE(TOA.PAYCODE,'PAY110','카드결제','PAY140','현금결제','PAY150','예금결제','PAY100','무통장입금','없음') PAYCODE_NM,
			TOBR.RENT_TYPE, DECODE(TOBR.RENT_TYPE,'ON','온라인','OFF','오프라인','데스트접수') RENT_TYPE_NM,
			TOM.STATUSCODE, DECODE(TOM.STATUSCODE,'DLV105','결제완료','DLV230','환불완료','DLV150','취소완료','대기중') STATUSCODE_NM
		FROM TB_OFF_ORDERS TOO INNER JOIN TB_OFF_APPROVALS TOA
			ON TOO.ORDERNO = TOA.ORDERNO
			INNER JOIN TB_OFF_ROOM_RENT TOBR
			ON TOO.ORDERNO = TOBR.ORDER_ID
			INNER JOIN TB_OFF_ROOM TOB
			ON TOBR.ROOM_CD = TOB.ROOM_CD
			INNER JOIN (SELECT ORDERNO, MAX(STATUSCODE) STATUSCODE FROM TB_OFF_ORDER_MGNT_NO WHERE PTYPE='T' GROUP BY ORDERNO) TOM
			ON TOO.ORDERNO = TOM.ORDERNO 
			LEFT OUTER JOIN TB_OFF_REFUND TOR
			ON TOO.ORDERNO = TOR.ORDER_ID 
		WHERE 1=1
			<if test="ORDERSTATUSCODE !=null and ORDERSTATUSCODE == 'DLV105' ">
			AND NVL(TOA.PRICE_UNPAID,0) <![CDATA[ < ]]> 1
			AND TOM.STATUSCODE = 'DLV105'
			</if>
			<if test="ORDERSTATUSCODE !=null and ORDERSTATUSCODE == 'DLV230' ">
			AND TOM.STATUSCODE = 'DLV230'
			</if>
			
			<if test="SDATE !=null and SDATE != '' and EDATE !=null and EDATE != ''">
			AND TO_CHAR(TOO.REG_DT, 'YYYYMMDD') BETWEEN #{SDATE} AND #{EDATE}
			</if>
								   		
			<if test="SEARCHKEY !=null and SEARCHKEY != '' ">
		   		<if test="SEARCHTYPE !=null and SEARCHTYPE != '' ">
		   			<choose>
					  <when test="SEARCHTYPE != 'ALL'">
						  AND ${SEARCHTYPE} LIKE '%'||#{searchkey}||'%'
					  </when>
					  <when test="SEARCHTYPE == 'ALL'">
						  AND (
							  TOO.ORDERNO LIKE '%'||#{searchkey}||'%'
							  OR TOO.USER_NM LIKE '%'||#{searchkey}||'%'
							   )
					  </when>
				 	</choose>
		   		</if>							
			</if>
		ORDER BY TOO.REG_DT DESC
	</select>

	<!-- 독서실정보 삭제 -->
    <delete id="roomDeleteRoom" parameterType="hashMap" >
   		DELETE 
   			FROM TB_OFF_ROOM 
   			WHERE ROOM_CD=#{ROOM_CD}
   	</delete>

	<!-- 독서실 상세정보 삭제 -->
    <delete id="roomDeleteRoomNum" parameterType="hashMap" >
   		DELETE 
   			FROM TB_OFF_ROOM_NUM 
   			WHERE ROOM_CD=#{ROOM_CD}
   	</delete>

	<!-- 독서실 대여 이력정보 삭제 -->
    <delete id="roomDeleteRoomRent" parameterType="hashMap" >
   		DELETE 
   			FROM TB_OFF_ROOM_RENT 
   			WHERE ROOM_CD = #{ROOM_CD} AND ROOM_NUM = #{ROOM_NUM} AND RENT_SEQ = #{RENT_SEQ}
   	</delete>

	<!-- 독서실 대여 이력정보 삭제 (주문번호 이용) -->
    <delete id="roomDeleteRoomRentByOrderId" parameterType="hashMap" >
   		DELETE 
   			FROM TB_OFF_ROOM_RENT 
   			WHERE ORDER_ID = #{ORDER_ID} 
   	</delete>
   	
	<!-- 독서실 관련 3개 테이블 삭제 -->
    <delete id="roomDeleteRoomAll" parameterType="hashMap" >
	{call
        declare
        begin
	   		DELETE 
	   			FROM TB_OFF_ROOM_RENT WHERE ROOM_CD=#{ROOM_CD};
	   		DELETE 
	   			FROM TB_OFF_ROOM_NUM WHERE ROOM_CD=#{ROOM_CD};
	   		DELETE 
	   			FROM TB_OFF_ROOM WHERE ROOM_CD=#{ROOM_CD};
        end
    }
   	</delete>

	<!-- 독서실 등록 처리 -->
	<insert id="roomInsertProcess" parameterType="hashMap" flushCache="true" >
		INSERT INTO TB_OFF_ROOM(
			ROOM_CD,
			ROOM_NM,
			ROOM_COUNT,
			UPDATE_DT,
			UPDATE_ID,
			START_NUM,
			END_NUM
		)VALUES(
			#{ROOM_CD},
			#{ROOM_NM},
			#{ROOM_COUNT},
			SYSDATE,
			#{UPDATE_ID},
			#{START_NUM},
			#{END_NUM}
		)
	</insert>

	<!-- 독서실 등록 처리 -->
	<insert id="roomNumInsertProcess" parameterType="hashMap" flushCache="true" >
		INSERT INTO TB_OFF_ROOM_NUM(
			ROOM_CD,
			ROOM_NUM,
			USERID,
			ROOM_FLAG,
			UPDATE_DT,
			UPDATE_ID
		)VALUES(
			#{ROOM_CD},
			#{ROOM_NUM},
			'',
			'N',
			SYSDATE,
			#{UPDATE_ID}
		)
	</insert>
	
	<!-- 독서실 등록 처리 -->
	<insert id="roomRentInsertProcess" parameterType="hashMap" flushCache="true" >
		INSERT INTO TB_OFF_ROOM_RENT(
			ROOM_CD,     
			RENT_SEQ,        
			ROOM_NUM,    
			USERID,     
			RENT_START, 
			RENT_END,   
			EXTEND_YN,  
			RENT_MEMO,  
			UPDATE_DT,  
			UPDATE_ID,  
			RENT_TYPE,  
			PAY_GUBUN,  
			ORDER_ID    
		)VALUES(
			#{ROOM_CD},
			SEQ_ROOMRENT_ID.NEXTVAL,
			#{ROOM_NUM},
			#{USERID},
			#{RENT_START},
			#{RENT_END},
			#{EXTEND_YN},
			#{RENT_MEMO},
			SYSDATE,
			#{UPDATE_ID},
			#{RENT_TYPE},
			#{PAY_GUBUN},
			#{ORDER_ID}
		)
	</insert>
	
	<!-- 독서실 등록 처리 -->
	<insert id="offRefundInsertProcess" parameterType="hashMap" flushCache="true" >
		INSERT INTO TB_OFF_REFUND(
			IDX,     
			ORDER_ID,
			REFUND_PAY,
			SET_YN,
			SET_DATE,
			<if test="ACC_BANK_NAME !=null and ACC_BANK_NAME != '' ">
			ACC_BANK_NAME,
			</if>
			<if test="ACC_BANK_NUM !=null and ACC_BANK_NUM != '' ">
			ACC_BANK_NUM,
			</if>
			REG_DATE
		)VALUES(
			SEQ_TB_OFF_REFUND_IDX.NEXTVAL,
			#{ORDER_ID},
			#{REFUND_PRICE},
			'N',
			#{REFUND_DATE},
			<if test="ACC_BANK_NAME !=null and ACC_BANK_NAME != '' ">
			#{ACC_BANK_NAME},
			</if>
			<if test="ACC_BANK_NUM !=null and ACC_BANK_NUM != '' ">
			#{ACC_BANK_NUM},
			</if>
			SYSDATE
		)
	</insert>
		
	
	<!-- 독서실 대여 결제정보 테이블에서 최종 SEQ를 조회 -->
	<select id="getRoomRentSeq" parameterType="hashMap" resultType="int">
		SELECT NVL(MAX(RENT_SEQ),0) 
		FROM TB_OFF_ROOM_RENT 
		WHERE ROOM_CD = #{ROOM_CD} AND ROOM_NUM = #{ROOM_NUM} AND USERID = #{USERID}
	</select>	
	 
	<!--  오프라인 독서실 대여 주문 세부정보 등록 처리-->
	<insert id="offOrderMgntNoInsertProcess" parameterType="hashMap">
		INSERT INTO TB_OFF_ORDER_MGNT_NO ( 
			ORDERNO, 
			MGNTNO, 
			CNT, 
			ISCANCEL,
			<if test="CANCELDATE != null and CANCELDATE != '' ">
			CANCELDATE, 
			</if>			
			PRICE, 
			STATUSCODE,
			PTYPE,
			CONFIRMDATE, 
			ISCONFIRM,
			CONFIRMID,
			REG_ID,
			REG_DT
		) VALUES (
			#{ORDERNO}, 
			#{ORDERNO}, 
			1, 
			#{ISCANCEL},
			<if test="CANCELDATE != null and CANCELDATE != '0' ">
			#{CANCELDATE}, 
			</if>			
			#{PRICE_GET_TOTAL}, 
			#{STATUSCODE},
			'T',
			SYSDATE, 
			SYSDATE,
			#{ADMIN_ID},
			#{ADMIN_ID},
			SYSDATE
		)
	</insert>
	
	<!-- 오프라인 독서실 대여 주문 등록 처리-->
	<insert id="offOrdersInsertProcess" parameterType="hashMap">
		INSERT INTO TB_OFF_ORDERS (
			ORDERNO,
			USER_ID,
			USER_NM,
			TEL_NO,
			PHONE_NO,
			ZIP_CODE,
			ADDRESS1,
			ADDRESS2,
			EMAIL,
			OFF_LINE,
			REG_DT,
			REG_ID
		 ) SELECT  
			#{ORDERNO},
			#{USER_ID},
			USER_NM,
			TEL_NO,
			PHONE_NO,
			ZIP_CODE,
			ADDRESS1,
			ADDRESS2,
			EMAIL,
			#{ISOFFLINE},
			SYSDATE,
			#{ADMIN_ID}
		FROM TB_MA_MEMBER
			WHERE USER_ID = #{USER_ID}
	</insert>
	
	<!-- 오프라인 독서실 대여 결제정보 등록처리-->
	<insert id="offApprovalsInsertProcess" parameterType="hashMap">
		INSERT	INTO TB_OFF_APPROVALS (
			ORDERNO, 
			PRICE, 
			PRICE_CARD, 
			PRICE_CASH, 
			PRICE_DISCOUNT, 
			PRICE_DISCOUNT_REASON,
			PRICE_DISCOUNT_TYPE, 
			ADDPRICE, 
			PAYCODE, 
			ACCTNOCODE, 
			PAYNAME,  
			POINT, 
			REG_DT
		) VALUES ( 
			#{ORDERNO}, 
			#{PRICE_GET_TOTAL}, 
			#{PRICE_GET_CARD}, 
			#{PRICE_GET_CASH}, 
			#{PRICE_DISCOUNT_VALUE}, 
			#{PRICE_DISCOUNT_REASON}, 
			'W', 
			0, 
			#{PAYCODE}, 
			'ACT888', 
			#{USER_NM},
			0,
			SYSDATE
		)
	</insert>
		
	<!-- 독서실 정보를 업데이트한다. -->
	<update id="roomUpdateProcess" parameterType="hashMap">
		UPDATE TB_OFF_ROOM 
		SET 		
			ROOM_NM    = #{ROOM_NM},
			ROOM_COUNT = #{ROOM_COUNT},
			UPDATE_DT = SYSDATE,
			UPDATE_ID = #{UPDATE_ID},
			START_NUM = #{START_NUM},
			END_NUM   = #{END_NUM}
		WHERE 
			ROOM_CD=#{ROOM_CD}
	</update>

	<!-- 독서실 상세정보(독서실갯수,시작번호, 종료번호 제외)를 업데이트한다. -->
	<update id="roomUpdate2Process" parameterType="hashMap">
		UPDATE TB_OFF_ROOM 
		SET 		
			ROOM_NM    = #{ROOM_NM},
			UPDATE_DT = SYSDATE,
			UPDATE_ID = #{UPDATE_ID}
		WHERE 
			ROOM_CD=#{ROOM_CD}
	</update>

	<!-- 독서실 상세 정보를 업데이트한다. -->
	<update id="roomNumUpdateProcess" parameterType="hashMap">
		UPDATE TB_OFF_ROOM_NUM 
		SET 
			USERID    = #{USERID},
			ROOM_FLAG  = #{ROOM_FLAG},
			<if test="RENT_SEQ !=null">
			RENT_SEQ  = #{RENT_SEQ},
			</if> 
			<if test="RENT_MEMO !=null">
			RENT_MEMO = #{RENT_MEMO},
			</if>
			UPDATE_DT = SYSDATE,
			UPDATE_ID = #{UPDATE_ID}
		WHERE 
			ROOM_CD=#{ROOM_CD} AND ROOM_NUM=#{ROOM_NUM}
	</update>

	<!-- 독서실 상세 테이블에 환불정보를 업데이트한다. -->
	<update id="roomNumResetUpdateProcess" parameterType="hashMap">
		UPDATE TB_OFF_ROOM_NUM 
		SET 
			USERID    = '',
			ROOM_FLAG  = 'N',
			RENT_SEQ  = NULL,
			RENT_MEMO = '',
			UPDATE_DT = SYSDATE,
			UPDATE_ID = #{UPDATE_ID}
		WHERE 
			ROOM_CD=#{ROOM_CD} AND ROOM_NUM=#{ROOM_NUM}
			<if test="RENT_SEQ !=null and RENT_SEQ != '' ">
			AND RENT_SEQ = #{RENT_SEQ}
			</if>
	</update>

	<!-- 독서실 상세 테이블에 주문정보가 일치한다면 환불정보를 업데이트한다. -->
	<update id="roomNumResetUpdateByOrderIdProcess" parameterType="hashMap">
		UPDATE TB_OFF_ROOM_NUM 
		SET 
			USERID    = '',
			ROOM_FLAG  = 'N',
			RENT_SEQ  = NULL,
			RENT_MEMO = '',
			UPDATE_DT = SYSDATE,
			UPDATE_ID = #{UPDATE_ID}
		WHERE 
			ROOM_CD=#{ROOM_CD} AND ROOM_NUM=#{ROOM_NUM}
			AND RENT_SEQ IN (
				SELECT RENT_SEQ FROM TB_OFF_ROOM_RENT
				WHERE ORDER_ID  = #{ORDER_ID}
				)
	</update>


	<!-- 독서실 상세 테이블에 독서실 변경하기 업데이트한다. -->
	<update id="roomNumChangeUpdateProcess" parameterType="hashMap">
		UPDATE TB_OFF_ROOM_NUM
		SET (USERID, ROOM_FLAG, RENT_SEQ, RENT_MEMO) = 
		  	(SELECT USERID, ROOM_FLAG, RENT_SEQ, RENT_MEMO 
	  		FROM TB_OFF_ROOM_NUM 
		  	WHERE ROOM_CD=#{USED_ROOM_CD} AND ROOM_NUM=#{USED_ROOM_NUM})
		WHERE ROOM_CD=#{ROOM_CD} AND ROOM_NUM=#{ROOM_NUM}
	</update>


	<!-- 독서실 대여 신청 정보를 업데이트한다. -->
	<update id="roomNumRentUpdateProcess" parameterType="hashMap">
		UPDATE TB_OFF_ROOM_RENT 
		SET 
			<if test="USERID !=null and USERID != '' ">
			USERID	       = #{USERID},
			</if>
			<if test="RENT_START !=null and RENT_START != '' ">
			RENT_START     = #{RENT_START},
			</if>
			<if test="RENT_END !=null and RENT_END != '' ">
			RENT_END       = #{RENT_END},
			</if>
			<if test="EXTEND_YN !=null and EXTEND_YN != '' ">
			EXTEND_YN      = #{EXTEND_YN},
			</if>
			<if test="UPDATE_ID !=null and UPDATE_ID != '' ">
			UPDATE_ID      = #{UPDATE_ID},
			</if>
			<if test="RENT_TYPE !=null and RENT_TYPE != '' ">
			RENT_TYPE      = #{RENT_TYPE},
			</if>
			<if test="ORDER_ID !=null and ORDER_ID != '' ">
			ORDER_ID       = #{ORDER_ID},
			</if>
			<if test="PAY_GUBUN !=null and PAY_GUBUN != '' ">
			PAY_GUBUN      = #{PAY_GUBUN},
			</if>
			<if test="RENT_MEMO !=null">
			RENT_MEMO      = #{RENT_MEMO},	
			</if>
			UPDATE_DT      = SYSDATE
		WHERE 
			ROOM_CD=#{ROOM_CD} AND ROOM_NUM=#{ROOM_NUM} AND RENT_SEQ=#{RENT_SEQ}
	</update>


	<!-- 환불시 독서실 대여 신청 정보를 업데이트한다. -->
	<update id="roomNumRentRefundUpdateProcess" parameterType="hashMap">
		UPDATE TB_OFF_ROOM_RENT 
		SET 
			RENT_END       = SYSDATE,
			UPDATE_ID      = #{UPDATE_ID},
			UPDATE_DT      = SYSDATE
		WHERE 
			ROOM_CD=#{ROOM_CD} AND ROOM_NUM=#{ROOM_NUM} AND RENT_SEQ=#{RENT_SEQ}
	</update>

	<!-- 독서실 변경시 정보를 업데이트한다. -->
	<update id="roomRentChangeUpdateProcess" parameterType="hashMap">
		UPDATE TB_OFF_ROOM_RENT 
		SET 
			ROOM_CD		= #{ROOM_CD}, 
			ROOM_NUM	= #{ROOM_NUM}, 
			UPDATE_ID   = #{UPDATE_ID},
			UPDATE_DT   = SYSDATE
		WHERE 
			RENT_SEQ=#{RENT_SEQ}
	</update>



	<!-- 독서실 대여신청 결제정보를 업데이트한다. -->
	<update id="offApprovalsUpdateProcess" parameterType="hashMap">
		UPDATE TB_OFF_APPROVALS 
		SET 
			PRICE_DISCOUNT  	= #{PRICE_DISCOUNT_VALUE},
			PRICE       		= #{PRICE_GET_TOTAL},
			PRICE_CARD        	= #{PRICE_GET_CARD},
			PRICE_CASH	      	= #{PRICE_GET_CASH},
			<if test="PRICE_DISCOUNT_REASON !=null">
			PRICE_DISCOUNT_REASON = #{PRICE_DISCOUNT_REASON},
			</if>
			PAYCODE = #{PAYCODE}	
		WHERE 
			ORDERNO=#{ORDER_ID}
	</update>

	<!-- 독서실 대여신청 결제정보를 업데이트한다. -->
	<update id="offApprovalsRefundUpdateProcess" parameterType="hashMap">
		UPDATE TB_OFF_APPROVALS 
		SET 
			REPRICE			= #{REFUND_PRICE},
			REPRICEDATE 	= TO_DATE(#{REFUND_DATE}, 'YYYYMMDD') 
		WHERE 
			ORDERNO=#{ORDERNO}
	</update>
	
	<!-- 독서실 상태값 정보를 업데이트한다. -->
	<update id="updateRoomFlagAsync" parameterType="hashMap">
		UPDATE TB_OFF_ROOM_NUM 
		SET 
			ROOM_FLAG  = #{ROOM_FLAG}
		WHERE 
			ROOM_CD=#{ROOM_CD} AND ROOM_NUM=#{ROOM_NUM}
	</update>
	
	<!-- 오프라인 주문정보 테이블에서 사용할 주문번호를 생성하여 리턴 -->
	<select id="getOffOrderNo" parameterType="hashMap" resultType="string">
		 SELECT GET_NEXTSEQ_OFFORDERNO(#{PTYPE}) FROM DUAL
	</select>
	

</mapper>
