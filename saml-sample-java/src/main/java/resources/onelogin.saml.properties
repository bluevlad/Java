#  If 'strict' is True, then the Java Toolkit will reject unsigned
#  or unencrypted messages if it expects them signed or encrypted
#  Also will reject the messages if not strictly follow the SAML
onelogin.saml2.strict =  true

# Enable debug mode (to print errors)
onelogin.saml2.debug =  false


#  Service Provider Data that we are deploying
#

#  Identifier of the SP entity  (must be a URI) /* \ubcc0\uacbd\ub420 \ud56d\ubaa9 */
onelogin.saml2.sp.entityid = http://127.0.0.1/metadata.jsp

# Specifies info about where and how the <AuthnResponse> message MUST be
#  returned to the requester, in this case our SP.
# URL Location where the <Response> from the IdP will be returned /* \ubcc0\uacbd\ub420 \ud56d\ubaa9 */
onelogin.saml2.sp.assertion_consumer_service.url = http://127.0.0.1/acs.jsp

# SAML protocol binding to be used when returning the <Response>
# message.  Onelogin Toolkit supports for this endpoint the
# HTTP-POST binding only
onelogin.saml2.sp.assertion_consumer_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST

# Specifies info about where and how the <Logout Response> message MUST be
# returned to the requester, in this case our SP. /* \ubcc0\uacbd\ub420 \ud56d\ubaa9 */
onelogin.saml2.sp.single_logout_service.url = http://127.0.0.1/sls.jsp

# SAML protocol binding to be used when returning the <LogoutResponse> or sending the <LogoutRequest>
# message.  Onelogin Toolkit supports for this endpoint the
# HTTP-Redirect binding only
onelogin.saml2.sp.single_logout_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect

# Specifies constraints on the name identifier to be used to
# represent the requested subject.
# Take a look on lib/Saml2/Constants.php to see the NameIdFormat supported
onelogin.saml2.sp.nameidformat = urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified

# Usually x509cert and privateKey of the SP are provided by files placed at
# the certs folder. But we can also provide them with the following parameters

onelogin.saml2.sp.x509cert = 

# Requires Format PKCS#8   BEGIN PRIVATE KEY         /* \ubcc0\uacbd\ub420 \ud56d\ubaa9 */
# If you have     PKCS#1   BEGIN RSA PRIVATE KEY  convert it by   openssl pkcs8 -topk8 -inform pem -nocrypt -in sp.rsa_key -outform pem -out sp.pem
onelogin.saml2.sp.privatekey = MIIEpAIBAAKCAQEAzZjnIxZErLi3m23FJXDnC2wO1YqSfgpChA5lsyjeYhtRfw+SI8qrN59MNoXhsqB1samGWvWOn+mRf1s9r9uokv2q+ebdTsSigBjR5uemb5PyqNmUnGSYnNM6Q/kPbmeNrNpLXTIdZlWp7wWMyEFDEJG/TMSTk9h6BYkYdFUp5pE3IUUjbtsGaa1+BIdtWKTUNIMOz+Q5zBpRXb1MPyVFkVLl18P8druPT/8Qf/11aEVB3EWP2FitrwxuIoGa1LyDJ+Dji8ltGBN+hq8+BDASs7Fs1TtiHxVRwH/IQod5KsKLKJ4h2T1NhOcRKfilWZi6A+0Q8GmaWWwCxq5Y1p1OPQIDAQABAoIBABTQLlH4fqJHntq+vY8BQ3p+CXBns1XMHxi0RmphMEYZQuJMhrxV14hteW8plYQaR1/hbAcIRdR9divA5llHsOSUhnr++pdvQ44ZNSKdf9Va0l1yjV9ZtbNmlMbtzzibhhWiEbAREzXZZTcbxjk9lhb20jloyxHT/+JQkyevuWqsSSLPXjW5gpQp+AztoUcIQvA7kgSDduAou5noSr4vxNRNvOaqy+1mycIlPI3SiGQyIlBYitrFdyFfQB4rOSc/CS3rxk+87Z6KLFfZgFfJtGOvKXIo2FPC1nzeh7CCAzX1NBuHSWl3J7esHGm16noc2PVbAzPMrMWZ0/OyARy0agcCgYEA+DkzM92Q2nRVXID+/7Xp8xYYWaK0dmY3/Fljwe2+xynJh6SI5EXtos5SVI39VcFhSIkoNSo3t270dDp/NTPYFdDwMiynEGh9faZ3BC/a/itYM3ufsLBFDL1KlzlCkeCsdFfMXpMWs8G0hBzY315+VRNeg1NqvZbrmtxInlE2F+sCgYEA1AnVM01PyyiB+CdEMzDNhIMgXJ40yKQUskFM/naT48ltWLSLd0JkMQnEtTDB7ws2rtqndzjLjiHADtenqx+VLIkpcbQ1HtVerORkl7LMkyNd1H4eZ39mNLOuVKFoGtxoi5Z7LX32jcTTH8NG2pqk+Uuy0mtvtHIkW0caNB4MkHcCgYEA1TUsicwyc7Gg8IfMgA/dF3NPDw72Owyp4hNV4Gk5iRCXje8BtjFqYIEfrokXpOUpjohhBOlyWhjv2DW2thgF7xc8eZxpE2rs/1RQvkPssozAgdgZ3kZJyRt+Sk5go7R77KLNZB6rTVOAnkm47oPXt3OfpuWrtZVAYg/8QCA5emkCgYEAwzeyVKNPXaoTzxbH0aGS9feL6fm2eyul6l/4tScTDds7kznWVZyIhiWKN4+GXcEjPWUOXdOqhVdJbeDa+8/+FZzKzWauqY6kteUpQAlcE/OxxZu//mXrAYaUcFKSeHiIwEtxaPbZ8rhN8KZnK4jJbsRlBRnpJGcaVfdmhqlLxA0CgYAi4XYHVLwgWcx1gBuQR50Rc/fuX8mbU30XOWCSid/tfy/rmiNx5neUEWnkignVqyMAbgxySVT0E3TjorgJoyDtfeur1J9xjMT7iNj3WVjZ3M0M8HYMlH7NTdG32OI1x0jXNFJrDO6Rjop7kGEZ0RGhO+pFuDdbfrHlsspwMphCdQ==

# Identity Provider Data that we want connect with our SP
#

# Identifier of the IdP entity  (must be a URI) /* \ubcc0\uacbd\ub420 \ud56d\ubaa9 */
onelogin.saml2.idp.entityid = 1lsdkze56xz1l

# SSO endpoint info of the IdP. (Authentication Request protocol) /* \ubcc0\uacbd\ub420 \ud56d\ubaa9 */
# URL Target of the IdP where the SP will send the Authentication Request Message
onelogin.saml2.idp.single_sign_on_service.url = https://sso.hmetc.com/IdPServlet?idp_id=1lsdkze56xz1l
# SAML protocol binding to be used when returning the <Response>
# message.  Onelogin Toolkit supports for this endpoint the
# HTTP-Redirect binding only
onelogin.saml2.idp.single_sign_on_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect

# SLO endpoint info of the IdP.
# URL Location of the IdP where the SP will send the SLO Request
onelogin.saml2.idp.single_logout_service.url =

# Optional SLO Response endpoint info of the IdP.
# URL Location of the IdP where the SP will send the SLO Response. If left blank, same URL as onelogin.saml2.idp.single_logout_service.url will be used.
# Some IdPs use a separate URL for sending a logout request and response, use this property to set the separate response url
onelogin.saml2.idp.single_logout_service.response.url =

# SAML protocol binding to be used when returning the <Response>
# message.  Onelogin Toolkit supports for this endpoint the
# HTTP-Redirect binding only
onelogin.saml2.idp.single_logout_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect

# Public x509 certificate of the IdP /* \ubcc0\uacbd\ub420 \ud56d\ubaa9 */
onelogin.saml2.idp.x509cert = MIICrjCCAZagAwIBAgIGAXAWDR+BMA0GCSqGSIb3DQEBCwUAMBgxFjAUBgNVBAMTDXNzby5obWV0Yy5jb20wHhcNMjAwMjA1MTU1MjAzWhcNMjQwMjA1MTU1MjAzWjAYMRYwFAYDVQQDEw1zc28uaG1ldGMuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzZjnIxZErLi3m23FJXDnC2wO1YqSfgpChA5lsyjeYhtRfw+SI8qrN59MNoXhsqB1samGWvWOn+mRf1s9r9uokv2q+ebdTsSigBjR5uemb5PyqNmUnGSYnNM6Q/kPbmeNrNpLXTIdZlWp7wWMyEFDEJG/TMSTk9h6BYkYdFUp5pE3IUUjbtsGaa1+BIdtWKTUNIMOz+Q5zBpRXb1MPyVFkVLl18P8druPT/8Qf/11aEVB3EWP2FitrwxuIoGa1LyDJ+Dji8ltGBN+hq8+BDASs7Fs1TtiHxVRwH/IQod5KsKLKJ4h2T1NhOcRKfilWZi6A+0Q8GmaWWwCxq5Y1p1OPQIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQCN6qAXGFFsyKz5MiwaOKTUpGZ/EeJXEwykJNzA3Ow56/2M5OiilCJo60u0nD56RcZ781/uL+bxxz71wwQAnR8iOx4tkpCfX8vD/uxOApu3VX1k1JTPv3QD1CwnX8qI4oYE4VBAFnf7sz2rinoAtfJSJpeU2o6oTqIikBV6o/KeaLXaGFy85eMVs54+bQWe1k+NeLP56BAuo2U6S3tOeqWFiPaW1rcnVN9Z2R7AqM29Mv8loG4e81pUpy4+9HgTYKaWPOcXXbgkINIDBDkXEksy9r7sqV1hQuKBWke61XaZbcJAF3gwVuNDjh5T5n9Mbsmym4pA58/8V8y15HWvYDNB

# Instead of use the whole x509cert you can use a fingerprint
# (openssl x509 -noout -fingerprint -in "idp.crt" to generate it,
# or add for example the -sha256 , -sha384 or -sha512 parameter)
#
# If a fingerprint is provided, then the certFingerprintAlgorithm is required in order to
# let the toolkit know which Algorithm was used. Possible values: sha1, sha256, sha384 or sha512
# 'sha1' is the default value.
# onelogin.saml2.idp.certfingerprint = 
# onelogin.saml2.idp.certfingerprint_algorithm = sha1


# Security settings
#

# Indicates that the nameID of the <samlp:logoutRequest> sent by this SP
# will be encrypted.
onelogin.saml2.security.nameid_encrypted = false

# Indicates whether the <samlp:AuthnRequest> messages sent by this SP
# will be signed.              [The Metadata of the SP will offer this info]
onelogin.saml2.security.authnrequest_signed = false

# Indicates whether the <samlp:logoutRequest> messages sent by this SP
# will be signed.
onelogin.saml2.security.logoutrequest_signed = false

# Indicates whether the <samlp:logoutResponse> messages sent by this SP
# will be signed.
onelogin.saml2.security.logoutresponse_signed = false

# Indicates a requirement for the <samlp:Response>, <samlp:LogoutRequest> and
# <samlp:LogoutResponse> elements received by this SP to be signed.
onelogin.saml2.security.want_messages_signed = false

# Indicates a requirement for the <saml:Assertion> elements received by this SP to be signed.
onelogin.saml2.security.want_assertions_signed = false

# Indicates a requirement for the Metadata of this SP to be signed.
# Right now supported null (in order to not sign) or true (sign using SP private key) 
onelogin.saml2.security.sign_metadata =

# Indicates a requirement for the Assertions received by this SP to be encrypted
onelogin.saml2.security.want_assertions_encrypted = false

# Indicates a requirement for the NameID received by this SP to be encrypted
onelogin.saml2.security.want_nameid_encrypted = false

# Authentication context.
# Set Empty and no AuthContext will be sent in the AuthNRequest
# You can set multiple values (comma separated them)
onelogin.saml2.security.requested_authncontext = urn:oasis:names:tc:SAML:2.0:ac:classes:Password

# Allows the authn comparison parameter to be set, defaults to 'exact'
onelogin.saml2.security.onelogin.saml2.security.requested_authncontextcomparison = exact


# Indicates if the SP will validate all received xmls.
# (In order to validate the xml, 'strict' and 'wantXMLValidation' must be true).
onelogin.saml2.security.want_xml_validation = true

# Algorithm that the toolkit will use on signing process. Options:
#  'http://www.w3.org/2000/09/xmldsig#rsa-sha1'
#  'http://www.w3.org/2000/09/xmldsig#dsa-sha1'
#  'http://www.w3.org/2001/04/xmldsig-more#rsa-sha256'
#  'http://www.w3.org/2001/04/xmldsig-more#rsa-sha384'
#  'http://www.w3.org/2001/04/xmldsig-more#rsa-sha512'
onelogin.saml2.security.signature_algorithm = http://www.w3.org/2000/09/xmldsig#rsa-sha1

# Organization
onelogin.saml2.organization.name = SP Java 
onelogin.saml2.organization.displayname = SP Java Example
onelogin.saml2.organization.url = http://sp.example.com
onelogin.saml2.organization.lang = 

# Contacts
onelogin.saml2.contacts.technical.given_name = Technical Guy
onelogin.saml2.contacts.technical.email_address = technical@example.com
onelogin.saml2.contacts.support.given_name = Support Guy
onelogin.saml2.contacts.support.email_address = support@@example.com