<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="freeOrder">

<!-- 수강신청 리스트-->
<select id="getMaMemberFreeOrderList"  parameterType="hashMap" resultType="hashMap">
	SELECT * FROM (
		SELECT ROWNUM AS RNUM, H.* FROM (

          	SELECT  USER_ID
          			,USER_NM
          			,BIRTH_DAY
          			,PHONE_NO
                    ,TEL_NO
                    ,EMAIL
            FROM  TB_MA_MEMBER
            WHERE USER_ROLE = 'USER'

            <if test="keyword !=null and keyword != '' ">
            	AND (USER_NM like '%'||#{keyword}||'%' or USER_ID like '%'||#{keyword}||'%')
            </if>

            ORDER BY REG_DT DESC

		) H WHERE ROWNUM <![CDATA[ <= ]]> #{endNo}
	) WHERE RNUM  > #{startNo}
</select>

<!-- 수강신청 카운트-->
<select id="getMaMemberListFreeOrderCount" parameterType="hashMap" resultType="int">
	SELECT COUNT(*)
	FROM  TB_MA_MEMBER
    WHERE USER_ROLE = 'USER'

    <if test="keyword !=null and keyword != '' ">
    	AND (USER_NM like '%'||#{keyword}||'%' or USER_ID like '%'||#{keyword}||'%')
    </if>

</select>

<!-- 수강신청 등록 팝업 리스트(신규)-->
<select id="getCbLecMstBean"  parameterType="hashMap" resultType="hashMap">
	select  a.subject_jang
		  , a.subject_pass
		  , a.seq
		  , a.leccode
		  , a.CATEGORY_CD cat_cd
		  , b.NAME cat_nm
		  , a.LEARNING_CD menu_id
		  , c.NAME menu_nm
		  , a.subject_teacher
		  , d.user_nm
		  , a.subject_title
		  , a.subject_desc
		  , a.subject_memo
		  , a.subject_keyword
		  , a.subject_period
		  , a.subject_off_open_year
		  , a.subject_off_open_month
		  , a.subject_discount
		  , a.subject_point
		  , a.subject_movie
		  , a.subject_pmp
		  , a.subject_movie_pmp
		  , a.subject_sumnail
		  , a.subject_event_image
		  , a.subject_outside
		  , a.subject_option
		  , a.subject_isuse
		  , a.UPD_ID update_id
		  , a.reg_dt
		  , a.UPD_DT update_dt
		  , a.subject_sjt_cd
		  , a.lec_type_choice
          , a.subject_off_open_day
          , a.subject_vod_default_path
          , a.subject_pmp_default_path
          , a.subject_price
          , a.subject_mp4_default_path
          , nvl(a.re_course,'N') as re_course
          , a.subject_movie_mp4
          , a.subject_movie_vod_mp4
          , a.lec_schedule
          , TO_CHAR(sysdate, 'YYYYMMDD') to_date
    from TB_LEC_MST a
    left outer join TB_CATEGORY_INFO b
    on a.CATEGORY_CD = b.CODE
    left outer join TB_LEARNING_FORM_INFO c
    on a.LEARNING_CD = c.CODE
    and c.LEC_DIV = 'LEC_A'
    left outer join TB_MA_MEMBER d
    on a.subject_teacher = d.USER_ID

    where a.leccode = #{leccode}
</select>

<!-- 수강변경 팝업 리스트(이전)-->
<select id="getCbLecMstBean_2"  parameterType="hashMap" resultType="hashMap">
	select  a.subject_jang
		  , a.subject_pass
		  , a.seq
		  , a.leccode
		  , a.CATEGORY_CD cat_cd
		  , b.NAME cat_nm
		  , a.LEARNING_CD menu_id
		  , c.NAME menu_nm
		  , a.subject_teacher
		  , d.user_nm
		  , a.subject_title
		  , a.subject_desc
		  , a.subject_memo
		  , a.subject_keyword
		  , a.subject_period
		  , a.subject_off_open_year
		  , a.subject_off_open_month
		  , a.subject_discount
		  , a.subject_point
		  , a.subject_movie
		  , a.subject_pmp
		  , a.subject_movie_pmp
		  , a.subject_sumnail
		  , a.subject_event_image
		  , a.subject_outside
		  , a.subject_option
		  , a.subject_isuse
		  , a.UPD_ID update_id
		  , a.reg_dt
		  , a.UPD_DT update_dt
		  , a.subject_sjt_cd
		  , a.lec_type_choice
          , a.subject_off_open_day
          , a.subject_vod_default_path
          , a.subject_pmp_default_path
          , a.subject_price
          , a.subject_mp4_default_path
          , nvl(a.re_course,'N') as re_course
          , a.subject_movie_mp4
          , a.subject_movie_vod_mp4
          , a.lec_schedule
          , TO_CHAR(sysdate, 'YYYYMMDD') to_date
    from TB_LEC_MST a
    left outer join TB_CATEGORY_INFO b
    on a.CATEGORY_CD = b.CODE
    left outer join TB_LEARNING_FORM_INFO c
    on a.LEARNING_CD = c.CODE
    and c.LEC_DIV = 'LEC_A'
    left outer join TB_MA_MEMBER d
    on a.subject_teacher = d.USER_ID

    where a.leccode = #{package_no}
</select>

<!-- 강의선택 팝업 카테고리 셀렉트박스 리스트-->
<select id="getCaCatCdList"  parameterType="hashMap" resultType="hashMap">
	select CODE
		 , NAME
    from TB_CATEGORY_INFO
    where ISUSE = 'Y'
    and CODE is not null
    and CODE != 'HOME'
    and CODE != '999'
	and P_CODE = 'CLASSCODE'
    order by CODE asc
</select>

<!-- 강의선택 팝업 학습형태 셀렉트박스 리스트-->
<select id="getVwMenuMstTree_lec"  parameterType="hashMap" resultType="hashMap">
	SELECT CODE
		, (SELECT CODE_NM FROM TB_BA_CONFIG_CD WHERE SYS_CD = 'LEC_FORM' AND CODE_CD = A.LEC_DIV AND ISUSE = 'Y') || '-' || NAME AS NAME
    FROM TB_LEARNING_FORM_INFO A
    where ISUSE = 'Y'

 	order by CODE
</select>

<!-- 강의선택 팝업 과목 셀렉트박스 리스트-->
<select id="getCaSubjectCdList"  parameterType="hashMap" resultType="hashMap">
	select SUBJECT_CD
		 , SUBJECT_NM
    from TB_SUBJECT_INFO
    where ISUSE = 'Y'

 	order by SUBJECT_CD
</select>

<!-- 강의선택 팝업  리스트-->
<select id="getCbLecMstFreeOrderList"  parameterType="hashMap" resultType="hashMap">
	SELECT * FROM (
		SELECT ROWNUM AS RNUM, H.* FROM (

          	select a.seq
          			, a.leccode
          			, a.CATEGORY_CD
          			, b.NAME cat_nm
          			, a.LEARNING_CD menu_id
          			, c.NAME menu_nm
          			, a.subject_title
          			, a.subject_off_open_month
          			, a.subject_off_open_year
          			, a.reg_dt
          			, d.user_nm
          			, a.subject_isuse
          			, e.subject_nm
          			, f.bridge_leccode
          			, A.SUBJECT_DISCOUNT
                    , A.SUBJECT_PRICE
                    , A.SUBJECT_MOVIE
                    , A.SUBJECT_PERIOD
	        from TB_LEC_MST a
	        left outer join TB_CATEGORY_INFO b
	        on a.CATEGORY_CD = b.CODE
	        left outer join TB_LEARNING_FORM_INFO c
	        on a.LEARNING_CD = c.CODE
	        left outer join TB_MA_MEMBER d
	        on a.subject_teacher = d.USER_ID
	        left outer join TB_SUBJECT_INFO e
	        on a.subject_sjt_cd = e.SUBJECT_CD
	        left outer join TB_LEC_BRIDGE f
	        on a.leccode = f.leccode

			where a.LEC_TYPE_CHOICE  in ('D', 'J', 'N', 'P', 'Y')

            <if test="s_cat_cd !=null and s_cat_cd != '' ">
				AND a.CATEGORY_CD  =   #{s_cat_cd}
			</if>

			<if test="s_menu_id !=null and s_menu_id != '' ">
				AND a.LEARNING_CD  =   #{s_menu_id}
			</if>

			<if test="s_sjt_cd !=null and s_sjt_cd != '' ">
				AND a.subject_sjt_cd  =   #{s_sjt_cd}
			</if>

			<if test="search_keyword != null and search_keyword != '' ">
				<choose>
					<when test="search_type == 1">
					AND d.user_nm LIKE '%'||#{search_keyword}||'%'
				    </when>
					<when test="search_type == 2">
					AND a.leccode LIKE '%'||#{search_keyword}||'%'
					</when>
					<when test="search_type == 3">
					AND a.subject_title LIKE '%'||#{search_keyword}||'%'
					</when>
				</choose>
			</if>

            order by a.LEC_TYPE_CHOICE asc , a.subject_sjt_cd asc, a.seq desc, a.subject_off_open_year + a.subject_off_open_month + a.subject_off_open_day desc



		) H WHERE ROWNUM <![CDATA[ <= ]]> #{endNo}
	) WHERE RNUM  > #{startNo}
</select>

<!-- 강의선택 팝업  카운트-->
<select id="getCbLecMstListFreeOrderCount" parameterType="hashMap" resultType="int">
	SELECT COUNT(*)
	from TB_LEC_MST a
    left outer join TB_CATEGORY_INFO b
    on a.CATEGORY_CD = b.CODE
    left outer join TB_LEARNING_FORM_INFO c
    on a.LEARNING_CD = c.CODE
	and c.LEC_DIV = 'LEC_A'
    left outer join TB_MA_MEMBER d
    on a.subject_teacher = d.USER_ID
    left outer join TB_SUBJECT_INFO e
    on a.subject_sjt_cd = e.SUBJECT_CD
    left outer join TB_LEC_BRIDGE f
    on a.leccode = f.leccode

	where a.LEC_TYPE_CHOICE  in ('D', 'J', 'N', 'P', 'Y')

    <if test="s_cat_cd !=null and s_cat_cd != '' ">
		AND a.CATEGORY_CD  =   #{s_cat_cd}
	</if>

	<if test="s_menu_id !=null and s_menu_id != '' ">
		AND a.LEARNING_CD  =   #{s_menu_id}
	</if>

	<if test="s_sjt_cd !=null and s_sjt_cd != '' ">
		AND a.subject_sjt_cd  =   #{s_sjt_cd}
	</if>

	<if test="search_keyword != null and search_keyword != '' ">
		<choose>
			<when test="search_type == 1">
			AND d.user_nm LIKE '%'||#{search_keyword}||'%'
		    </when>
			<when test="search_type == 2">
			AND a.leccode LIKE '%'||#{search_keyword}||'%'
			</when>
			<when test="search_type == 3">
			AND a.subject_title LIKE '%'||#{search_keyword}||'%'
			</when>
		</choose>
	</if>

</select>









<!-- 수강신청 등록 팝업 등록처리 채번-->
<select id="getMCount" parameterType="hashMap" resultType="hashMap">
	select GET_NEXTSEQ_ORDERNO(#{ORDERNO_COUNT}) ORDERNO_COUNT
  	from dual
</select>

<select id="getMUser" parameterType="hashMap" resultType="hashMap">
	select USER_ID from TB_MA_MEMBER where USER_ID = #{userid}
</select>

<!--수강신청 등록 팝업 등록처리-->
<insert id="insertLecture1" parameterType="hashMap">
	insert INTO tb_order_mgnt_no
		(orderNo, mgntNo, cnt, isCancel, price, statusCode, CONFIRMDATE, sdate, isconfirm, wmv_pmp, orderurl, open_admin_id, PTYPE, memo)
	values
		(#{orderno}, #{leccode}, 1, 0, #{subject_price}, #{statuscode}, sysdate, #{start_date}, sysdate, #{wmv_check}, #{USER_IP}, #{USER_ID}, SUBSTR(#{leccode},1,1), #{memo})
</insert>

<!-- 수강신청 등록 팝업 등록처리-->
<insert id="insertLecture2" parameterType="hashMap">
	INSERT INTO tb_orders
		( orderNo,
		USER_ID,
		USER_NM,
		TEL_NO,
		PHONE_NO,
		ZIP_CODE,
		ADDRESS1,
		ADDRESS2,
		EMAIL,
		REG_DT,
		OFF_LINE
		 )
	VALUES
		(
		#{orderno},
		#{userid},
		(SELECT USER_NM
		FROM  TB_MA_MEMBER
		where USER_ID = #{userid}),
		(SELECT TEL_NO
		FROM  TB_MA_MEMBER
		where USER_ID = #{userid}),
		(SELECT PHONE_NO
		FROM  TB_MA_MEMBER
		where USER_ID = #{userid}),
		(SELECT ZIP_CODE
		FROM  TB_MA_MEMBER
		where USER_ID = #{userid}),
		(SELECT ADDRESS1
		FROM  TB_MA_MEMBER
		where USER_ID = #{userid}),
		(SELECT ADDRESS2
		FROM  TB_MA_MEMBER
		where USER_ID = #{userid}),
		(SELECT EMAIL
		FROM  TB_MA_MEMBER
		where USER_ID = #{userid}),
		SYSDATE,
		'0'
		 )
</insert>

<!--수강신청 등록 팝업 등록처리-->
<insert id="insertLecture3" parameterType="hashMap">
	insert	INTO tb_approvals
		(orderNo, price, addPrice, payCode, AcctNoCode,payName,  point, REG_DT)
	values
		(#{orderno}, #{subject_price}, 0, 'PAY100', 'ACT110', (SELECT USER_NM FROM  TB_MA_MEMBER where USER_ID = #{userid}),0,sysdate)
</insert>

<!--수강신청 등록 팝업 등록처리-->
<insert id="insertLecture4" parameterType="hashMap">
	insert INTO	TB_MYLECTURE
		( orderNo
		, USERID
		, package_no
		, lecture_no
		, START_DATE
		, END_DATE
		, PERIOD
		, STUDY_PERCENT
		, PLAYYN
		, REG_DT)
	values
		( #{orderno}
		, #{userid}
		, #{mgntno}
		, #{Leccode}
		, to_date(#{start_date}, 'YYYYMMDD')
		, TO_DATE(TO_CHAR(to_date(#{start_date}, 'YYYYMMDD')+#{subject_period}-1, 'YYYYMMDD'), 'YYYYMMDD')
		, #{subject_period}
		, 0
		, 'Y'
		, SYSDATE)
</insert>
<!--연회원패키지 등록처리-->
<insert id="insertLecture5" parameterType="hashMap">
	
	INSERT INTO TB_ORDER_YEARPACKAGE 
	(
		ORDERNO, PACKAGE_NO, SUBJECT_TEACHER, LEARNING_CD, REG_DT, START_DATE, END_DATE	
	)
     SELECT #{orderno}, #{mgntno}, B.SUBJECT_TEACHER, 'M0101', SYSDATE, SYSDATE, SYSDATE+#{subject_period}-1 
     FROM TB_LEC_JONG A, TB_LEC_MST B
     WHERE A.MST_LECCODE = B.LECCODE
     AND A.LECCODE = #{mgntno}
     GROUP BY B.SUBJECT_TEACHER
            
</insert>

<select id="getLeccode" parameterType="hashMap" resultType="hashMap">
	select MST_LECCODE from TB_LEC_JONG where LECCODE = #{leccode}
</select>
















<!-- 수강변경 리스트-->
<select id="getChangeList"  parameterType="hashMap" resultType="hashMap">
	SELECT * FROM (
		SELECT ROWNUM AS RNUM, H.* FROM (

          	select  a.orderNo,
			        a.user_id,
			        a.USER_NM as user_name,
			        b.mgntNo as package_no,
			        d.subject_title as package_name,
			        b.price,
			        b.statusCode,
			        (case  b.statusCode when 'DLV100' then '입금확인중'
			                when 'DLV105' then '입금완료'
			        		when 'DLV110' then '배송준비중'
			        		when 'DLV120' then '배송중'
							when 'DLV130' then '배송완료'
							when 'DLV140' then '취소요청'
							when 'DLV150' then '취소완료'
							when 'DLV160' then '교환요청'
							when 'DLV170' then '교환배송중'
							when 'DLV180' then '교환완료'
							when 'DLV220' then '환불요청'
							when 'DLV230' then '환불완료'
							when 'DLV240' then '결제에러'
					end) statusName,
			        TO_CHAR(a.REG_DT, 'YYYY-MM-DD hh24:mi:ss') regDate
	        from tb_orders a, tb_order_mgnt_no b, TB_LEC_MST d, TB_MA_MEMBER e
	        where a.orderNo = b.orderNo
	        and b.mgntNo = d.leccode
	        and a.user_id = e.USER_ID
	        and b.PTYPE <![CDATA[ <> ]]> 'L'

            <if test="keyword !=null and keyword != '' ">
            	AND (a.USER_NM like '%'||#{keyword}||'%' or a.USER_ID like '%'||#{keyword}||'%')
            </if>

            ORDER BY a.REG_DT DESC,a.USER_NM,b.statusCode

		) H WHERE ROWNUM <![CDATA[ <= ]]> #{endNo}
	) WHERE RNUM  > #{startNo}
</select>

<!-- 수강변경 카운트-->
<select id="getChangeListCount" parameterType="hashMap" resultType="int">
	SELECT COUNT(*)
	from tb_orders a, tb_order_mgnt_no b, TB_LEC_MST d, TB_MA_MEMBER e
    where a.orderNo = b.orderNo
    and b.mgntNo = d.leccode
    and a.user_id = e.USER_ID
    and b.PTYPE <![CDATA[ <> ]]> 'L'

    <if test="keyword !=null and keyword != '' ">
    	AND (a.USER_NM like '%'||#{keyword}||'%' or a.USER_ID like '%'||#{keyword}||'%')
    </if>

</select>

<!-- 수강변경 상세  리스트-->
<select id="getChangeViewList"  parameterType="hashMap" resultType="hashMap">
	select *
	from (select a.leccode package_no
			,a.subject_title package_name,
  			b.sdate,
			c.orderNo,
			c.USER_ID userId,
			'동영상강좌' gbnName,
			a.subject_title name,
			a.subject_price price,
			a.SUBJECT_DISCOUNT rate,
			b.Price realprice,
			b.cnt,
			b.statusCode ,
			b.wmv_pmp,
            nvl((SELECT new_package_no FROM TB_RENEW_HISTORY WHERE (orderNo = b.orderNo) AND (new_package_no = b.mgntNo)), '') AS new_package_no1,
			(b.Price * b.cnt) tot_price,
			(case  b.statusCode
					when 'DLV100' then '입금확인중'
	                when 'DLV105' then '입금완료'
	        		when 'DLV110' then '배송준비중'
	        		when 'DLV120' then '배송중'
					when 'DLV130' then '배송완료'
					when 'DLV140' then '취소요청'
					when 'DLV150' then '취소완료'
					when 'DLV160' then '교환요청'
					when 'DLV170' then '교환배송중'
					when 'DLV180' then '교환완료'
					when 'DLV220' then '환불요청'
					when 'DLV230' then '환불완료'
					when 'DLV240' then '결제에러'
					end) statusCodeName,
			nvl(f.old_package_no, '') as old_package_no2,
			nvl(f.new_package_no, '') as new_package_no2,
			B.ISCANCEL,B.ISCONFIRM, B.CANCELDATE
	from	TB_LEC_MST a,
            tb_order_mgnt_no b
            LEFT OUTER JOIN TB_RENEW_HISTORY f
            ON f.orderNo = b.orderNo AND f.old_package_no = b.mgntNo,
			tb_orders c
 	where	a.leccode = b.mgntNo
	and b.orderNo = c.orderNo
	and c.orderNo = #{orderno}

   	union all

	select	a.rsc_id package_no
			,a.book_nm package_name,
			b.sdate,
			c.orderNo,
			c.USER_ID userId,
			'도서' gbnName,
			a.book_nm name,
			a.price price,
			a.discount rate,
			b.price realprice,
			b.cnt,
			b.statusCode ,
			'도서' wmv_pmp,
            nvl((SELECT new_package_no FROM TB_RENEW_HISTORY WHERE (orderNo = b.orderNo) AND (new_package_no = b.mgntNo)), '') AS new_package_no1,
			(b.Price * b.cnt) tot_price,
			(case  b.statusCode
					when 'DLV100' then '입금확인중'
	                when 'DLV105' then '입금완료'
	        		when 'DLV110' then '배송준비중'
	        		when 'DLV120' then '배송중'
					when 'DLV130' then '배송완료'
					when 'DLV140' then '취소요청'
					when 'DLV150' then '취소완료'
					when 'DLV160' then '교환요청'
					when 'DLV170' then '교환배송중'
					when 'DLV180' then '교환완료'
					when 'DLV220' then '환불요청'
					when 'DLV230' then '환불완료'
					when 'DLV240' then '결제에러'
					end) statusCodeName,
			nvl(f.old_package_no, '') as old_package_no2,
			nvl(f.new_package_no, '') as new_package_no2,
			B.ISCANCEL,B.ISCONFIRM, B.CANCELDATE
	from	TB_CA_BOOK a,
         	tb_order_mgnt_no b
         	LEFT OUTER JOIN TB_RENEW_HISTORY f
         	ON f.orderNo = b.orderNo AND f.old_package_no = b.mgntNo,
			tb_orders c
	where	a.rsc_id = b.mgntNo
	and b.orderNo = c.orderNo
	and c.orderNo = #{orderno}
	) TBL
	ORDER BY ISCONFIRM DESC, CANCELDATE DESC
</select>

<!-- 수강변경 상세  리스트-->
<select id="getChangeViewList2"  parameterType="hashMap" resultType="hashMap">
	select	a.*
			, b.BIRTH_DAY birth_dt
	from tb_orders a
	left outer join TB_MA_MEMBER b
	on a.USER_ID = b.USER_ID
	where a.orderNo = #{orderno}
</select>



<!-- 수강변경 등록 팝업 수정처리-->
<update id="updateChangeLec" parameterType="hashMap">
	update	tb_order_mgnt_no
	set
		isCancel = '1',
		statusCode = 'DLV150',
		cancelDate = sysdate
	where	orderNo = #{orderno}
	and mgntNo = #{leccode_2}
</update>

<!--수강변경 등록 팝업 수정처리-->
<insert id="insertChangeLec1" parameterType="hashMap">
	insert INTO tb_order_mgnt_no
		(orderNo, mgntNo, cnt, isCancel, price, statusCode, confirmDate, sdate, wmv_pmp, open_admin_id, PTYPE, MEMO)
	values
		(#{orderno}, #{leccode}, 1, 0, #{subject_price}, #{statuscode}, sysdate, #{start_date} ,#{wmv_check}, #{USER_ID}, SUBSTR(#{leccode},1,1), #{memo})
</insert>

<!--수강변경 등록 팝업 수정처리-->
<insert id="insertChangeLec2" parameterType="hashMap">
	insert	INTO TB_RENEW_HISTORY
		(ORDERNO, OLD_PACKAGE_NO, NEW_PACKAGE_NO, REGDATE)
	values
		(#{orderno}, #{leccode_2}, #{leccode}, sysdate)
</insert>

<!-- 수강변경 등록 팝업 수정처리-->
<insert id="insertChangeLec3" parameterType="hashMap">
	INSERT INTO TB_MYLECTURE
		( USERID,
			orderNo,
			package_no,
			lecture_no,
			START_DATE,
			END_DATE,
			PERIOD,
			STUDY_PERCENT,
			REG_DT
		 )
	VALUES
		(
		#{userid},
		#{orderno},
		#{leccode},
		#{leccode},
		to_date(#{start_date}, 'YYYYMMDD'),
		TO_DATE(TO_CHAR(to_date(#{start_date}, 'YYYYMMDD')+#{subject_period}-1, 'YYYYMMDD'), 'YYYYMMDD'),
		#{subject_period},
		0,
		sysdate
		 )
</insert>





<!-- 전체상품주문관리 주문번호 상세-->
<select id="getTblApprovalsViewList" parameterType="hashMap" resultType="hashMap">
		select	b.price,
       			a.addPrice,
       			a.payCode payCodeName,
       			case when (a.payCode = 'PAY120') then a.Vacct else ' ' end as acctNoName,
           		case when (a.vcdbank = '') then null else a.vcdbank end as VcdBank,
       			a.payName,
        		a.paycode,
       			a.point,
       			a.returnValue,
       			a.vacct,
       			c.tid
       	from	tb_approvals a,
       		(	select	orderNo, sum(price*cnt) price
   				from	tb_order_mgnt_no
   				where	orderNo = #{orderno}
       			group by orderNo ) b,
       			tb_orders c
       	where	a.orderNo = #{orderno}
       	and a.orderNo = b.orderNo
       	and a.orderNo = c.orderNo
</select>

<!-- 전체상품주문관리 주문번호  상세 카운트-->
<select id="getTblDeliversViewListCount" parameterType="hashMap" resultType="int">
	select	count(*)
	from	tb_delivers
	where	orderNo = #{orderno}
</select>

<!-- 전체상품주문관리 주문번호 상세-->
<select id="getTblDeliversViewList" parameterType="hashMap" resultType="hashMap">
		select	a.sendNo, a.userName, a.telNo,
       			a.cellNo, a.zipcd,
       			SUBSTR(a.zipcd,1,3) zipcd_set1,
       			decode(length(a.zipcd), 6, SUBSTR(a.zipcd,4,3), SUBSTR(a.zipcd,5,3)) zipcd_set2,
       			a.addr, a.memo,
       			a.sendDate,
       			a.dleorder,
       			DECODE(a.dleorder,'DLE100','택배수령','DLE110','직접수령','택배수령') DLEORDER_NM
		from	tb_delivers a
		where	a.orderNo = #{orderno}
</select>

</mapper>