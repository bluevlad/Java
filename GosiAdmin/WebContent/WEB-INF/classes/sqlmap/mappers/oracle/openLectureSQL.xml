<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="openlecture">

 	<resultMap type="java.util.HashMap" id="openlectureMap">
	   <result column="OPEN_MEMO" property="OPEN_MEMO" javaType="java.lang.String" jdbcType="CLOB"/>
	   <result column="OPEN_DESC" property="OPEN_DESC" javaType="java.lang.String" jdbcType="CLOB"/>
	   <result column="PLAN" property="PLAN" javaType="java.lang.String" jdbcType="CLOB"/>
	</resultMap>

<!-- 단과 start -->
	<select id="openlectureList" parameterType="hashMap" resultType="hashMap">
	SELECT TBL.*
	FROM (SELECT A.*, ROWNUM rnum
	      FROM (SELECT OP.SEQ,
			       OP.OPENLECCODE,
			       OP.CATEGORY_CD,
			       (SELECT NAME FROM TB_CATEGORY_INFO WHERE CODE = OP.CATEGORY_CD) AS CATEGORY_NM,
			       OP.OPENBUNRU,
			       OP.OPEN_TITLE,
			       OP.OPEN_SJT_CD,
			       (SELECT SUBJECT_NM FROM TB_SUBJECT_INFO WHERE SUBJECT_CD = OP.OPEN_SJT_CD) AS SUBJECT_NM,
			       OP.OPEN_TEACHER,
			       (SELECT USER_NM FROM TB_MA_MEMBER WHERE USER_ID = OP.OPEN_TEACHER) AS OPEN_TEACHER_NM,
			       OP.OPEN_MEMO,
			       OP.OPEN_DESC,
			       OP.OPEN_HIMOVIE_PATH,
			       OP.OPEN_NOMALMOVIE_PATH,
			       OP.OPEN_FILE,
			       OP.OPEN_ISUSE,
			       OP.OPEN_PASSWORD,
			       OP.OPEN_POINT,
			       OP.OPEN_HIT,
			       OP.REG_DT,
			       OP.REG_ID,
			       OP.UPD_DT,
			       OP.UPD_ID
			  FROM TB_OPENLEC_MST OP
	          WHERE 1 = 1
			  		<if test='SEARCHFORM != null and SEARCHFORM != ""'>
			  			AND OP.CATEGORY_CD = #{SEARCHFORM}
			  		</if>
				 	<if test='SEARCHTEXT != null and SEARCHTEXT != ""'>
						<if test='SEARCHTYPE != null and SEARCHTYPE != ""'>
							<if test='SEARCHTYPE == "1"'>
								AND (OP.OPEN_TITLE like '%'||#{SEARCHTEXT}||'%')
							</if>
							<if test='SEARCHTYPE == "2"'>
								AND (SELECT SUBJECT_NM FROM TB_SUBJECT_INFO WHERE SUBJECT_CD = OP.OPEN_SJT_CD) like '%'||#{SEARCHTEXT}||'%'
							</if>
							<if test='SEARCHTYPE == "3"'>
								AND (SELECT USER_NM FROM TB_MA_MEMBER WHERE USER_ID = OP.OPEN_TEACHER) like '%'||#{SEARCHTEXT}||'%'
							</if>
						</if>
						<if test='SEARCHTYPE == null or SEARCHTYPE == ""'>
							AND (OP.OPEN_TITLE like '%'||#{SEARCHTEXT}||'%'
								OR (SELECT SUBJECT_NM FROM TB_SUBJECT_INFO WHERE SUBJECT_CD = OP.OPEN_SJT_CD) like '%'||#{SEARCHTEXT}||'%'
								OR (SELECT USER_NM FROM TB_MA_MEMBER WHERE USER_ID = OP.OPEN_TEACHER) like '%'||#{SEARCHTEXT}||'%')
						</if>
					</if>
				 	ORDER BY OP.SEQ DESC
				) A
               	WHERE rownum &lt;= #{endNo}
			) TBL
		WHERE rnum &gt; #{startNo}
	</select>

	<select id="openlectureListCount" parameterType="hashMap" resultType="int">
	    SELECT COUNT(OP.OPENLECCODE)
			  FROM TB_OPENLEC_MST OP
	          WHERE 1 = 1
	 	<if test='SEARCHFORM != null and SEARCHFORM != ""'>
			  			AND OP.CATEGORY_CD = #{SEARCHFORM}
			  		</if>
				 	<if test='SEARCHTEXT != null and SEARCHTEXT != ""'>
						<if test='SEARCHTYPE != null and SEARCHTYPE != ""'>
							<if test='SEARCHTYPE == "1"'>
								AND (OP.OPEN_TITLE like '%'||#{SEARCHTEXT}||'%')
							</if>
							<if test='SEARCHTYPE == "2"'>
								AND OP.OPEN_TEACHER like '%'||#{SEARCHTEXT}||'%'
							</if>
						</if>
						<if test='SEARCHTYPE == null or SEARCHTYPE == ""'>
							AND (OP.OPEN_TITLE like '%'||#{SEARCHTEXT}||'%'
								OR OP.OPEN_TEACHER like '%'||#{SEARCHTEXT}||'%')
						</if>
					</if>
	</select>


	<select id="openlectureList_201406" parameterType="hashMap" resultType="hashMap">
		SELECT TBL.*
	      ,(SELECT COUNT(C.ORDERNO) FROM TB_OPENLEC_MST B LEFT OUTER JOIN
	        (SELECT A.* FROM TB_ORDER_MGNT_NO A INNER JOIN
	          (SELECT ORDERNO,MGNTNO FROM TB_ORDER_MGNT_NO GROUP BY ORDERNO, MGNTNO HAVING COUNT(*) = 1) E
	        ON A.ORDERNO = E.ORDERNO AND A.MGNTNO = E.MGNTNO) C
	      ON B.LECCODE = C.MGNTNO
	      WHERE B.LECCODE IN (SELECT LECCODE FROM TB_LEC_BRIDGE WHERE BRIDGE_LECCODE = TBL.BRIDGE_LECCODE)
	      AND C.PRICE <![CDATA[ <> ]]> 0 AND C.STATUSCODE = 'DLV105' AND C.WMV_PMP = 'VOD') AS VODY
	      ,(SELECT COUNT(C.ORDERNO) FROM TB_OPENLEC_MST B LEFT OUTER JOIN
	        (SELECT A.* FROM TB_ORDER_MGNT_NO A INNER JOIN
	          (SELECT ORDERNO,MGNTNO FROM TB_ORDER_MGNT_NO GROUP BY ORDERNO, MGNTNO HAVING COUNT(*) = 1) E
	        ON A.ORDERNO = E.ORDERNO AND A.MGNTNO = E.MGNTNO) C
	      ON B.LECCODE = C.MGNTNO
	      WHERE B.LECCODE IN (SELECT LECCODE FROM TB_LEC_BRIDGE WHERE BRIDGE_LECCODE = TBL.BRIDGE_LECCODE)
	      AND C.PRICE = 0 AND C.STATUSCODE = 'DLV105' AND C.WMV_PMP = 'VOD') AS VODN
	      ,(SELECT COUNT(C.ORDERNO) FROM TB_OPENLEC_MST B LEFT OUTER JOIN
	        (SELECT A.* FROM TB_ORDER_MGNT_NO A INNER JOIN
	          (SELECT ORDERNO,MGNTNO FROM TB_ORDER_MGNT_NO GROUP BY ORDERNO, MGNTNO HAVING COUNT(*) = 1) E
	        ON A.ORDERNO = E.ORDERNO AND A.MGNTNO = E.MGNTNO) C
	      ON B.LECCODE = C.MGNTNO
	      WHERE B.LECCODE IN (SELECT LECCODE FROM TB_LEC_BRIDGE WHERE BRIDGE_LECCODE = TBL.BRIDGE_LECCODE)
	      AND C.PRICE <![CDATA[ <> ]]> 0 AND C.STATUSCODE = 'DLV105' AND C.WMV_PMP = 'PMP') AS PMPY
	      ,(SELECT COUNT(C.ORDERNO) FROM TB_OPENLEC_MST B LEFT OUTER JOIN
	        (SELECT A.* FROM TB_ORDER_MGNT_NO A INNER JOIN
	          (SELECT ORDERNO,MGNTNO FROM TB_ORDER_MGNT_NO GROUP BY ORDERNO, MGNTNO HAVING COUNT(*) = 1) E
	        ON A.ORDERNO = E.ORDERNO AND A.MGNTNO = E.MGNTNO) C
	      ON B.LECCODE = C.MGNTNO
	      WHERE B.LECCODE IN (SELECT LECCODE FROM TB_LEC_BRIDGE WHERE BRIDGE_LECCODE = TBL.BRIDGE_LECCODE)
	      AND C.PRICE = 0 AND C.STATUSCODE = 'DLV105' AND C.WMV_PMP = 'PMP') AS PMPN
	      ,(SELECT COUNT(C.ORDERNO) FROM TB_OPENLEC_MST B LEFT OUTER JOIN
	        (SELECT A.* FROM TB_ORDER_MGNT_NO A INNER JOIN
	          (SELECT ORDERNO,MGNTNO FROM TB_ORDER_MGNT_NO GROUP BY ORDERNO, MGNTNO HAVING COUNT(*) = 1) E
	        ON A.ORDERNO = E.ORDERNO AND A.MGNTNO = E.MGNTNO) C
	      ON B.LECCODE = C.MGNTNO
	      WHERE B.LECCODE IN (SELECT LECCODE FROM TB_LEC_BRIDGE WHERE BRIDGE_LECCODE = TBL.BRIDGE_LECCODE)
	      AND C.PRICE <![CDATA[ <> ]]> 0 AND C.STATUSCODE = 'DLV105' AND C.WMV_PMP = 'VOD+PMP') AS VODPMPY
	      ,(SELECT COUNT(C.ORDERNO) FROM TB_OPENLEC_MST B LEFT OUTER JOIN
	        (SELECT A.* FROM TB_ORDER_MGNT_NO A INNER JOIN
	          (SELECT ORDERNO,MGNTNO FROM TB_ORDER_MGNT_NO GROUP BY ORDERNO, MGNTNO HAVING COUNT(*) = 1) E
	        ON A.ORDERNO = E.ORDERNO AND A.MGNTNO = E.MGNTNO) C
	      ON B.LECCODE = C.MGNTNO
	      WHERE B.LECCODE IN (SELECT LECCODE FROM TB_LEC_BRIDGE WHERE BRIDGE_LECCODE = TBL.BRIDGE_LECCODE)
	      AND C.PRICE = 0 AND C.STATUSCODE = 'DLV105' AND C.WMV_PMP = 'VOD+PMP') AS VODPMPN
		FROM 	(
			SELECT A.*, ROWNUM rnum
		  	FROM (
					SELECT TBL.* FROM (
						SELECT T1.BRIDGE_LECCODE, T2.*
						  , (SELECT NAME FROM TB_CATEGORY_INFO WHERE CODE = T2.CATEGORY_CD) AS CATEGORY_NM
						  , (SELECT NAME FROM TB_LEARNING_FORM_INFO WHERE CODE = T2.LEARNING_CD) AS LEARNING_NM
						  , (SELECT SUBJECT_NM FROM TB_SUBJECT_INFO WHERE SUBJECT_CD = T2.SUBJECT_SJT_CD) AS SUBJECT_NM
						  , (SELECT USER_NM FROM TB_MA_MEMBER WHERE USER_ID = T2.SUBJECT_TEACHER) AS SUBJECT_TEACHER_NM
						FROM
						(  SELECT BRIDGE_LECCODE, CATEGORY_CD, LECCODE
                           FROM (
                            SELECT ROW_NUMBER() OVER(PARTITION BY BRIDGE_LECCODE ORDER BY CATEGORY_CD) ROW_NUM
                                   ,BRIDGE_LECCODE, CATEGORY_CD, A.LECCODE
                                FROM TB_LEC_BRIDGE A
                                LEFT OUTER JOIN TB_OPENLEC_MST B ON A.LECCODE = B.LECCODE
						  		<if test='SEARCHKIND != null and SEARCHKIND != ""'>
						  			WHERE B.CATEGORY_CD = #{SEARCHKIND}
						  		</if>
                           ) WHERE ROW_NUM = 1
                       ) T1
						INNER JOIN TB_OPENLEC_MST T2 ON T1.LECCODE = T2.LECCODE
					) TBL WHERE 1 = 1 AND LEC_TYPE_CHOICE = #{LEC_TYPE_CHOICE}
			  		<if test='SEARCHFORM != null and SEARCHFORM != ""'>
			  			AND TBL.LEARNING_CD = #{SEARCHFORM}
			  		</if>
			  		<if test='SEARCHYEAR!= null and SEARCHYEAR != ""'>
			  			AND TBL.SUBJECT_OFF_OPEN_YEAR <![CDATA[ >= ]]> '2012'
			  		</if>
				 	<if test='SEARCHTEXT != null and SEARCHTEXT != ""'>
						<if test='SEARCHTYPE != null and SEARCHTYPE != ""'>
							<if test='SEARCHTYPE == "1"'>
								AND (TBL.SUBJECT_SJT_CD like '%'||#{SEARCHTEXT}||'%'
									OR TBL.SUBJECT_NM like '%'||#{SEARCHTEXT}||'%')
							</if>
							<if test='SEARCHTYPE == "2"'>
								AND TBL.SUBJECT_TITLE like '%'||#{SEARCHTEXT}||'%'
							</if>
							<if test='SEARCHTYPE == "3"'>
								AND TBL.SUBJECT_TEACHER_NM like '%'||#{SEARCHTEXT}||'%'
							</if>
							<if test='SEARCHTYPE == "4"'>
								AND (TBL.BRIDGE_LECCODE like '%'||#{SEARCHTEXT}||'%'
									OR TBL.LECCODE like '%'||#{SEARCHTEXT}||'%')
							</if>
						</if>
						<if test='SEARCHTYPE == null or SEARCHTYPE == ""'>
							AND (TBL.SUBJECT_SJT_CD like '%'||#{SEARCHTEXT}||'%'
								OR TBL.SUBJECT_NM like '%'||#{SEARCHTEXT}||'%'
								OR TBL.SUBJECT_TITLE like '%'||#{SEARCHTEXT}||'%'
								OR TBL.SUBJECT_TEACHER_NM like '%'||#{SEARCHTEXT}||'%'
								OR TBL.BRIDGE_LECCODE like '%'||#{SEARCHTEXT}||'%'
								OR TBL.LECCODE like '%'||#{SEARCHTEXT}||'%')
						</if>
					</if>
				 	ORDER BY TBL.SEQ DESC
				) A
               	WHERE rownum &lt;= #{endNo}
			) TBL
		WHERE rnum &gt; #{startNo}
	</select>

	<select id="openlectureListCount_201406" parameterType="hashMap" resultType="int">
		SELECT COUNT(TBL.LECCODE) FROM (
			SELECT T1.BRIDGE_LECCODE, T2.*
				, (SELECT NAME FROM TB_CATEGORY_INFO WHERE CODE = T2.CATEGORY_CD) AS CATEGORY_NM
				, (SELECT NAME FROM TB_LEARNING_FORM_INFO WHERE CODE = T2.LEARNING_CD) AS LEARNING_NM
				, (SELECT SUBJECT_NM FROM TB_SUBJECT_INFO WHERE SUBJECT_CD = T2.SUBJECT_SJT_CD) AS SUBJECT_NM
				, (SELECT USER_NM FROM TB_MA_MEMBER WHERE USER_ID = T2.SUBJECT_TEACHER) AS SUBJECT_TEACHER_NM
			FROM
			(SELECT BRIDGE_LECCODE, CATEGORY_CD, LECCODE
                           FROM (
                            SELECT ROW_NUMBER() OVER(PARTITION BY BRIDGE_LECCODE ORDER BY CATEGORY_CD) ROW_NUM
                                   ,BRIDGE_LECCODE, CATEGORY_CD, A.LECCODE
                                FROM TB_LEC_BRIDGE A
                                LEFT OUTER JOIN TB_OPENLEC_MST B ON A.LECCODE = B.LECCODE
						  		<if test='SEARCHKIND != null and SEARCHKIND != ""'>
						  			WHERE B.CATEGORY_CD = #{SEARCHKIND}
						  		</if>
                           ) WHERE ROW_NUM = 1) T1
			INNER JOIN TB_OPENLEC_MST T2 ON T1.LECCODE = T2.LECCODE
		) TBL WHERE 1 = 1 AND LEC_TYPE_CHOICE = #{LEC_TYPE_CHOICE}
	 	<if test='SEARCHFORM != null and SEARCHFORM != ""'>
	 		AND TBL.LEARNING_CD = #{SEARCHFORM}
	 	</if>
  		<if test='SEARCHYEAR!= null and SEARCHYEAR != ""'>
  			AND TBL.SUBJECT_OFF_OPEN_YEAR <![CDATA[ >= ]]> '2012'
  		</if>
	 	<if test='SEARCHTEXT != null and SEARCHTEXT != ""'>
			<if test='SEARCHTYPE != null and SEARCHTYPE != ""'>
				<if test='SEARCHTYPE == "1"'>
					AND (TBL.SUBJECT_SJT_CD like '%'||#{SEARCHTEXT}||'%'
						OR TBL.SUBJECT_NM like '%'||#{SEARCHTEXT}||'%')
				</if>
				<if test='SEARCHTYPE == "2"'>
					AND TBL.SUBJECT_TITLE like '%'||#{SEARCHTEXT}||'%'
				</if>
				<if test='SEARCHTYPE == "3"'>
					AND TBL.SUBJECT_TEACHER_NM like '%'||#{SEARCHTEXT}||'%'
				</if>
				<if test='SEARCHTYPE == "4"'>
					AND (TBL.BRIDGE_LECCODE like '%'||#{SEARCHTEXT}||'%'
						OR TBL.LECCODE like '%'||#{SEARCHTEXT}||'%')
				</if>
			</if>
			<if test='SEARCHTYPE == null or SEARCHTYPE == ""'>
				AND (TBL.SUBJECT_SJT_CD like '%'||#{SEARCHTEXT}||'%'
					OR TBL.SUBJECT_NM like '%'||#{SEARCHTEXT}||'%'
					OR TBL.SUBJECT_TITLE like '%'||#{SEARCHTEXT}||'%'
					OR TBL.SUBJECT_TEACHER_NM like '%'||#{SEARCHTEXT}||'%'
					OR TBL.BRIDGE_LECCODE like '%'||#{SEARCHTEXT}||'%'
					OR TBL.LECCODE like '%'||#{SEARCHTEXT}||'%')
			</if>
		</if>
	</select>

	<select id="bookList" parameterType="hashMap" resultType="hashMap">
		SELECT LTBL.*
			,(SELECT NAME FROM TB_CATEGORY_INFO WHERE ISUSE = 'Y' AND CODE = LTBL.CATEGORY_CD) CATEGORY_NM
			,(SELECT NAME FROM TB_LEARNING_FORM_INFO WHERE ISUSE = 'Y' AND CODE = LTBL.LEARNING_CD) LEARNING_NM
		FROM 	(
					SELECT TBL.*, ROWNUM rnum
				  	FROM (
						SELECT
						  SEQ, RSC_ID, SUBJECT_SJT_CD, CATEGORY_CD, LEARNING_CD, BOOK_NM
						FROM TB_CA_BOOK WHERE USE_YN = 'Y'
						<if test='SEARCHKIND != null and SEARCHKIND != ""'>
					 		AND CATEGORY_CD = #{SEARCHKIND}
					 	</if>
					 	<if test='SEARCHFORM != null and SEARCHFORM != ""'>
					 		AND LEARNING_CD = #{SEARCHFORM}
					 	</if>
					 	<if test='SEARCHTEXT != null and SEARCHTEXT != ""'>
							AND BOOK_NM like '%'||#{SEARCHTEXT}||'%'
						</if>
						ORDER BY REG_DT DESC
				) TBL
               	WHERE rownum &lt;= #{endNo}
			) LTBL
		WHERE rnum &gt; #{startNo}
	</select>

	<select id="bookListCount" parameterType="hashMap" resultType="int">
		SELECT
		  COUNT(RSC_ID)
		FROM TB_CA_BOOK WHERE USE_YN = 'Y'
		<if test='SEARCHKIND != null and SEARCHKIND != ""'>
	 		AND CATEGORY_CD = #{SEARCHKIND}
	 	</if>
	 	<if test='SEARCHFORM != null and SEARCHFORM != ""'>
	 		AND LEARNING_CD = #{SEARCHFORM}
	 	</if>
	 	<if test='SEARCHTEXT != null and SEARCHTEXT != ""'>
			AND BOOK_NM like '%'||#{SEARCHTEXT}||'%'
		</if>
	</select>

	<select id="getBridgeLeccodeSeq" parameterType="hashMap" resultType="hashMap">
		SELECT TO_CHAR(NVL(MAX(seq),0)+1) AS SEQ FROM TB_LEC_BRIDGE
	</select>

	<select id="getJongLeccodeSeq" parameterType="hashMap" resultType="hashMap">
		SELECT TO_CHAR(NVL(MAX(seq),0)+1) AS SEQ FROM TB_LEC_JONG
	</select>

	<select id="getopenLeccode" parameterType="hashMap" resultType="hashMap">
		SELECT
  			TO_CHAR(NVL(MAX(substr(OPENLECCODE,6,5)),0)+1,'00000') OPENLECCODE
		FROM TB_OPENLEC_MST
		WHERE OPENLECCODE LIKE '%'||#{PREFIX}||'%'
	</select>

	<select id="getBridgeLeccode" parameterType="hashMap" resultType="hashMap">
		SELECT
			TO_CHAR(NVL(MAX(substr(BRIDGE_LECCODE,6,5)),0)+1,'00000') BRIDGE_LECCODE
		FROM TB_LEC_BRIDGE
		WHERE BRIDGE_LECCODE LIKE '%'||#{PREFIX}||'%'
	</select>

	<insert id="openlectureInsert" parameterType="hashMap" flushCache="true">
		<!-- INSERT INTO TB_OPENLEC_MST(SEQ, LECCODE, CATEGORY_CD, LEARNING_CD, SUBJECT_TEACHER, SUBJECT_TEACHER_PAYMENT
										, SUBJECT_TITLE, SUBJECT_DESC, SUBJECT_MEMO, SUBJECT_KEYWORD, SUBJECT_PERIOD
										, SUBJECT_OFF_OPEN_YEAR, SUBJECT_OFF_OPEN_MONTH, SUBJECT_OFF_OPEN_DAY, SUBJECT_DISCOUNT, SUBJECT_PRICE
										, SUBJECT_POINT, SUBJECT_MOVIE, SUBJECT_PMP, SUBJECT_MOVIE_PMP, SUBJECT_MOVIE_MP4
										, SUBJECT_MOVIE_VOD_MP4, SUBJECT_OPTION
										, SUBJECT_ISUSE, SUBJECT_SJT_CD
										, SUBJECT_VOD_DEFAULT_PATH, SUBJECT_MP4_DEFAULT_PATH, SUBJECT_PMP_DEFAULT_PATH, SUBJECT_PASS, SUBJECT_JANG
										, RE_COURSE, LEC_TYPE_CHOICE, LEC_GUBUN, REC_GUBUN, ICON_GUBUN, LEC_SCHEDULE, REG_DT, REG_ID
										, UPD_DT, UPD_ID, PLAN, GIFT_FLAG, GIFT_COUPON_CCODE, GIFT_LECCODE, COUPON_NAME, GIFT_NAME, TEACHERNO)
		VALUES ((SELECT NVL(MAX(SEQ),0)+1 FROM TB_OPENLEC_MST), #{LECCODE}, #{CATEGORY_CD}, #{LEARNING_CD}, #{SUBJECT_TEACHER}, #{SUBJECT_TEACHER_PAYMENT}
					, #{SUBJECT_TITLE}, #{SUBJECT_DESC}, #{SUBJECT_MEMO}, #{SUBJECT_KEYWORD}, #{SUBJECT_PERIOD}
					, #{SUBJECT_OFF_OPEN_YEAR}, #{SUBJECT_OFF_OPEN_MONTH}, #{SUBJECT_OFF_OPEN_DAY}, #{SUBJECT_DISCOUNT}, #{SUBJECT_PRICE}
					, #{SUBJECT_POINT}, #{SUBJECT_MOVIE}, #{SUBJECT_PMP}, #{SUBJECT_MOVIE_PMP}, #{SUBJECT_MOVIE_MP4}
					, #{SUBJECT_MOVIE_VOD_MP4}, #{SUBJECT_OPTION}
					, #{SUBJECT_ISUSE}, #{SUBJECT_SJT_CD}
					, #{SUBJECT_VOD_DEFAULT_PATH}, #{SUBJECT_MP4_DEFAULT_PATH}, #{SUBJECT_PMP_DEFAULT_PATH}, #{SUBJECT_PASS}, #{SUBJECT_JANG}
					, #{RE_COURSE}, #{LEC_TYPE_CHOICE}, #{LEC_GUBUN}, #{REC_GUBUN}, #{ICON_GUBUN}, #{LEC_SCHEDULE}, SYSDATE, #{REG_ID}
					, SYSDATE, #{UPD_ID}, #{PLAN}, #{GIFT_FLAG}, #{GIFT_COUPON_CCODE}, #{GIFT_LECCODE}, #{COUPON_NAME}, #{GIFT_NAME}, #{TEACHERNO}) -->
		INSERT INTO TB_OPENLEC_MST (
		    SEQ,
	        OPENLECCODE,
	        CATEGORY_CD,
	        OPENBUNRU,
	        OPEN_TITLE,
	        OPEN_SJT_CD,
	        OPEN_TEACHER,
	        OPEN_MEMO,
	        OPEN_DESC,
	        OPEN_HIMOVIE_PATH,
	        OPEN_NOMALMOVIE_PATH,
	        OPEN_FILE,
	        OPEN_ISUSE,
	        OPEN_PASSWORD,
	        OPEN_POINT,
	        OPEN_HIT,
	        REG_DT,
	        REG_ID)
     VALUES ((SELECT NVL(MAX(SEQ),0)+1 FROM TB_OPENLEC_MST),
			 #{OPENLECCODE},
			 #{CATEGORY_CD},
			 #{OPENBUNRU},
			 #{OPEN_TITLE},
			 #{OPEN_SJT_CD},
			 #{OPEN_TEACHER},
			 #{OPEN_MEMO},
			 #{OPEN_DESC},
			 #{OPEN_HIMOVIE_PATH},
			 #{OPEN_NOMALMOVIE_PATH},
			 #{OPEN_FILE},
			 #{OPEN_ISUSE},
			 #{OPEN_PASSWORD},
			 #{OPEN_POINT},
			 #{OPEN_HIT},
			 SYSDATE,
			 #{REG_ID}
	)
	</insert>

	<insert id="openlectureBridgeInsert" parameterType="hashMap" flushCache="true">
		INSERT INTO TB_LEC_BRIDGE(SEQ, BRIDGE_LECCODE, LECCODE, REG_DT, REG_ID, UPD_DT, UPD_ID)
		VALUES (#{SEQ}, #{BRIDGE_LECCODE}, #{LECCODE}, SYSDATE, #{REG_ID}, SYSDATE, #{UPD_ID})
	</insert>

	<insert id="openlectureBookInsert" parameterType="hashMap" flushCache="true" statementType="CALLABLE">

		CALL SP_LECTURE_BOOK_INSERT(
		        #{LECCODE, mode=IN},
		        #{RSC_ID, mode=IN},
		        #{FLAG, mode=IN},
		        #{BRIDGE_LEC, mode=IN},
		        #{result, jdbcType=INTEGER, mode=OUT})
	</insert>

	<insert id="openlectureBookInsert2" parameterType="hashMap" flushCache="true">
		INSERT INTO TB_PLUS_CA_BOOK(IDX, LECCODE, RSC_ID, FLAG)
		VALUES ((SELECT NVL(MAX(IDX),0)+1 FROM TB_PLUS_CA_BOOK), #{LECCODE}, #{RSC_ID}, #{FLAG})
	</insert>

	<select id="openlectureViewList" parameterType="hashMap" resultType="hashMap">
		SELECT
	      (SELECT COUNT(C.ORDERNO) FROM TB_OPENLEC_MST B LEFT OUTER JOIN
	        (SELECT A.* FROM TB_ORDER_MGNT_NO A INNER JOIN
	          (SELECT ORDERNO,MGNTNO FROM TB_ORDER_MGNT_NO GROUP BY ORDERNO, MGNTNO HAVING COUNT(*) = 1) E
	        ON A.ORDERNO = E.ORDERNO AND A.MGNTNO = E.MGNTNO) C
	      ON B.LECCODE = C.MGNTNO
	      WHERE B.LECCODE = T2.LECCODE
	      AND C.PRICE <![CDATA[ <> ]]> 0 AND C.STATUSCODE = 'DLV105' AND C.WMV_PMP = 'VOD') AS VODY
	      ,(SELECT COUNT(C.ORDERNO) FROM TB_OPENLEC_MST B LEFT OUTER JOIN
	        (SELECT A.* FROM TB_ORDER_MGNT_NO A INNER JOIN
	          (SELECT ORDERNO,MGNTNO FROM TB_ORDER_MGNT_NO GROUP BY ORDERNO, MGNTNO HAVING COUNT(*) = 1) E
	        ON A.ORDERNO = E.ORDERNO AND A.MGNTNO = E.MGNTNO) C
	      ON B.LECCODE = C.MGNTNO
	      WHERE B.LECCODE = T2.LECCODE
	      AND C.PRICE = 0 AND C.STATUSCODE = 'DLV105' AND C.WMV_PMP = 'VOD') AS VODN
	      ,(SELECT COUNT(C.ORDERNO) FROM TB_OPENLEC_MST B LEFT OUTER JOIN
	        (SELECT A.* FROM TB_ORDER_MGNT_NO A INNER JOIN
	          (SELECT ORDERNO,MGNTNO FROM TB_ORDER_MGNT_NO GROUP BY ORDERNO, MGNTNO HAVING COUNT(*) = 1) E
	        ON A.ORDERNO = E.ORDERNO AND A.MGNTNO = E.MGNTNO) C
	      ON B.LECCODE = C.MGNTNO
	      WHERE B.LECCODE = T2.LECCODE
	      AND C.PRICE <![CDATA[ <> ]]> 0 AND C.STATUSCODE = 'DLV105' AND C.WMV_PMP = 'PMP') AS PMPY
	      ,(SELECT COUNT(C.ORDERNO) FROM TB_OPENLEC_MST B LEFT OUTER JOIN
	        (SELECT A.* FROM TB_ORDER_MGNT_NO A INNER JOIN
	          (SELECT ORDERNO,MGNTNO FROM TB_ORDER_MGNT_NO GROUP BY ORDERNO, MGNTNO HAVING COUNT(*) = 1) E
	        ON A.ORDERNO = E.ORDERNO AND A.MGNTNO = E.MGNTNO) C
	      ON B.LECCODE = C.MGNTNO
	     WHERE B.LECCODE = T2.LECCODE
	      AND C.PRICE = 0 AND C.STATUSCODE = 'DLV105' AND C.WMV_PMP = 'PMP') AS PMPN
	      ,(SELECT COUNT(C.ORDERNO) FROM TB_OPENLEC_MST B LEFT OUTER JOIN
	        (SELECT A.* FROM TB_ORDER_MGNT_NO A INNER JOIN
	          (SELECT ORDERNO,MGNTNO FROM TB_ORDER_MGNT_NO GROUP BY ORDERNO, MGNTNO HAVING COUNT(*) = 1) E
	        ON A.ORDERNO = E.ORDERNO AND A.MGNTNO = E.MGNTNO) C
	      ON B.LECCODE = C.MGNTNO
	      WHERE B.LECCODE = T2.LECCODE
	      AND C.PRICE <![CDATA[ <> ]]> 0 AND C.STATUSCODE = 'DLV105' AND C.WMV_PMP = 'VOD+PMP') AS VODPMPY
	      ,(SELECT COUNT(C.ORDERNO) FROM TB_OPENLEC_MST B LEFT OUTER JOIN
	        (SELECT A.* FROM TB_ORDER_MGNT_NO A INNER JOIN
	          (SELECT ORDERNO,MGNTNO FROM TB_ORDER_MGNT_NO GROUP BY ORDERNO, MGNTNO HAVING COUNT(*) = 1) E
	        ON A.ORDERNO = E.ORDERNO AND A.MGNTNO = E.MGNTNO) C
	      ON B.LECCODE = C.MGNTNO
	      WHERE B.LECCODE = T2.LECCODE
	      AND C.PRICE = 0 AND C.STATUSCODE = 'DLV105' AND C.WMV_PMP = 'VOD+PMP') AS VODPMPN
	      , T1.BRIDGE_LECCODE, T2.*
		  , (SELECT NAME FROM TB_CATEGORY_INFO WHERE CODE = T2.CATEGORY_CD) AS CATEGORY_NM
		  , (SELECT NAME FROM TB_LEARNING_FORM_INFO WHERE CODE = T2.LEARNING_CD) AS LEARNING_NM
		  , (SELECT SUBJECT_NM FROM TB_SUBJECT_INFO WHERE SUBJECT_CD = T2.SUBJECT_SJT_CD) AS SUBJECT_NM
		  , (SELECT USER_NM FROM TB_MA_MEMBER WHERE USER_ID = T2.SUBJECT_TEACHER) AS SUBJECT_TEACHER_NM
		FROM
		(SELECT BRIDGE_LECCODE, LECCODE FROM TB_LEC_BRIDGE WHERE BRIDGE_LECCODE = #{BRIDGE_LECCODE}) T1
		INNER JOIN TB_OPENLEC_MST T2 ON T1.LECCODE = T2.LECCODE
		ORDER BY T2.CATEGORY_CD
	</select>

	<select id="openlectureView" parameterType="hashMap" resultMap="openlectureMap">
		SELECT SEQ,
		       OPENLECCODE,
		       CATEGORY_CD,
		       OPENBUNRU,
		       OPEN_TITLE,
		       OPEN_SJT_CD,
		       OPEN_TEACHER,
		       OPEN_MEMO,
		       OPEN_DESC,
		       OPEN_HIMOVIE_PATH,
		       OPEN_NOMALMOVIE_PATH,
		       OPEN_FILE,
		       OPEN_ISUSE,
		       OPEN_PASSWORD,
		       OPEN_POINT,
		       OPEN_HIT,
		       REG_DT,
		       REG_ID,
		       UPD_DT,
		       UPD_ID
		  FROM TB_OPENLEC_MST
		WHERE OPENLECCODE = #{OPENLECCODE}
	</select>

	<select id="openlectureViewBookList" parameterType="hashMap" resultType="hashMap">
		SELECT
		  AA.*
		  ,(SELECT NAME FROM TB_CATEGORY_INFO WHERE ISUSE = 'Y' AND CODE = BB.CATEGORY_CD) CATEGORY_NM
		  ,(SELECT NAME FROM TB_LEARNING_FORM_INFO WHERE ISUSE = 'Y' AND CODE = BB.LEARNING_CD) LEARNING_NM
		  , BB.BOOK_NM
		FROM TB_PLUS_CA_BOOK AA INNER JOIN TB_CA_BOOK BB
		ON AA.RSC_ID = BB.RSC_ID WHERE AA.LECCODE = #{LECCODE}
	</select>

	<update id="openlectureUpdate" parameterType="hashMap">
		UPDATE TB_OPENLEC_MST
			SET
		        CATEGORY_CD          = #{CATEGORY_CD} ,
		        OPENBUNRU            = #{OPENBUNRU} ,
		        OPEN_TITLE           = #{OPEN_TITLE} ,
		        OPEN_SJT_CD          = #{OPEN_SJT_CD} ,
		        OPEN_TEACHER         = #{OPEN_TEACHER} ,
		        OPEN_MEMO            = #{OPEN_MEMO} ,
		        OPEN_DESC            = #{OPEN_DESC} ,
		        OPEN_HIMOVIE_PATH    = #{OPEN_HIMOVIE_PATH} ,
		        OPEN_NOMALMOVIE_PATH = #{OPEN_NOMALMOVIE_PATH} ,
		        OPEN_FILE            = #{OPEN_FILE} ,
		        OPEN_ISUSE           = #{OPEN_ISUSE} ,
		        OPEN_PASSWORD        = #{OPEN_PASSWORD} ,
		        OPEN_POINT           = #{OPEN_POINT} ,
		        OPEN_HIT             = #{OPEN_HIT} ,
		        UPD_DT               = SYSDATE ,
		        UPD_ID               = #{UPD_ID}
			    WHERE OPENLECCODE = #{OPENLECCODE} 
	</update>

	<delete id="openlectureBookDelete" parameterType="hashMap" flushCache="true">
		DELETE FROM TB_PLUS_CA_BOOK
		<if test='UPDATE_FLAG == "ALL" '>WHERE LECCODE IN (SELECT LECCODE FROM TB_LEC_BRIDGE WHERE BRIDGE_LECCODE = #{BRIDGE_LEC} )</if>
		<if test='UPDATE_FLAG != "ALL" '>WHERE LECCODE = #{LECCODE}</if>

	</delete>

	<delete id="openlectureIsUseUpdate" parameterType="hashMap" flushCache="true">
		UPDATE TB_OPENLEC_MST SET SUBJECT_ISUSE = 'N' WHERE LECCODE = #{LECCODE}
		<!-- DELETE FROM TB_OPENLEC_MST WHERE LECCODE = #{LECCODE} -->
	</delete>

	<delete id="openlectureDelete" parameterType="hashMap" flushCache="true">
		DELETE FROM TB_OPENLEC_MST WHERE LECCODE = #{LECCODE}
	</delete>

	<delete id="openlectureBridgeDelete" parameterType="hashMap" flushCache="true">
		DELETE FROM TB_LEC_BRIDGE WHERE BRIDGE_LECCODE = #{BRIDGE_LECCODE} AND LECCODE = #{LECCODE}
	</delete>

	<update id="lecMovUpdate" parameterType="hashMap">
		UPDATE TB_OPENLEC_MST
			SET MOV_ING = #{MOV_ING}
			WHERE LECCODE IN (SELECT LECCODE FROM TB_LEC_BRIDGE WHERE BRIDGE_LECCODE = #{BRIDGE_LECCODE})
	</update>

	<select id="openlectureSeqList" parameterType="hashMap" resultType="hashMap">
		<if test='LEC_TYPE_CHOICE == "D"'>
			SELECT TBL.* FROM (
				SELECT T1.BRIDGE_LECCODE, T2.*
				  , (SELECT NAME FROM TB_CATEGORY_INFO WHERE CODE = T2.CATEGORY_CD) AS CATEGORY_NM
				  , (SELECT NAME FROM TB_LEARNING_FORM_INFO WHERE CODE = T2.LEARNING_CD) AS LEARNING_NM
				  , (SELECT SUBJECT_NM FROM TB_SUBJECT_INFO WHERE SUBJECT_CD = T2.SUBJECT_SJT_CD) AS SUBJECT_NM
				  , (SELECT USER_NM FROM TB_MA_MEMBER WHERE USER_ID = T2.SUBJECT_TEACHER) AS SUBJECT_TEACHER_NM
				FROM
				TB_LEC_BRIDGE T1 RIGHT JOIN TB_OPENLEC_MST T2 ON T1.LECCODE = T2.LECCODE
				WHERE T2.SUBJECT_PRICE <![CDATA[ <> ]]> 0
			) TBL WHERE 1 = 1 AND LEC_TYPE_CHOICE = #{LEC_TYPE_CHOICE}
		</if>
		<if test='LEC_TYPE_CHOICE != "D"'>
			SELECT
				TBL.*
				  , (SELECT NAME FROM TB_CATEGORY_INFO WHERE CODE = TBL.CATEGORY_CD) AS CATEGORY_NM
				  , (SELECT NAME FROM TB_LEARNING_FORM_INFO WHERE CODE = TBL.LEARNING_CD) AS LEARNING_NM
			FROM TB_OPENLEC_MST TBL WHERE LEC_TYPE_CHOICE = #{LEC_TYPE_CHOICE}
			AND TBL.SUBJECT_PRICE <![CDATA[ <> ]]> 0
		</if>
  		<if test='SEARCHKIND == null or SEARCHKIND == "" or SEARCHFORM == null or SEARCHFORM == "" '>
  			AND 1 = 2
  		</if>
  		<if test='SEARCHFORM != null and SEARCHFORM != ""'>
  			AND TBL.LEARNING_CD = #{SEARCHFORM}
  		</if>

  		<if test='SEARCHKIND != null and SEARCHKIND != ""'>
  			AND TBL.CATEGORY_CD = #{SEARCHKIND}
  		</if>
  		<if test='SEARCHFORM != null and SEARCHFORM != ""'>
  			AND TBL.LEARNING_CD = #{SEARCHFORM}
  		</if>
	 	<if test='SEARCHTEXT != null and SEARCHTEXT != ""'>
			<if test='SEARCHTYPE != null and SEARCHTYPE != ""'>
				<if test='SEARCHTYPE == "1"'>
					AND (TBL.SUBJECT_SJT_CD like '%'||#{SEARCHTEXT}||'%'
						OR TBL.SUBJECT_NM like '%'||#{SEARCHTEXT}||'%')
				</if>
				<if test='SEARCHTYPE == "2"'>
					AND TBL.SUBJECT_TITLE like '%'||#{SEARCHTEXT}||'%'
				</if>
				<if test='SEARCHTYPE == "3"'>
					AND TBL.SUBJECT_TEACHER_NM like '%'||#{SEARCHTEXT}||'%'
				</if>
				<if test='SEARCHTYPE == "4"'>
					AND (TBL.BRIDGE_LECCODE like '%'||#{SEARCHTEXT}||'%'
						OR TBL.LECCODE like '%'||#{SEARCHTEXT}||'%')
				</if>
			</if>
			<if test='SEARCHTYPE == null or SEARCHTYPE == ""'>
				AND (TBL.SUBJECT_SJT_CD like '%'||#{SEARCHTEXT}||'%'
					OR TBL.SUBJECT_NM like '%'||#{SEARCHTEXT}||'%'
					OR TBL.SUBJECT_TITLE like '%'||#{SEARCHTEXT}||'%'
					OR TBL.SUBJECT_TEACHER_NM like '%'||#{SEARCHTEXT}||'%'
					OR TBL.BRIDGE_LECCODE like '%'||#{SEARCHTEXT}||'%'
					OR TBL.LECCODE like '%'||#{SEARCHTEXT}||'%')
			</if>
		</if>
	 	ORDER BY TBL.SEQ DESC
	</select>

	<update id="openlectureSeqUpdate" parameterType="hashMap">
		UPDATE TB_OPENLEC_MST SET SEQ = #{SEQ} WHERE LECCODE = #{LECCODE}
	</update>


<!-- 단과 end -->


<!-- 종합반 start -->


	<select id="openlectureViewJongList" parameterType="hashMap" resultType="hashMap">
		SELECT
			LTBL.*
			,	(SELECT
					COUNT(A.LECCODE)
				FROM   TB_OPENLEC_MST A
				      ,(
				        SELECT A.ORDERNO, A.MGNTNO, A.WMV_PMP
				        FROM   TB_ORDER_MGNT_NO A	 ,(SELECT ORDERNO ,MGNTNO FROM   TB_ORDER_MGNT_NO GROUP BY ORDERNO, MGNTNO HAVING COUNT(*) = 1) B
				        WHERE  A.ORDERNO            =    B.ORDERNO
				        AND    A.MGNTNO             =    B.MGNTNO
				        AND    A.STATUSCODE         =    'DLV105'
				        AND    SUBSTR(A.MGNTNO,1,1) <![CDATA[ <> ]]> 'L'
				         AND    A.WMV_PMP            =    'VOD'
				         AND    A.PRICE      <![CDATA[ > ]]>    0
				       ) B
				      ,TB_MYLECTURE C WHERE  A.LECCODE = C.LECTURE_NO AND    B.ORDERNO = C.ORDERNO AND    B.MGNTNO  = C.PACKAGE_NO
						AND    SUBSTR(C.PACKAGE_NO,1,1) NOT IN ('D','L') AND    B.WMV_PMP = #{SEARCHPAYTYPE} AND    C.PACKAGE_NO = LTBL.LECCODE) VODY
			,	(SELECT
					COUNT(A.LECCODE)
				FROM   TB_OPENLEC_MST A
				      ,(
				        SELECT A.ORDERNO, A.MGNTNO, A.WMV_PMP
				        FROM   TB_ORDER_MGNT_NO A	 ,(SELECT ORDERNO ,MGNTNO FROM   TB_ORDER_MGNT_NO GROUP BY ORDERNO, MGNTNO HAVING COUNT(*) = 1) B
				        WHERE  A.ORDERNO            =    B.ORDERNO
				        AND    A.MGNTNO             =    B.MGNTNO
				        AND    A.STATUSCODE         =    'DLV105'
				        AND    SUBSTR(A.MGNTNO,1,1) <![CDATA[ <> ]]> 'L'
				         AND    A.WMV_PMP            =    'VOD'
				         AND    A.PRICE      =    0
				       ) B
				      ,TB_MYLECTURE C WHERE  A.LECCODE = C.LECTURE_NO AND    B.ORDERNO = C.ORDERNO AND    B.MGNTNO  = C.PACKAGE_NO
						AND    SUBSTR(C.PACKAGE_NO,1,1) NOT IN ('D','L') AND    B.WMV_PMP = #{SEARCHPAYTYPE} AND    C.PACKAGE_NO = LTBL.LECCODE) VODN
			,	(SELECT
					COUNT(A.LECCODE)
				FROM   TB_OPENLEC_MST A
				      ,(
				        SELECT A.ORDERNO, A.MGNTNO, A.WMV_PMP
				        FROM   TB_ORDER_MGNT_NO A	 ,(SELECT ORDERNO ,MGNTNO FROM   TB_ORDER_MGNT_NO GROUP BY ORDERNO, MGNTNO HAVING COUNT(*) = 1) B
				        WHERE  A.ORDERNO            =    B.ORDERNO
				        AND    A.MGNTNO             =    B.MGNTNO
				        AND    A.STATUSCODE         =    'DLV105'
				        AND    SUBSTR(A.MGNTNO,1,1) <![CDATA[ <> ]]> 'L'
				         AND    A.WMV_PMP            =    'PMP'
				         AND    A.PRICE      <![CDATA[ > ]]>    0
				       ) B
				      ,TB_MYLECTURE C WHERE  A.LECCODE = C.LECTURE_NO AND    B.ORDERNO = C.ORDERNO AND    B.MGNTNO  = C.PACKAGE_NO
						AND    SUBSTR(C.PACKAGE_NO,1,1) NOT IN ('D','L') AND    B.WMV_PMP = #{SEARCHPAYTYPE} AND    C.PACKAGE_NO = LTBL.LECCODE) PMPY
			,	(SELECT
					COUNT(A.LECCODE)
				FROM   TB_OPENLEC_MST A
				      ,(
				        SELECT A.ORDERNO, A.MGNTNO, A.WMV_PMP
				        FROM   TB_ORDER_MGNT_NO A	 ,(SELECT ORDERNO ,MGNTNO FROM   TB_ORDER_MGNT_NO GROUP BY ORDERNO, MGNTNO HAVING COUNT(*) = 1) B
				        WHERE  A.ORDERNO            =    B.ORDERNO
				        AND    A.MGNTNO             =    B.MGNTNO
				        AND    A.STATUSCODE         =    'DLV105'
				        AND    SUBSTR(A.MGNTNO,1,1) <![CDATA[ <> ]]> 'L'
				         AND    A.WMV_PMP            =    'PMP'
				         AND    A.PRICE      =    0
				       ) B
				      ,TB_MYLECTURE C WHERE  A.LECCODE = C.LECTURE_NO AND    B.ORDERNO = C.ORDERNO AND    B.MGNTNO  = C.PACKAGE_NO
						AND    SUBSTR(C.PACKAGE_NO,1,1) NOT IN ('D','L') AND    B.WMV_PMP = #{SEARCHPAYTYPE} AND    C.PACKAGE_NO = LTBL.LECCODE) PMPN
			,	(SELECT
					COUNT(A.LECCODE)
				FROM   TB_OPENLEC_MST A
				      ,(
				        SELECT A.ORDERNO, A.MGNTNO, A.WMV_PMP
				        FROM   TB_ORDER_MGNT_NO A	 ,(SELECT ORDERNO ,MGNTNO FROM   TB_ORDER_MGNT_NO GROUP BY ORDERNO, MGNTNO HAVING COUNT(*) = 1) B
				        WHERE  A.ORDERNO            =    B.ORDERNO
				        AND    A.MGNTNO             =    B.MGNTNO
				        AND    A.STATUSCODE         =    'DLV105'
				        AND    SUBSTR(A.MGNTNO,1,1) <![CDATA[ <> ]]> 'L'
				         AND    A.WMV_PMP            =    'VOD+PMP'
				         AND    A.PRICE      <![CDATA[ > ]]>    0
				       ) B
				      ,TB_MYLECTURE C WHERE  A.LECCODE = C.LECTURE_NO AND    B.ORDERNO = C.ORDERNO AND    B.MGNTNO  = C.PACKAGE_NO
						AND    SUBSTR(C.PACKAGE_NO,1,1) NOT IN ('D','L') AND    B.WMV_PMP = #{SEARCHPAYTYPE} AND    C.PACKAGE_NO = LTBL.LECCODE) VODPMPY
			,	(SELECT
					COUNT(A.LECCODE)
				FROM   TB_OPENLEC_MST A
				      ,(
				        SELECT A.ORDERNO, A.MGNTNO, A.WMV_PMP
				        FROM   TB_ORDER_MGNT_NO A	 ,(SELECT ORDERNO ,MGNTNO FROM   TB_ORDER_MGNT_NO GROUP BY ORDERNO, MGNTNO HAVING COUNT(*) = 1) B
				        WHERE  A.ORDERNO            =    B.ORDERNO
				        AND    A.MGNTNO             =    B.MGNTNO
				        AND    A.STATUSCODE         =    'DLV105'
				        AND    SUBSTR(A.MGNTNO,1,1) <![CDATA[ <> ]]> 'L'
				         AND    A.WMV_PMP            =    'VOD+PMP'
				         AND    A.PRICE      =    0
				       ) B
				      ,TB_MYLECTURE C WHERE  A.LECCODE = C.LECTURE_NO AND    B.ORDERNO = C.ORDERNO AND    B.MGNTNO  = C.PACKAGE_NO
						AND    SUBSTR(C.PACKAGE_NO,1,1) NOT IN ('D','L') AND    B.WMV_PMP = #{SEARCHPAYTYPE} AND    C.PACKAGE_NO = LTBL.LECCODE) VODPMPN
		FROM 	(
			SELECT A.*, ROWNUM rnum
		  	FROM (
					SELECT
						TBL.*
						  , (SELECT NAME FROM TB_CATEGORY_INFO WHERE CODE = TBL.CATEGORY_CD) AS CATEGORY_NM
						  , (SELECT NAME FROM TB_LEARNING_FORM_INFO WHERE CODE = TBL.LEARNING_CD) AS LEARNING_NM
						  , (SELECT USER_NM FROM TB_MA_MEMBER WHERE USER_ID = TBL.SUBJECT_TEACHER) AS SUBJECT_TEACHER_NM
					FROM
					(SELECT SEQ, LECCODE FROM TB_LEC_JONG GROUP BY SEQ, LECCODE HAVING LECCODE LIKE CONCAT(#{LEC_TYPE_CHOICE}, '%') AND SEQ = #{SEQ}) T1
					INNER JOIN TB_OPENLEC_MST TBL ON T1.LECCODE = TBL.LECCODE
					WHERE LEC_TYPE_CHOICE = #{LEC_TYPE_CHOICE}
				 	ORDER BY TBL.CATEGORY_CD
				) A
			) LTBL
	</select>

	<select id="openlectureJongList" parameterType="hashMap" resultType="hashMap">
		SELECT
			LTBL.*
			,	(SELECT
					COUNT(A.LECCODE)
				FROM   TB_OPENLEC_MST A
				      ,(
				        SELECT A.ORDERNO, A.MGNTNO, A.WMV_PMP
				        FROM   TB_ORDER_MGNT_NO A	 ,(SELECT ORDERNO ,MGNTNO FROM   TB_ORDER_MGNT_NO GROUP BY ORDERNO, MGNTNO HAVING COUNT(*) = 1) B
				        WHERE  A.ORDERNO            =    B.ORDERNO
				        AND    A.MGNTNO             =    B.MGNTNO
				        AND    A.STATUSCODE         =    'DLV105'
				        AND    SUBSTR(A.MGNTNO,1,1) <![CDATA[ <> ]]> 'L'
				         AND    A.WMV_PMP            =    'VOD'
				         AND    A.PRICE      <![CDATA[ > ]]>    0
				       ) B
				      ,TB_MYLECTURE C WHERE  A.LECCODE = C.LECTURE_NO AND    B.ORDERNO = C.ORDERNO AND    B.MGNTNO  = C.PACKAGE_NO
						AND    SUBSTR(C.PACKAGE_NO,1,1) NOT IN ('D','L') AND    B.WMV_PMP = 'VOD' AND    C.PACKAGE_NO = LTBL.LECCODE) VODY
			,	(SELECT
					COUNT(A.LECCODE)
				FROM   TB_OPENLEC_MST A
				      ,(
				        SELECT A.ORDERNO, A.MGNTNO, A.WMV_PMP
				        FROM   TB_ORDER_MGNT_NO A	 ,(SELECT ORDERNO ,MGNTNO FROM   TB_ORDER_MGNT_NO GROUP BY ORDERNO, MGNTNO HAVING COUNT(*) = 1) B
				        WHERE  A.ORDERNO            =    B.ORDERNO
				        AND    A.MGNTNO             =    B.MGNTNO
				        AND    A.STATUSCODE         =    'DLV105'
				        AND    SUBSTR(A.MGNTNO,1,1) <![CDATA[ <> ]]> 'L'
				         AND    A.WMV_PMP            =    'VOD'
				         AND    A.PRICE      =    0
				       ) B
				      ,TB_MYLECTURE C WHERE  A.LECCODE = C.LECTURE_NO AND    B.ORDERNO = C.ORDERNO AND    B.MGNTNO  = C.PACKAGE_NO
						AND    SUBSTR(C.PACKAGE_NO,1,1) NOT IN ('D','L') AND    B.WMV_PMP =  'VOD' AND    C.PACKAGE_NO = LTBL.LECCODE) VODN
			,	(SELECT
					COUNT(A.LECCODE)
				FROM   TB_OPENLEC_MST A
				      ,(
				        SELECT A.ORDERNO, A.MGNTNO, A.WMV_PMP
				        FROM   TB_ORDER_MGNT_NO A	 ,(SELECT ORDERNO ,MGNTNO FROM   TB_ORDER_MGNT_NO GROUP BY ORDERNO, MGNTNO HAVING COUNT(*) = 1) B
				        WHERE  A.ORDERNO            =    B.ORDERNO
				        AND    A.MGNTNO             =    B.MGNTNO
				        AND    A.STATUSCODE         =    'DLV105'
				        AND    SUBSTR(A.MGNTNO,1,1) <![CDATA[ <> ]]> 'L'
				         AND    A.WMV_PMP            =    'PMP'
				         AND    A.PRICE      <![CDATA[ > ]]>    0
				       ) B
				      ,TB_MYLECTURE C WHERE  A.LECCODE = C.LECTURE_NO AND    B.ORDERNO = C.ORDERNO AND    B.MGNTNO  = C.PACKAGE_NO
						AND    SUBSTR(C.PACKAGE_NO,1,1) NOT IN ('D','L') AND    B.WMV_PMP = 'PMP' AND    C.PACKAGE_NO = LTBL.LECCODE) PMPY
			,	(SELECT
					COUNT(A.LECCODE)
				FROM   TB_OPENLEC_MST A
				      ,(
				        SELECT A.ORDERNO, A.MGNTNO, A.WMV_PMP
				        FROM   TB_ORDER_MGNT_NO A	 ,(SELECT ORDERNO ,MGNTNO FROM   TB_ORDER_MGNT_NO GROUP BY ORDERNO, MGNTNO HAVING COUNT(*) = 1) B
				        WHERE  A.ORDERNO            =    B.ORDERNO
				        AND    A.MGNTNO             =    B.MGNTNO
				        AND    A.STATUSCODE         =    'DLV105'
				        AND    SUBSTR(A.MGNTNO,1,1) <![CDATA[ <> ]]> 'L'
				         AND    A.WMV_PMP            =    'PMP'
				         AND    A.PRICE      =    0
				       ) B
				      ,TB_MYLECTURE C WHERE  A.LECCODE = C.LECTURE_NO AND    B.ORDERNO = C.ORDERNO AND    B.MGNTNO  = C.PACKAGE_NO
						AND    SUBSTR(C.PACKAGE_NO,1,1) NOT IN ('D','L') AND    B.WMV_PMP = 'PMP' AND    C.PACKAGE_NO = LTBL.LECCODE) PMPN
			,	(SELECT
					COUNT(A.LECCODE)
				FROM   TB_OPENLEC_MST A
				      ,(
				        SELECT A.ORDERNO, A.MGNTNO, A.WMV_PMP
				        FROM   TB_ORDER_MGNT_NO A	 ,(SELECT ORDERNO ,MGNTNO FROM   TB_ORDER_MGNT_NO GROUP BY ORDERNO, MGNTNO HAVING COUNT(*) = 1) B
				        WHERE  A.ORDERNO            =    B.ORDERNO
				        AND    A.MGNTNO             =    B.MGNTNO
				        AND    A.STATUSCODE         =    'DLV105'
				        AND    SUBSTR(A.MGNTNO,1,1) <![CDATA[ <> ]]> 'L'
				         AND    A.WMV_PMP            =    'VOD+PMP'
				         AND    A.PRICE      <![CDATA[ > ]]>    0
				       ) B
				      ,TB_MYLECTURE C WHERE  A.LECCODE = C.LECTURE_NO AND    B.ORDERNO = C.ORDERNO AND    B.MGNTNO  = C.PACKAGE_NO
						AND    SUBSTR(C.PACKAGE_NO,1,1) NOT IN ('D','L') AND    B.WMV_PMP = 'VOD+PMP' AND    C.PACKAGE_NO = LTBL.LECCODE) VODPMPY
			,	(SELECT
					COUNT(A.LECCODE)
				FROM   TB_OPENLEC_MST A
				      ,(
				        SELECT A.ORDERNO, A.MGNTNO, A.WMV_PMP
				        FROM   TB_ORDER_MGNT_NO A	 ,(SELECT ORDERNO ,MGNTNO FROM   TB_ORDER_MGNT_NO GROUP BY ORDERNO, MGNTNO HAVING COUNT(*) = 1) B
				        WHERE  A.ORDERNO            =    B.ORDERNO
				        AND    A.MGNTNO             =    B.MGNTNO
				        AND    A.STATUSCODE         =    'DLV105'
				        AND    SUBSTR(A.MGNTNO,1,1) <![CDATA[ <> ]]> 'L'
				         AND    A.WMV_PMP            =    'VOD+PMP'
				         AND    A.PRICE      =    0
				       ) B
				      ,TB_MYLECTURE C WHERE  A.LECCODE = C.LECTURE_NO AND    B.ORDERNO = C.ORDERNO AND    B.MGNTNO  = C.PACKAGE_NO
						AND    SUBSTR(C.PACKAGE_NO,1,1) NOT IN ('D','L') AND    B.WMV_PMP = 'VOD+PMP' AND    C.PACKAGE_NO = LTBL.LECCODE) VODPMPN
		FROM 	(
			SELECT A.*, ROWNUM rnum
		  	FROM (
					SELECT
						TBL.*
						  , (SELECT NAME FROM TB_CATEGORY_INFO WHERE CODE = TBL.CATEGORY_CD) AS CATEGORY_NM
						  , (SELECT NAME FROM TB_LEARNING_FORM_INFO WHERE CODE = TBL.LEARNING_CD) AS LEARNING_NM
						  , T1.JONGSEQ
					FROM
						(
						SELECT JONGSEQ, LECCODE
						FROM (
						 	SELECT A.LECCODE, MAX(A.SEQ) JONGSEQ
						     FROM TB_LEC_JONG A
						     LEFT OUTER JOIN TB_OPENLEC_MST B ON A.LECCODE = B.LECCODE
						     WHERE A.LECCODE LIKE CONCAT(#{LEC_TYPE_CHOICE}, '%')
					  		<if test='SEARCHKIND != null and SEARCHKIND != ""'>
					  			AND B.CATEGORY_CD = #{SEARCHKIND}
					  		</if>
					  		GROUP BY A.LECCODE
							)
						) T1
					INNER JOIN TB_OPENLEC_MST TBL ON T1.LECCODE = TBL.LECCODE

					WHERE LEC_TYPE_CHOICE = #{LEC_TYPE_CHOICE}
			  		<if test='SEARCHFORM != null and SEARCHFORM != ""'>
			  			AND LEARNING_CD = #{SEARCHFORM}
			  		</if>
			  		<if test='SEARCHYEAR!= null and SEARCHYEAR != ""'>
			  			AND SUBJECT_OFF_OPEN_YEAR <![CDATA[ >= ]]> '2012'
			  		</if>
				 	<if test='SEARCHTEXT != null and SEARCHTEXT != ""'>
						<if test='SEARCHTYPE != null and SEARCHTYPE != ""'>
							<if test='SEARCHTYPE == "2"'>
								AND SUBJECT_TITLE like '%'||#{SEARCHTEXT}||'%'
							</if>
							<if test='SEARCHTYPE == "4"'>
								AND TBL.LECCODE like '%'||#{SEARCHTEXT}||'%'
							</if>
						</if>
						<if test='SEARCHTYPE == null or SEARCHTYPE == ""'>
							AND (
								SUBJECT_TITLE like '%'||#{SEARCHTEXT}||'%'
								OR TBL.LECCODE like '%'||#{SEARCHTEXT}||'%')
						</if>
					</if>
				 	ORDER BY TBL.SEQ DESC
				) A
               	WHERE rownum <![CDATA[ <= ]]> #{endNo}
			) LTBL
		WHERE rnum <![CDATA[ > ]]> #{startNo}
	</select>

	<select id="openlectureJongListCount" parameterType="hashMap" resultType="int">
		SELECT
			COUNT(TBL.LECCODE)
		FROM
			(
			SELECT JONGSEQ, LECCODE
			FROM (
			 	SELECT A.LECCODE, MAX(A.SEQ) JONGSEQ
			     FROM TB_LEC_JONG A
			     LEFT OUTER JOIN TB_OPENLEC_MST B ON A.LECCODE = B.LECCODE
			     WHERE A.LECCODE LIKE CONCAT(#{LEC_TYPE_CHOICE}, '%')
		  		<if test='SEARCHKIND != null and SEARCHKIND != ""'>
		  			AND B.CATEGORY_CD = #{SEARCHKIND}
		  		</if>
		  		GROUP BY A.LECCODE
				)
			) T1
			INNER JOIN TB_OPENLEC_MST TBL ON T1.LECCODE = TBL.LECCODE
		WHERE LEC_TYPE_CHOICE = #{LEC_TYPE_CHOICE}
  		<if test='SEARCHFORM != null and SEARCHFORM != ""'>
  			AND LEARNING_CD = #{SEARCHFORM}
  		</if>
  		<if test='SEARCHYEAR!= null and SEARCHYEAR != ""'>
  			AND SUBJECT_OFF_OPEN_YEAR <![CDATA[ >= ]]> '2012'
  		</if>
	 	<if test='SEARCHTEXT != null and SEARCHTEXT != ""'>
			<if test='SEARCHTYPE != null and SEARCHTYPE != ""'>
				<if test='SEARCHTYPE == "2"'>
					AND SUBJECT_TITLE like '%'||#{SEARCHTEXT}||'%'
				</if>
				<if test='SEARCHTYPE == "4"'>
					AND TBL.LECCODE like '%'||#{SEARCHTEXT}||'%'
				</if>
			</if>
			<if test='SEARCHTYPE == null or SEARCHTYPE == ""'>
				AND (
					SUBJECT_TITLE like '%'||#{SEARCHTEXT}||'%'
					OR TBL.LECCODE like '%'||#{SEARCHTEXT}||'%')
			</if>
		</if>
	</select>

	<select id="openlectureJongView" parameterType="hashMap" resultMap="openlectureMap">
		SELECT
			TBL.*, (SELECT NO FROM TB_CHOICE_JONG_NO WHERE LECCODE = TBL.LECCODE AND CATEGORY_CD = TBL.CATEGORY_CD) AS NO
		FROM TB_OPENLEC_MST TBL
		WHERE TBL.LECCODE = #{LECCODE}
	</select>

	<select id="openlectureJongSubjectList" parameterType="hashMap" resultType="hashMap">
		SELECT * FROM 	(
			SELECT A.*, ROWNUM rnum
		  	FROM (
		  		SELECT TBL.* FROM (
					SELECT T1.*
						, (SELECT NAME FROM TB_CATEGORY_INFO WHERE CODE = T1.CATEGORY_CD) AS CATEGORY_NM
						, (SELECT NAME FROM TB_LEARNING_FORM_INFO WHERE CODE = T1.LEARNING_CD) AS LEARNING_NM
						, (SELECT SUBJECT_NM FROM TB_SUBJECT_INFO WHERE SUBJECT_CD = T1.SUBJECT_SJT_CD) AS SUBJECT_NM
						, (SELECT USER_NM FROM TB_MA_MEMBER WHERE USER_ID = T1.SUBJECT_TEACHER) AS SUBJECT_TEACHER_NM
						FROM
						TB_OPENLEC_MST T1 INNER JOIN TB_LEC_BRIDGE T2 ON T1.LECCODE = T2.LECCODE
					WHERE T1.LEC_TYPE_CHOICE = 'D'
				) TBL WHERE 1 = 1
		 		<if test='SEARCHKIND != null and SEARCHKIND != ""'>
		 			AND TBL.CATEGORY_CD = #{SEARCHKIND}
		 		</if>
		 		<if test='SEARCHFORM != null and SEARCHFORM != ""'>
		 			AND TBL.LEARNING_CD = #{SEARCHFORM}
		 		</if>
			 	<if test='SEARCHTEXT != null and SEARCHTEXT != ""'>
					<if test='SEARCHTYPE != null and SEARCHTYPE != ""'>
						<if test='SEARCHTYPE == "1"'>
							AND TBL.SUBJECT_TITLE like '%'||#{SEARCHTEXT}||'%'
						</if>
						<if test='SEARCHTYPE == "2"'>
							AND TBL.SUBJECT_TEACHER_NM like '%'||#{SEARCHTEXT}||'%'
						</if>
					</if>
					<if test='SEARCHTYPE == null or SEARCHTYPE == ""'>
						AND (
							TBL.SUBJECT_TITLE like '%'||#{SEARCHTEXT}||'%'
							OR TBL.SUBJECT_TEACHER_NM like '%'||#{SEARCHTEXT}||'%'
						)
					</if>
				</if>
				ORDER BY TBL.SEQ DESC
			) A
            WHERE rownum &lt;= #{endNo}
		)
		WHERE rnum &gt; #{startNo}
	</select>

	<select id="openlectureJongSubjectListCount" parameterType="hashMap" resultType="int">
  		SELECT COUNT(TBL.LECCODE) FROM (
			SELECT T1.*
				, (SELECT NAME FROM TB_CATEGORY_INFO WHERE CODE = T1.CATEGORY_CD) AS CATEGORY_NM
				, (SELECT NAME FROM TB_LEARNING_FORM_INFO WHERE CODE = T1.LEARNING_CD) AS LEARNING_NM
				, (SELECT SUBJECT_NM FROM TB_SUBJECT_INFO WHERE SUBJECT_CD = T1.SUBJECT_SJT_CD) AS SUBJECT_NM
				, (SELECT USER_NM FROM TB_MA_MEMBER WHERE USER_ID = T1.SUBJECT_TEACHER) AS SUBJECT_TEACHER_NM
				FROM
				TB_OPENLEC_MST T1 INNER JOIN TB_LEC_BRIDGE T2 ON T1.LECCODE = T2.LECCODE
			WHERE T1.LEC_TYPE_CHOICE = 'D'
		) TBL 	WHERE 1 = 1
 		<if test='SEARCHKIND != null and SEARCHKIND != ""'>
 			AND TBL.CATEGORY_CD = #{SEARCHKIND}
 		</if>
 		<if test='SEARCHFORM != null and SEARCHFORM != ""'>
 			AND TBL.LEARNING_CD = #{SEARCHFORM}
 		</if>
	 	<if test='SEARCHTEXT != null and SEARCHTEXT != ""'>
			<if test='SEARCHTYPE != null and SEARCHTYPE != ""'>
				<if test='SEARCHTYPE == "1"'>
					AND TBL.SUBJECT_TITLE like '%'||#{SEARCHTEXT}||'%'
				</if>
				<if test='SEARCHTYPE == "2"'>
					AND TBL.SUBJECT_TEACHER_NM like '%'||#{SEARCHTEXT}||'%'
				</if>
			</if>
			<if test='SEARCHTYPE == null or SEARCHTYPE == ""'>
				AND (
					TBL.SUBJECT_TITLE like '%'||#{SEARCHTEXT}||'%'
					OR TBL.SUBJECT_TEACHER_NM like '%'||#{SEARCHTEXT}||'%'
				)
			</if>
		</if>
	</select>

	<insert id="openlectureLecJongInsert" parameterType="hashMap" flushCache="true">
		INSERT INTO TB_LEC_JONG(SEQ, LECCODE, MST_LECCODE, SORT, GUBUN, REG_DT, REG_ID, UPD_DT, UPD_ID)
		VALUES (#{SEQ}, #{LECCODE}, #{MST_LECCODE}, #{SORT}, #{GUBUN}, SYSDATE, #{REG_ID}, SYSDATE, #{UPD_ID})
	</insert>

	<select id="openlectureViewLeccodeList" parameterType="hashMap" resultType="hashMap">
		SELECT
		  T1.MST_LECCODE, T1.SORT, T1.GUBUN
		  , TBL.*
		  , (SELECT NAME FROM TB_CATEGORY_INFO WHERE CODE = TBL.CATEGORY_CD) AS CATEGORY_NM
		  , (SELECT NAME FROM TB_LEARNING_FORM_INFO WHERE CODE = TBL.LEARNING_CD) AS LEARNING_NM
		  , (SELECT SUBJECT_NM FROM TB_SUBJECT_INFO WHERE SUBJECT_CD = TBL.SUBJECT_SJT_CD) AS SUBJECT_NM
		  , (SELECT USER_NM FROM TB_MA_MEMBER WHERE USER_ID = TBL.SUBJECT_TEACHER) AS SUBJECT_TEACHER_NM
		  FROM
		  TB_LEC_JONG T1 INNER JOIN TB_OPENLEC_MST TBL ON T1.MST_LECCODE = TBL.LECCODE
		WHERE T1.LECCODE = #{LECCODE} AND TBL.LEC_TYPE_CHOICE = 'D'
		ORDER BY T1.SORT ASC
	</select>

	<delete id="openlectureLecJongDelete" parameterType="hashMap" flushCache="true">
		DELETE FROM TB_LEC_JONG WHERE LECCODE = #{LECCODE}
	</delete>

	<delete id="openlectureChoiceJongNoDelete" parameterType="hashMap" flushCache="true">
		DELETE FROM TB_CHOICE_JONG_NO WHERE LECCODE = #{LECCODE}
	</delete>

<!-- 종합반 end -->


<!-- 선택형 종합반 start -->

	<insert id="openlectureChoiceJongNoInsert" parameterType="hashMap" flushCache="true">
		INSERT INTO TB_CHOICE_JONG_NO(SEQ, LECCODE, NO, CATEGORY_CD)
		VALUES (#{SEQ}, #{LECCODE}, #{NO}, #{CATEGORY_CD})
	</insert>

<!-- 선택형 종합반 end -->


	<select id="openlectureDeleteCheck" parameterType="hashMap" resultType="int">
		SELECT COUNT(*) FROM TB_ORDER_MGNT_NO WHERE MGNTNO = #{OPENLECCODE} AND STATUSCODE = 'DLV105'
	</select>




	<select id="openlecturePayList" parameterType="hashMap" resultType="hashMap">
		SELECT C.USERID                                                              AS USERID
		      ,(SELECT USER_NM  FROM TB_MA_MEMBER WHERE USER_ID = C.USERID)          AS USER_NM
		      ,(SELECT PHONE_NO FROM TB_MA_MEMBER WHERE USER_ID = C.USERID)          AS PHONE_NO
		      ,(SELECT USER_NM  FROM TB_MA_MEMBER WHERE USER_ID = A.SUBJECT_TEACHER) AS SUBJECT_USER_NM
		      ,A.SUBJECT_TITLE                                                       AS SUBJECT_TITLE
		      ,C.START_DATE                                                          AS START_DATE
		      ,C.END_DATE                                                            AS END_DATE
		      ,B.STATUSCODE
		      ,(SELECT CODE_NM FROM TB_BA_CONFIG_CD D WHERE D.CODE_VAL = B.STATUSCODE) AS STATUSCODE_NM
		FROM   TB_OPENLEC_MST A
		      ,(
		        SELECT A.ORDERNO
		              ,A.MGNTNO
		              ,A.WMV_PMP
		              ,A.STATUSCODE
		        FROM   TB_ORDER_MGNT_NO A
		              ,(SELECT ORDERNO
		                      ,MGNTNO
		                FROM   TB_ORDER_MGNT_NO
		                GROUP BY ORDERNO, MGNTNO
		                HAVING COUNT(*) = 1
		               ) B
		            WHERE  A.ORDERNO    =    B.ORDERNO
		            AND    A.MGNTNO     =    B.MGNTNO
		            AND    A.STATUSCODE IN    ('DLV105', 'DLV230')
		            AND    A.WMV_PMP    =    REPLACE(#{SEARCHPAYTYPE},' ','+')
		            <!--  유료 > 0, 무료 = 0 -->
		            <if test='SEARCHPAYYN == "Y"'>
		            	AND    A.PRICE      <![CDATA[ > ]]>    0
		            </if>
		            <if test='SEARCHPAYYN == "N"'>
		            	AND    A.PRICE      =    0
		            </if>
		       ) B
		      ,TB_MYLECTURE C
		WHERE  A.LECCODE            = B.MGNTNO
		AND    B.ORDERNO            = C.ORDERNO
		AND    B.MGNTNO             = C.PACKAGE_NO
		<if test='SEARCHOPENPAGE == null or SEARCHOPENPAGE == ""'>
			AND    A.LECCODE = #{LECCODE}
		</if>
		<if test='SEARCHOPENPAGE != null and SEARCHOPENPAGE != ""'>
			AND A.LECCODE IN (SELECT LECCODE FROM TB_LEC_BRIDGE WHERE BRIDGE_LECCODE = #{BRIDGE_LECCODE})
		</if>
		ORDER BY B.STATUSCODE
	</select>

	<select id="openlectureJongPayList" parameterType="hashMap" resultType="hashMap">
		SELECT C.USERID                                                              AS USERID
		      ,(SELECT USER_NM  FROM TB_MA_MEMBER WHERE USER_ID = C.USERID)          AS USER_NM
		      ,(SELECT PHONE_NO FROM TB_MA_MEMBER WHERE USER_ID = C.USERID)          AS PHONE_NO
		      ,(SELECT USER_NM  FROM TB_MA_MEMBER WHERE USER_ID = A.SUBJECT_TEACHER) AS SUBJECT_USER_NM
		      ,A.SUBJECT_TITLE                                                       AS SUBJECT_TITLE
		      ,C.START_DATE                                                          AS START_DATE
		      ,C.END_DATE                                                            AS END_DATE
		      ,B.STATUSCODE
		      ,(SELECT CODE_NM FROM TB_BA_CONFIG_CD D WHERE D.CODE_VAL = B.STATUSCODE) AS STATUSCODE_NM
		FROM   TB_OPENLEC_MST A
		      ,(
		        SELECT A.ORDERNO
		              ,A.MGNTNO
		              ,A.WMV_PMP
		              ,A.STATUSCODE
		        FROM   TB_ORDER_MGNT_NO A
		              ,(SELECT ORDERNO
		                      ,MGNTNO
		                FROM   TB_ORDER_MGNT_NO
		                GROUP BY ORDERNO, MGNTNO
		                HAVING COUNT(*) = 1
		               ) B
		            WHERE  A.ORDERNO            =    B.ORDERNO
		            AND    A.MGNTNO             =    B.MGNTNO
		            AND    A.STATUSCODE IN    ('DLV105', 'DLV230')
		            AND    SUBSTR(A.MGNTNO,1,1) <![CDATA[ <> ]]> 'L'
		            AND    A.WMV_PMP            =    #{SEARCHPAYTYPE}
		            <!--  유료 > 0, 무료 = 0 -->
		            <if test='SEARCHPAYYN == "Y"'>
		            	AND    A.PRICE      <![CDATA[ > ]]>    0
		            </if>
		            <if test='SEARCHPAYYN == "N"'>
		            	AND    A.PRICE      =    0
		            </if>
		       ) B
		      ,TB_MYLECTURE C
		WHERE  A.LECCODE = C.LECTURE_NO
		AND    B.ORDERNO = C.ORDERNO
		AND    B.MGNTNO  = C.PACKAGE_NO
		AND    SUBSTR(C.PACKAGE_NO,1,1) NOT IN ('D','L')
		AND    B.WMV_PMP = REPLACE(#{SEARCHPAYTYPE},' ','+')
		<if test='SEARCHOPENPAGE == null or SEARCHOPENPAGE == ""'>
			AND    C.PACKAGE_NO = #{LECCODE}
		</if>
		<if test='SEARCHOPENPAGE != null and SEARCHOPENPAGE != ""'>
			AND C.PACKAGE_NO IN (SELECT MST_LECCODE FROM TB_LEC_JONG WHERE SEQ = #{JSEQ})
		</if>
		ORDER BY C.LECTURE_NO, B.STATUSCODE
	</select>

	<select id="openlectureDataViewList" parameterType="hashMap" resultType="hashMap">
		SELECT B.SUBJECT_OPTION
		      ,B.BRIDGE_LECCODE
		      ,A.MOVIE_NAME
		      ,A.MOVIE_DESC
		      ,A.MOVIE_URL
		      ,A.WIDE_URL
		      ,A.MOVIE_FILENAME1
		      ,A.MP4_URL
		      ,A.MOVIE_FILENAME2
		      ,A.MOVIE_FILENAME3
		      ,A.MOVIE_FILENAME4
		      ,A.MOVIE_DATA_FILE_YN
		      ,A.MOVIE_DATA_FILENAME
		      ,A.MOVIE_TIME
		      ,A.MOVIE_ORDER1
		      ,A.MOVIE_ORDER2
		      ,A.MOVIE_FREE_FLAG
		      ,A.PMP_URL
		      ,A.PMP_FILENAME
		      ,A.MOVIE_NO
		      ,B.SUBJECT_VOD_DEFAULT_PATH
		      ,B.SUBJECT_WIDE_DEFAULT_PATH
		      ,B.SUBJECT_PMP_DEFAULT_PATH
		      ,B.SUBJECT_PRICE
		      ,NVL(A.STOP,'N')               AS STOP
		      ,TO_CHAR(SYSDATE , 'YYYY-MM-DD') SAMPLE_START_DT
        	  ,TO_CHAR(SYSDATE + 10000, 'YYYY-MM-DD') SAMPLE_END_DT
		FROM   TB_MOVIE A, (
		                        SELECT B.BRIDGE_LECCODE
		                              ,A.SUBJECT_OPTION
		                              ,A.SUBJECT_VOD_DEFAULT_PATH
		                              ,A.SUBJECT_WIDE_DEFAULT_PATH
		                              ,A.SUBJECT_PMP_DEFAULT_PATH
		                              ,A.SUBJECT_PRICE
		                        FROM   TB_OPENLEC_MST A, TB_LEC_BRIDGE B
		                        WHERE  A.LECCODE = B.LECCODE
		                        AND    A.LECCODE = #{LECCODE}
		                    ) B
		WHERE  A.LECCODE = B.BRIDGE_LECCODE
		AND    A.LECCODE = #{BRIDGE_LECCODE}
	<!--	AND    A.STOP != 'Y'	-->
		ORDER BY A.MOVIE_ORDER1, A.MOVIE_ORDER2

	</select>

	<select id="openlectureOnDetailS" parameterType="hashMap" resultMap="openlectureMap">
        SELECT TBL.*
        FROM (
            SELECT A.LECCODE, A.CATEGORY_CD, A.LEARNING_CD, A.LEC_TYPE_CHOICE, A.SUBJECT_TITLE, A.SUBJECT_DESC, A.SUBJECT_MEMO,
                 (SELECT NAME FROM TB_LEARNING_FORM_INFO WHERE CODE = A.LEARNING_CD) LEARNING_NM, A.SUBJECT_OFF_OPEN_YEAR,  A.SUBJECT_OFF_OPEN_MONTH,
                 TO_CHAR(TO_DATE(A.SUBJECT_OFF_OPEN_YEAR || A.SUBJECT_OFF_OPEN_MONTH || A.SUBJECT_OFF_OPEN_DAY, 'YYYYMMDD'),'YYYY-MM-DD') START_DATE,
                 TO_CHAR(TO_DATE(A.SUBJECT_OFF_OPEN_YEAR || A.SUBJECT_OFF_OPEN_MONTH || A.SUBJECT_OFF_OPEN_DAY, 'YYYYMMDD') + A.SUBJECT_PERIOD,'YYYY-MM-DD') END_DATE,
                 A.SUBJECT_PERIOD,
                 A.LEC_SCHEDULE,
                 A.SUBJECT_PRICE,
                 A.SUBJECT_DISCOUNT,
                 A.SUBJECT_OPTION,
                 A.SUBJECT_MOVIE,
                 A.SUBJECT_PMP,
                 A.SUBJECT_MOVIE_PMP,
                 A.SUBJECT_MOVIE_MP4,
                 A.SUBJECT_MOVIE_VOD_MP4,
                 A.SUBJECT_PMP_DEFAULT_PATH
           FROM  TB_OPENLEC_MST A
 		) TBL WHERE TBL.LECCODE = #{LECCODE}
	</select>

	<insert id="insertPmpDownLog" parameterType="hashMap" flushCache="true">
		INSERT INTO TB_PMP_DOWNLOG(
			IDX,
			USERID,
			CONTENTID,
			DOWNLOGINFO,
			PMP_REGDATE
			)
		VALUES(
			SEQ_TB_PMP_DOWNLOG_IDX.NEXTVAL,
			#{REG_ID},
			#{MOVIE_NO},
			#{DOWNLOGINFO},
			SYSDATE
		)
	</insert>

	<select id="openlectureDataMemoViewList" parameterType="hashMap" resultType="hashMap">
		SELECT  NVL(BRIDGE_LECCODE,'')  AS RLECCODE
		       ,MOVIE_ORDER1            AS MOVIE_ORDER1
		       ,MOVIE_ORDER2            AS MOVIE_ORDER2
		       ,NVL(POSITION,'')        AS POSITION
		       ,NVL(MST_TEXT,'')        AS MST_TEXT
		FROM    TB_OPENLEC_MST_MEMO
		WHERE   BRIDGE_LECCODE = #{BRIDGE_LECCODE}
		ORDER BY MOVIE_ORDER1 , MOVIE_ORDER2 ASC , POSITION DESC
	</select>

	<select id="openlectureDataMovieViewList" parameterType="hashMap" resultType="hashMap">
		SELECT B.SUBJECT_OPTION
		      ,B.BRIDGE_LECCODE
		      ,A.MOVIE_NAME
		      ,A.MOVIE_DESC
		      ,A.MOVIE_URL
		      ,A.WIDE_URL
		      ,A.MOVIE_FILENAME1
		      ,A.MP4_URL
		      ,A.MOVIE_FILENAME2
		      ,A.MOVIE_FILENAME3
		      ,A.MOVIE_FILENAME4
		      ,A.MOVIE_DATA_FILE_YN
		      ,A.MOVIE_DATA_FILENAME
		      ,A.MOVIE_TIME
		      ,A.MOVIE_ORDER1
		      ,A.MOVIE_ORDER2
		      ,A.MOVIE_FREE_FLAG
		      ,A.PMP_URL
		      ,A.PMP_FILENAME
		      ,B.SUBJECT_VOD_DEFAULT_PATH
		      ,B.SUBJECT_WIDE_DEFAULT_PATH
		      ,B.SUBJECT_PMP_DEFAULT_PATH
		      ,B.SUBJECT_PRICE
		      ,NVL(A.STOP,'N')               AS STOP
		FROM   TB_MOVIE A, (
		                        SELECT B.BRIDGE_LECCODE
		                              ,A.SUBJECT_OPTION
		                              ,A.SUBJECT_VOD_DEFAULT_PATH
		                              ,A.SUBJECT_WIDE_DEFAULT_PATH
		                              ,A.SUBJECT_PMP_DEFAULT_PATH
		                              ,A.SUBJECT_PRICE
		                        FROM   TB_OPENLEC_MST A, TB_LEC_BRIDGE B
		                        WHERE  A.LECCODE = B.LECCODE
		                        AND    A.LECCODE = #{LECCODE}
		                    ) B
		WHERE  A.LECCODE = B.BRIDGE_LECCODE
		AND    A.LECCODE = #{BRIDGE_LECCODE}
		AND    A.STOP != 'Y'
		ORDER BY A.MOVIE_ORDER1, A.MOVIE_ORDER2
	</select>

	<select id="openlectureDataMovieList" parameterType="hashMap" resultType="hashMap">
		SELECT B.SUBJECT_OPTION
		      ,B.BRIDGE_LECCODE
		      ,A.MOVIE_NO
		      ,A.MOVIE_NAME
		      ,A.MOVIE_DESC
		      ,A.MOVIE_URL
		      ,A.WIDE_URL
		      ,A.MOVIE_FILENAME1
		      ,A.MP4_URL
		      ,A.MOVIE_FILENAME2
		      ,A.MOVIE_FILENAME3
		      ,A.MOVIE_FILENAME4
		      ,A.MOVIE_DATA_FILE_YN
		      ,A.MOVIE_DATA_FILENAME
		      ,A.MOVIE_TIME
		      ,A.MOVIE_ORDER1
		      ,A.MOVIE_ORDER2
		      ,A.MOVIE_FREE_FLAG
		      ,A.PMP_URL
		      ,A.PMP_FILENAME
		      ,B.SUBJECT_VOD_DEFAULT_PATH
		      ,B.SUBJECT_WIDE_DEFAULT_PATH
		      ,B.SUBJECT_PMP_DEFAULT_PATH
		      ,B.SUBJECT_PRICE
		      ,NVL(A.STOP,'N')               AS STOP
		FROM   TB_MOVIE A, (
		                        SELECT B.BRIDGE_LECCODE
		                              ,A.SUBJECT_OPTION
		                              ,A.SUBJECT_VOD_DEFAULT_PATH
		                              ,A.SUBJECT_WIDE_DEFAULT_PATH
		                              ,A.SUBJECT_PMP_DEFAULT_PATH
		                              ,A.SUBJECT_PRICE
		                        FROM   TB_OPENLEC_MST A, TB_LEC_BRIDGE B
		                        WHERE  A.LECCODE = B.LECCODE
		                        AND    A.LECCODE = #{LECCODE}
		                    ) B
		WHERE  A.LECCODE = B.BRIDGE_LECCODE
		AND    A.LECCODE = #{BRIDGE_LECCODE}
		ORDER BY A.MOVIE_ORDER1, A.MOVIE_ORDER2
	</select>

	<insert id="openlectureMovieInsert" parameterType="hashMap" flushCache="true">
		INSERT INTO TB_MOVIE(MOVIE_NO, LECCODE, MOVIE_NAME, MOVIE_DESC
							, MOVIE_DATA_FILE_YN, MOVIE_DATA_FILENAME
		                    , MOVIE_TIME, MOVIE_ORDER1, MOVIE_ORDER2, MOVIE_FREE_FLAG
							, MOVIE_URL,WIDE_URL, MOVIE_FILENAME1, MOVIE_FILENAME4
							, MP4_URL, MOVIE_FILENAME2  ,MOVIE_FILENAME3
		                    , PMP_URL, PMP_FILENAME
		                    , STOP)
		VALUES((SELECT NVL(MAX(MOVIE_NO),0)+1 FROM TB_MOVIE), #{BRIDGE_LECCODE}, #{ADD_MOVIE_NAME}, #{ADD_MOVIE_DESC}
				  , 'N', ''
		          , #{ADD_MOVIE_TIME}, #{ADD_MOVIE_ORDER1}, #{ADD_MOVIE_ORDER2}, #{ADD_MOVIE_FREE_FLAG}
				  , #{ADD_MOVIE_URL}, #{ADD_WIDE_URL}, #{ADD_MOVIE_FILENAME1}, #{ADD_MOVIE_FILENAME4}
 					<!-- <if test='ADD_MP4_URL == null or ADD_MP4_URL == ""'>
 						<if test='ADD_MOVIE_URL != null and ADD_MOVIE_URL != ""'>
 							, #{ADD_WIDE_URL}
 						</if>
 						 <if test='ADD_MOVIE_URL == null or ADD_MOVIE_URL == ""'>
 						 	, #{ADD_MP4_URL}
 						 </if>
 					</if> -->
 					<if test='ADD_MP4_URL == null or ADD_MP4_URL == ""'>
 						<if test='ADD_WIDE_URL != null and ADD_WIDE_URL != ""'>
 							, #{ADD_WIDE_URL}
 						</if>
 						 <if test='ADD_WIDE_URL == null or ADD_WIDE_URL == ""'>
 						 	, #{ADD_MP4_URL}
 						 </if>
 					</if>
				    <if test='ADD_MP4_URL != null and ADD_MP4_URL != ""'>
				  		, #{ADD_MP4_URL}
				  	</if>
 					<if test='ADD_MOVIE_FILENAME2 == null or ADD_MOVIE_FILENAME2 == ""'>
 						<if test='ADD_MOVIE_FILENAME4 != null and ADD_MOVIE_FILENAME4 != ""'>
 							, REPLACE(#{ADD_MOVIE_FILENAME4}, 'wmv', 'mp4')
 						</if>
 						 <if test='ADD_MOVIE_FILENAME4 == null or ADD_MOVIE_FILENAME4 == ""'>
 						 	, #{ADD_MOVIE_FILENAME2}
 						 </if>
 					</if>
<!--  					<if test='ADD_MOVIE_FILENAME2 == null or ADD_MOVIE_FILENAME2 == ""'>
 						<if test='ADD_MOVIE_FILENAME1 != null and ADD_MOVIE_FILENAME1 != ""'>
 							, REPLACE(#{ADD_MOVIE_FILENAME1}, 'wmv', 'mp4')
 						</if>
 						 <if test='ADD_MOVIE_FILENAME1 == null or ADD_MOVIE_FILENAME1 == ""'>
 						 	, #{ADD_MOVIE_FILENAME2}
 						 </if>
 					</if> -->
				    <if test='ADD_MOVIE_FILENAME2 != null and ADD_MOVIE_FILENAME2 != ""'>
				  		, #{ADD_MOVIE_FILENAME2}
				  	</if>

 					<if test='ADD_MOVIE_FILENAME3 == null or ADD_MOVIE_FILENAME3 == ""'>
 						<if test='ADD_MOVIE_FILENAME4 != null and ADD_MOVIE_FILENAME4 != ""'>
 							, REPLACE(#{ADD_MOVIE_FILENAME4}, 'wmv', 'mp4')
 						</if>
 						 <if test='ADD_MOVIE_FILENAME4 == null or ADD_MOVIE_FILENAME4 == ""'>
 						 	, #{ADD_MOVIE_FILENAME2}
 						 </if>
 					</if>
<!--  					<if test='ADD_MOVIE_FILENAME3 == null or ADD_MOVIE_FILENAME3 == ""'>
 						<if test='ADD_MOVIE_FILENAME1 != null and ADD_MOVIE_FILENAME1 != ""'>
 							, REPLACE(#{ADD_MOVIE_FILENAME1}, 'wmv', 'mp4')
 						</if>
 						 <if test='ADD_MOVIE_FILENAME1 == null or ADD_MOVIE_FILENAME1 == ""'>
 						 	, #{ADD_MOVIE_FILENAME2}
 						 </if>
 					</if> -->
				    <if test='ADD_MOVIE_FILENAME3 != null and ADD_MOVIE_FILENAME3 != ""'>
				  		, #{ADD_MOVIE_FILENAME3}
				  	</if>

 					<!-- <if test='ADD_PMP_URL == null or ADD_PMP_URL == ""'>
 						<if test='ADD_MOVIE_URL != null and ADD_MOVIE_URL != ""'>
 							, #{ADD_MOVIE_URL}
 						</if>
 						 <if test='ADD_MOVIE_URL == null or ADD_MOVIE_URL == ""'>
 						 	, #{ADD_PMP_URL}
 						 </if>
 					</if> -->
 					<if test='ADD_PMP_URL == null or ADD_PMP_URL == ""'>
 						<if test='ADD_WIDE_URL != null and ADD_WIDE_URL != ""'>
 							, #{ADD_WIDE_URL}
 						</if>
 						 <if test='ADD_WIDE_URL == null or ADD_WIDE_URL == ""'>
 						 	, #{ADD_PMP_URL}
 						 </if>
 					</if>
				    <if test='ADD_PMP_URL != null and ADD_PMP_URL != ""'>
				  		, #{ADD_PMP_URL}
				  	</if>
 					<if test='ADD_PMP_FILENAME == null or ADD_PMP_FILENAME == ""'>
 						<if test='ADD_MOVIE_FILENAME4 != null and ADD_MOVIE_FILENAME4 != ""'>
 							, REPLACE(#{ADD_MOVIE_FILENAME4}, 'wmv', 'avi.willbes')
 						</if>
 						 <if test='ADD_MOVIE_FILENAME4 == null or ADD_MOVIE_FILENAME4 == ""'>
 						 	, #{ADD_PMP_FILENAME}
 						 </if>
 					</if>
<!--  					<if test='ADD_PMP_FILENAME == null or ADD_PMP_FILENAME == ""'>
 						<if test='ADD_MOVIE_FILENAME1 != null and ADD_MOVIE_FILENAME1 != ""'>
 							, REPLACE(#{ADD_MOVIE_FILENAME1}, 'wmv', 'avi.willbes')
 						</if>
 						 <if test='ADD_MOVIE_FILENAME1 == null or ADD_MOVIE_FILENAME1 == ""'>
 						 	, #{ADD_PMP_FILENAME}
 						 </if>
 					</if> -->
				    <if test='ADD_PMP_FILENAME != null and ADD_PMP_FILENAME != ""'>
				  		, #{ADD_PMP_FILENAME}
				  	</if>
		          , 'Y')
	</insert>

	<delete id="openlectureMovieDelete" parameterType="hashMap" flushCache="true">
		DELETE FROM TB_MOVIE WHERE MOVIE_NO = #{MOVIE_NO}
	</delete>

	<update id="openlectureMovieUpdate" parameterType="hashMap">
		UPDATE TB_MOVIE SET
			MOVIE_NAME = #{MOVIE_NAME}
			, MOVIE_ORDER1 = #{MOVIE_ORDER1}
			, MOVIE_ORDER2 = #{MOVIE_ORDER2}
			, MOVIE_DESC = #{MOVIE_DESC}
			, MOVIE_URL = #{MOVIE_URL}
			, MOVIE_FILENAME1 = #{MOVIE_FILENAME1}
			<if test='MP4_URL == null or MP4_URL == ""'>
				<if test='MOVIE_URL != null and MOVIE_URL != ""'>
					, MP4_URL = #{MOVIE_URL}
				</if>
				 <if test='MOVIE_URL == null or MOVIE_URL == ""'>
				 	, MP4_URL = #{MP4_URL}
				 </if>
			</if>
	    	<if test='MP4_URL != null and MP4_URL != ""'>
	  			, MP4_URL = #{MP4_URL}
	  		</if>
			<if test='MOVIE_FILENAME2 == null or MOVIE_FILENAME2 == ""'>
				<if test='MOVIE_FILENAME1 != null and MOVIE_FILENAME1 != ""'>
					, MOVIE_FILENAME2 = REPLACE(#{MOVIE_FILENAME1}, 'wmv', 'mp4')
				</if>
				 <if test='MOVIE_FILENAME1 == null or MOVIE_FILENAME1 == ""'>
				 	, MOVIE_FILENAME2 = #{MOVIE_FILENAME2}
				 </if>
			</if>
		    <if test='MOVIE_FILENAME2 != null and MOVIE_FILENAME2 != ""'>
		  		, MOVIE_FILENAME2 = #{MOVIE_FILENAME2}
		  	</if>
			<if test='MOVIE_FILENAME3 == null or MOVIE_FILENAME3 == ""'>
				<if test='MOVIE_FILENAME1 != null and MOVIE_FILENAME1 != ""'>
					, MOVIE_FILENAME3 = REPLACE(#{MOVIE_FILENAME1}, 'wmv', 'mp4')
				</if>
				 <if test='MOVIE_FILENAME1 == null or MOVIE_FILENAME1 == ""'>
				 	, MOVIE_FILENAME3 = #{MOVIE_FILENAME2}
				 </if>
			</if>
		  	<if test='MOVIE_FILENAME3 != null and MOVIE_FILENAME3 != ""'>
		  		, MOVIE_FILENAME3 = #{MOVIE_FILENAME3}
		  	</if>
			<if test='PMP_URL == null or PMP_URL == ""'>
				<if test='MOVIE_URL != null and MOVIE_URL != ""'>
					, PMP_URL = #{MOVIE_URL}
				</if>
				 <if test='MOVIE_URL == null or MOVIE_URL == ""'>
				 	, PMP_URL = #{PMP_URL}
				 </if>
			</if>
		    <if test='PMP_URL != null and PMP_URL != ""'>
		  		, PMP_URL = #{PMP_URL}
		  	</if>
			<if test='PMP_FILENAME == null or PMP_FILENAME == ""'>
				<if test='MOVIE_FILENAME1 != null and MOVIE_FILENAME1 != ""'>
					<if test='MOVIE_FILENAME1_FLAG == "mp4" '>
						, PMP_FILENAME = REPLACE(#{MOVIE_FILENAME1}, 'mp4', 'avi.willbes')
					</if>
					<if test='MOVIE_FILENAME1_FLAG != "mp4" '>
						, PMP_FILENAME = REPLACE(#{MOVIE_FILENAME1}, 'wmv', 'avi.willbes')
					</if>

				</if>
				 <if test='MOVIE_FILENAME1 == null or MOVIE_FILENAME1 == ""'>
				 	, PMP_FILENAME = #{PMP_FILENAME}
				 </if>
			</if>
		    <if test='PMP_FILENAME != null and PMP_FILENAME != ""'>
		  		, PMP_FILENAME = #{PMP_FILENAME}
		  	</if>
			, MOVIE_TIME = #{MOVIE_TIME}
			, MOVIE_FREE_FLAG = #{MOVIE_FREE_FLAG}
			, STOP = #{STOP}
			, MOVIE_DATA_FILE_YN = #{MOVIE_DATA_FILE_YN}
			, MOVIE_DATA_FILENAME = #{MOVIE_DATA_FILENAME}
		WHERE MOVIE_NO = #{MOVIE_NO}
	</update>


	<update id="openlectureMovieFileDelete" parameterType="hashMap">
		UPDATE TB_MOVIE SET
			MOVIE_DATA_FILE_YN = 'N'
			, MOVIE_DATA_FILENAME = ''
		WHERE MOVIE_NO = #{FILE_DEL_NO}
	</update>


	<insert id="openlectureMovieMemoInsert" parameterType="hashMap" flushCache="true">
		INSERT INTO TB_OPENLEC_MST_MEMO(BRIDGE_LECCODE, MOVIE_ORDER1, MOVIE_ORDER2, POSITION, MST_TEXT)
		VALUES(#{BRIDGE_LECCODE}, #{MOVIE_ORDER1}, #{MOVIE_ORDER2}, #{POSITION}, #{MST_TEXT})
	</insert>

	<update id="openlectureMovieMemoUpdate" parameterType="hashMap">
		UPDATE TB_OPENLEC_MST_MEMO SET
			MST_TEXT = #{MST_TEXT}
		WHERE BRIDGE_LECCODE = #{BRIDGE_LECCODE} AND MOVIE_ORDER1 = #{MOVIE_ORDERS1} AND MOVIE_ORDER2 = #{MOVIE_ORDERS2}
	</update>

	<delete id="openlectureMovieMemoDelete" parameterType="hashMap" flushCache="true">
		DELETE FROM TB_OPENLEC_MST_MEMO WHERE BRIDGE_LECCODE = #{BRIDGE_LECCODE} AND MOVIE_ORDER1 = #{MOVIE_ORDER1} AND MOVIE_ORDER2 = #{MOVIE_ORDER2} AND POSITION = #{POSITION}
	</delete>


	<select id="playinfo" parameterType="hashMap" resultType="hashMap">
		select subject_option,
		a.leccode as rleccode, a.movie_no,a.movie_name,a.movie_desc,nvl(a.movie_url,'')as movie_url,nvl(a.movie_filename1, '') as movie_filename1,nvl(a.mp4_url,'')as mp4_url,nvl(a.movie_filename2, '') as movie_filename2,nvl(a.movie_filename3, '') as movie_filename3,a.movie_data_file_yn,a.movie_data_filename,a.movie_time,a.movie_order1,a.movie_order2,
		a.movie_free_flag,nvl(a.pmp_url, '') as pmp_url,nvl(a.pmp_filename, '') as pmp_filename, nvl(b.subject_vod_default_path, '') as subject_vod_default_path, nvl(b.subject_wide_default_path, '') as subject_wide_default_path,nvl(b.subject_pmp_default_path, '') as subject_pmp_default_path, b.subject_price, nvl(a.stop,'N') as stop
		from
		TB_MOVIE a ,
		(select cc.bridge_leccode,bb.subject_option,bb.subject_vod_default_path,bb.subject_wide_default_path,bb.subject_pmp_default_path,bb.subject_price from TB_OPENLEC_MST bb
		left outer join TB_LEC_BRIDGE cc on bb.leccode = cc.leccode and bb.leccode = #{LECCODE} and cc.BRIDGE_LECCODE = #{BRIDGE_LECCODE}) b
		where
		0=0
		and a.leccode = b.bridge_leccode
		and a.leccode = #{BRIDGE_LECCODE}
		and a.stop <![CDATA[ <> ]]> 'Y'
		and a.movie_no = #{MOVIE_NO}
		order by a.movie_order1 , a.movie_order2 asc
	</select>

	<select id="getCbMovie4_free_admin" parameterType="hashMap" resultType="hashMap">
		SELECT * FROM 	(
			SELECT A.*, ROWNUM rnum
		  	FROM (
				select  b.subject_option,
				a.leccode as rleccode, a.movie_no,a.movie_name,a.movie_desc,nvl(a.movie_url, '')as movie_url,nvl(a.movie_filename1, '') as movie_filename1,nvl(a.mp4_url, '') as mp4_url,nvl(a.movie_filename2, '') as movie_filename2,nvl(a.movie_filename3, '') as movie_filename3, a.movie_data_file_yn,a.movie_data_filename,a.movie_time,a.movie_order1,a.movie_order2,
				a.movie_free_flag,nvl(a.pmp_url, '') as pmp_url,nvl(a.pmp_filename, '') as pmp_filename, nvl(b.subject_vod_default_path, '') as subject_vod_default_path, nvl(b.subject_wide_default_path, '') as subject_wide_default_path,nvl(b.subject_pmp_default_path, '') as subject_pmp_default_path, b.subject_price
				from
				TB_MOVIE a ,
				(select cc.bridge_leccode,bb.subject_option,bb.subject_vod_default_path,bb.subject_wide_default_path,bb.subject_pmp_default_path,bb.subject_price from TB_OPENLEC_MST bb
				left outer join TB_LEC_BRIDGE cc on bb.leccode = cc.leccode and bb.leccode = #{LECCODE} and cc.BRIDGE_LECCODE = #{BRIDGE_LECCODE}) b
				where 0=0
				and a.leccode = b.bridge_leccode
				and a.leccode = #{BRIDGE_LECCODE}
				and a.stop <![CDATA[ <> ]]> 'Y'
				order by a.movie_order1 , a.movie_order2 asc
				) A
               	WHERE rownum &lt;= #{endNo}
			)
		WHERE rnum &gt; #{startNo}
	</select>

	<select id="getCbMovie4_free_admin_count" parameterType="hashMap" resultType="int">
		select  count(b.subject_option)
		from
		TB_MOVIE a ,
		(select cc.bridge_leccode,bb.subject_option,bb.subject_vod_default_path,bb.subject_wide_default_path,bb.subject_pmp_default_path,bb.subject_price from TB_OPENLEC_MST bb
		left outer join TB_LEC_BRIDGE cc on bb.leccode = cc.leccode and bb.leccode = #{LECCODE} and cc.BRIDGE_LECCODE = #{BRIDGE_LECCODE}) b
		where 0=0
		and a.leccode = b.bridge_leccode
		and a.leccode = #{BRIDGE_LECCODE}
		and a.stop <![CDATA[ <> ]]> 'Y'
		order by a.movie_order1 , a.movie_order2 asc
	</select>

	<select id="BridgeLeccode" parameterType="hashMap" resultType="hashMap">
		SELECT LECCODE FROM TB_LEC_BRIDGE
		WHERE BRIDGE_LECCODE = #{RCODE}
	</select>

	<update id="Modify_Lecture_On_Off" parameterType="hashMap">
		UPDATE TB_OPENLEC_MST SET SUBJECT_ISUSE = #{FLAG}
		WHERE LECCODE = #{GET_CODE}
	</update>

	<select id="openlectureWMV" parameterType="hashMap" resultType="hashMap">
		SELECT WMV_PMP FROM TB_ORDER_MGNT_NO
		WHERE ORDERNO = #{ORDERNO}
	</select>

	<select id="openlectureDown_Count" parameterType="hashMap" resultType="hashMap">
		SELECT DISTINCT A.CONTENTID FROM TB_PMP_DOWNLOG A, TB_MOVIE B
		WHERE A.CONTENTID = B.MOVIE_NO
		AND A.USERID = #{ORDERID}
		AND B.LECCODE = #{BRIDGE_LECCODE}
		AND A.DOWNLOGINFO LIKE '%'||#{ORDERNO}||'-'||#{LECCODE}||'%'
	</select>

</mapper>