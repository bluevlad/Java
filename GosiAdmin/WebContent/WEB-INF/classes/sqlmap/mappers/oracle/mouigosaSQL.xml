<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mouigosa">

<delete id="deleteQuestionMouigosa" parameterType="Map">
    DELETE FROM TB_TITEMPOOL
    WHERE ITEMID = #{ITEMID}
    AND QUESTIONNUMBER = (SELECT NVL(MAX(QUESTIONNUMBER), 0)
                            FROM  TB_TITEMPOOL
                            WHERE ITEMID = #{ITEMID})
</delete>

<select id="getQuestionNumMax" parameterType="hashMap" resultType="int">
    SELECT QUESTIONNUM
    FROM TB_TITEM
    WHERE ITEMID = #{ITEMID}
</select>

<select id="getItemIdMax" parameterType="hashMap" resultType="int">
    SELECT MAX(ITEMID)
    FROM TB_TITEM
</select>

<!-- 첨부파일 max값-->
<select id="getFileCount" parameterType="hashMap" resultType="int">
    SELECT MAX(ATTACHFILEID)
    FROM TB_TATTACHFILE
</select>

<!-- 과목별 문제등록 리스트-->
<select id="getMouigosaList"  parameterType="hashMap" resultType="hashMap">
    SELECT * FROM (
        SELECT ROWNUM AS RNUM, A.* FROM (
            SELECT ITEMID
                , EXAMYEAR
                , EXAMROUND
                , SUBJECT_CD
                , (SELECT SUBJECT_NM FROM TB_SUBJECT_INFO WHERE SUBJECT_CD = A.SUBJECT_CD) SUBJECT_NM
                , PROFCODE
                , (SELECT USER_NM FROM TB_MA_MEMBER WHERE USER_ID = A.PROFCODE) PROF_NM
                , ENTRYNUM
                , TO_CHAR(REG_DT, 'YYYY-MM-DD') REG_DT
                , DECODE(OPENSTATE, '0', '비활성', '1', '활성') OPENSTATE
                , QUESTIONREGISTRATIONOPTION
                , CODE_NM
                , (SELECT COUNT(*)
                    FROM TB_TORDERS B, TB_TUSERCHOICESUBJECT C, TB_TAPPROVALS D
                    WHERE B.IDENTYID = C.IDENTYID
                      AND B.IDENTYID = D.IDENTYID
                      AND B.EXAMTYPE = 0
                      AND B.PAYMENTSTATE = 1
                      AND D.PAYMENTAMOUNT <![CDATA[ > ]]> 0
                      AND C.ITEMID = A.ITEMID) ON_CNT
                , (SELECT COUNT(*)
                    FROM TB_TORDERS B, TB_TUSERCHOICESUBJECT C, TB_TAPPROVALS D
                    WHERE B.IDENTYID = C.IDENTYID
                      AND B.IDENTYID = D.IDENTYID
                      AND B.EXAMTYPE = 1
                      AND B.PAYMENTSTATE = 1
                      AND D.PAYMENTAMOUNT <![CDATA[ > ]]> 0
                      AND C.ITEMID = A.ITEMID) OFF_CNT
            FROM TB_TITEM A
            WHERE 1=1
            <if test="S_EXAMYEAR !=null and S_EXAMYEAR != '' ">
                AND EXAMYEAR  =   #{S_EXAMYEAR}
            </if>
            <if test="S_EXAMROUND !=null and S_EXAMROUND != '' ">
                AND EXAMROUND  =   #{S_EXAMROUND}
            </if>
            <if test="S_searchKeyWord != null">
                <choose>
                    <when test="S_searchFlag == 1">
                    AND SUBJECT_CD IN (SELECT SUBJECT_CD
                                        FROM TB_SUBJECT_INFO
                                        WHERE SUBJECT_NM LIKE '%'||#{S_searchKeyWord}||'%')
                    </when>
                    <when test="S_searchFlag == 2">
                    AND PROFCODE IN (SELECT USER_ID
                                    FROM TB_MA_MEMBER
                                    WHERE USER_NM LIKE '%'||#{S_searchKeyWord}||'%')
                    </when>
                </choose>
            </if>
            ORDER BY  ITEMID DESC

        ) A WHERE ROWNUM <![CDATA[ <= ]]> #{endNo}
    ) WHERE RNUM <![CDATA[ > ]]> #{startNo}
</select>

<!-- 과목별 문제등록 리스트 카운트-->
<select id="getCount" parameterType="hashMap" resultType="int">
    SELECT COUNT(*)
    FROM TB_TITEM
    WHERE 1=1
    <if test="S_EXAMYEAR !=null and S_EXAMYEAR != '' ">
        AND EXAMYEAR  =   #{S_EXAMYEAR}
    </if>
    <if test="S_EXAMROUND !=null and S_EXAMROUND != '' ">
        AND EXAMROUND  =   #{S_EXAMROUND}
    </if>
    <if test="S_searchKeyWord != null">
        <choose>
            <when test="S_searchFlag == 1">
            AND SUBJECT_CD IN (SELECT SUBJECT_CD
                                FROM TB_SUBJECT_INFO
                                WHERE SUBJECT_NM LIKE '%'||#{S_searchKeyWord}||'%')
            </when>
            <when test="S_searchFlag == 2">
            AND PROFCODE IN (SELECT USER_ID
                            FROM TB_MA_MEMBER
                            WHERE USER_NM LIKE '%'||#{S_searchKeyWord}||'%')
            </when>
        </choose>
    </if>
</select>

<!-- 모의고사 과목 등록 팝업화면 과목 조회-->
<select id="getSubjectList" parameterType="hashMap" resultType="hashMap">
    SELECT SUBJECT_CD , SUBJECT_NM
    FROM TB_SUBJECT_INFO
    WHERE ISUSE = 'Y'
    ORDER BY SUBJECT_CD
</select>

<!-- 교수 셀렉트박스 비동기-->
<select id="getSubCode" parameterType="hashMap" resultType="hashMap">
    SELECT B.USER_ID , B.USER_NM
    FROM TB_MA_MEMBER_SUBJECT A, TB_MA_MEMBER B
    WHERE A.USER_ID = B.USER_ID
    AND B.USER_ROLE  = 'PRF'
    AND B.OFF_OPENYN = 'Y'
    <if test="SUBJECT_CD != null">
        AND A.SUBJECT_CD = #{SUBJECT_CD}
    </if>
    ORDER BY B.USER_NM
</select>

<!-- 직급 직렬별 강의정보 -->
<select id="getClass" parameterType="hashMap" resultType="hashMap">
	SELECT CODE, NAME, ORDR, P_CODE, B.CLASSCODE, B.CLASSSERIESCODE, LEVEL LVL
	FROM TB_CATEGORY_INFO A, 
	     (SELECT CLASSCODE, CLASSSERIESCODE
	      FROM TB_TCCSRSSUBJECTINFO
	      GROUP BY CLASSCODE, CLASSSERIESCODE) B
	WHERE A.CODE = B.CLASSSERIESCODE(+)
	START WITH A.CODE = 'CLASSCODE'
	CONNECT BY PRIOR CODE = P_CODE
</select>

<!-- 직급 직렬별 강의정보 -->
<select id="getClassSubject" parameterType="hashMap" resultType="hashMap">
    SELECT BB.ID, AA.CATEGORY_CODE, AA.SUBJECT_CD, AA.SUBJECT_NM,
           BB.CLASSCODE, BB.CLASSSERIESCODE, BB.SUBJECTTYPEDIVISION, BB.SUBJECTORDER
    FROM (SELECT B.CATEGORY_CODE, A.SUBJECT_CD, A.SUBJECT_NM
          FROM TB_SUBJECT_INFO A, TB_SUBJECT_CATEGORY B
          WHERE A.SUBJECT_CD = B.SUBJECT_CD) AA, TB_TCCSRSSUBJECTINFO BB
    WHERE AA.CATEGORY_CODE = BB.CLASSCODE(+)
    AND AA.SUBJECT_CD = BB.SUBJECT_CD(+)
    <if test="CLASSSERIESCODE != null and CLASSSERIESCODE != ''">
    AND BB.CLASSSERIESCODE = #{CLASSSERIESCODE}
    </if>
	ORDER BY BB.CLASSSERIESCODE, BB.SUBJECTTYPEDIVISION, BB.SUBJECTORDER, AA.SUBJECT_CD
</select>

<!-- 직렬별 과목 등록-->
<insert id="insertTccsrsSubject" parameterType="hashMap">
    INSERT INTO TB_TCCSRSSUBJECTINFO (
		ID, CLASSCODE, CLASSSERIESCODE,
		SUBJECT_CD, SUBJECTTYPEDIVISION, SUBJECTORDER,
		REG_ID, REG_DT, UPD_ID, UPD_DT
 	 ) VALUES (
        (SELECT NVL(MAX(ID), 0) + 1 FROM TB_TCCSRSSUBJECTINFO), #{CLASSCODE}, #{CLASSSERIESCODE}
        , #{SUBJECT_CD}, #{SUBJECTTYPEDIVISION}, #{SUBJECTORDER}
        , #{USER_ID}, SYSDATE, #{USER_ID}, SYSDATE
    )
</insert>

<insert id="updateTccsrsSubject" parameterType="hashMap">
    UPDATE TB_TCCSRSSUBJECTINFO 
    SET SUBJECTTYPEDIVISION = #{SUBJECTTYPEDIVISION}
    , SUBJECTORDER = #{SUBJECTORDER}
	, UPD_ID = #{USER_ID}
	, UPD_DT = SYSDATE
	WHERE ID = #{ID}
</insert>

<insert id="deleteTccsrsSubject" parameterType="hashMap">
    DELETE FROM TB_TCCSRSSUBJECTINFO 
	WHERE ID = #{ID}
</insert>

<!-- 과목 등록-->
<insert id="insertMouigosa" parameterType="hashMap">
    INSERT INTO TB_TITEM (
        ITEMID
        , EXAMYEAR
        , EXAMROUND
        , SUBJECT_CD
        , PROFCODE
        , ENTRYNUM
        , QUESTIONNUM
        , QUESTIONREGISTRATIONOPTION
        , OPENSTATE
        , FEE_PROF
        <if test="QUESTIONFID != null">, QUESTIONFID</if>
        <if test="ANSWERFID != null">, ANSWERFID</if>
        <if test="CODE_NM != null">, CODE_NM</if>
        , REG_ID
        , REG_DT
    ) VALUES (
        (SELECT NVL(MAX(ITEMID), 0) + 1 FROM  TB_TITEM)
        , #{EXAMYEAR}
        , #{EXAMROUND}
        , #{SUBJECT_CD}
        , #{PROFCODE}
        , #{ENTRYNUM}
        , #{QUESTIONNUM}
        , #{QUESTIONREGISTRATIONOPTION}
        , #{OPENSTATE}
        , #{FEE_PROF}
        <if test="QUESTIONFID != null">, #{QUESTIONFID}</if>
        <if test="ANSWERFID != null">, #{ANSWERFID}</if>
        <if test="CODE_NM != null">, #{CODE_NM}</if>
        , #{USER_ID}
        , SYSDATE
    )
</insert>

<!-- 과목 등록-->
<insert id="insertMouigosaWthRetVal" parameterType="hashMap" flushCache="true" keyProperty="ITEMID" keyColumn="ITEMID">
    INSERT INTO TB_TITEM (
        ITEMID
        , EXAMYEAR
        , EXAMROUND
        , SUBJECT_CD
        , PROFCODE
        , ENTRYNUM
        , QUESTIONNUM
        , QUESTIONREGISTRATIONOPTION
        , OPENSTATE
        , FEE_PROF
        <if test="QUESTIONFID != null">, QUESTIONFID</if>
        <if test="ANSWERFID != null">, ANSWERFID</if>
        <if test="CODE_NM != null">, CODE_NM</if>
        , REG_ID
        , REG_DT
    ) VALUES (
        (SELECT NVL(MAX(ITEMID), 0) + 1 FROM  TB_TITEM)
        , #{EXAMYEAR}
        , #{EXAMROUND}
        , #{SUBJECT_CD}
        , #{PROFCODE}
        , #{ENTRYNUM}
        , #{QUESTIONNUM}
        , #{QUESTIONREGISTRATIONOPTION}
        , #{OPENSTATE}
        , #{FEE_PROF}
        <if test="QUESTIONFID != null">, #{QUESTIONFID}</if>
        <if test="ANSWERFID != null">, #{ANSWERFID}</if>
        <if test="CODE_NM != null">, #{CODE_NM}</if>
        , #{USER_ID}
        , SYSDATE
    )
    <selectKey keyProperty="ITEMID" resultType="int" order="AFTER">SELECT (NVL(MAX(TO_NUMBER(ITEMID)) , 0)) FROM TB_TITEM</selectKey>
</insert>

<!-- 모의고사 과목 수정 팝업화면 불러오기 상세-->
<select id="getUpdateDetail" parameterType="hashMap" resultType="hashMap">
    SELECT ITEMID
        , EXAMYEAR
        , EXAMROUND
        , SUBJECT_CD
        , (SELECT SUBJECT_NM FROM TB_SUBJECT_INFO WHERE SUBJECT_CD = A.SUBJECT_CD) SUBJECT_NM
        , PROFCODE
        , (SELECT USER_NM FROM TB_MA_MEMBER WHERE USER_ID = A.PROFCODE) PROF_NM
        , ENTRYNUM
        , QUESTIONNUM
        , QUESTIONREGISTRATIONOPTION
        , OPENSTATE
        , FEE_PROF
        , CODE_NM
        , QUESTIONFID
        , (SELECT FILEPATH FROM TB_TATTACHFILE WHERE ATTACHFILEID = A.QUESTIONFID) FILEPATH
        , ANSWERFID
        , (SELECT FILEPATH FROM TB_TATTACHFILE WHERE ATTACHFILEID = A.ANSWERFID) FILEPATH2
        , (SELECT FILENAME FROM TB_TATTACHFILE WHERE ATTACHFILEID = A.QUESTIONFID) as QUESTIONFILENAME
        , (SELECT FILENAME FROM TB_TATTACHFILE WHERE ATTACHFILEID = A.ANSWERFID) as ANSWEREXPLAINFILENAME
        , (SELECT COUNT(*) FROM TB_TITEMPOOL WHERE ITEMID = A.ITEMID) STSCNT
        , (SELECT COUNT(*) + 1 FROM TB_TITEMPOOL WHERE ITEMID = A.ITEMID) QUESTIONNUMBER
    FROM TB_TITEM A
    WHERE ITEMID = #{ITEMID}
</select>

<!-- 년,회차,과목 중복여부-->
<select id="getDuplication" parameterType="hashMap" resultType="hashMap">
    SELECT COUNT(*) STSCNT2
    FROM TB_TITEM
    WHERE 1 = 1
    <if test="EXAMYEAR != null">
        AND EXAMYEAR = #{EXAMYEAR}
    </if>
    <if test="EXAMROUND != null">
        AND EXAMROUND = #{EXAMROUND}
    </if>
    <if test="SUBJECT_CD != null">
        AND SUBJECT_CD = #{SUBJECT_CD}
    </if>
</select>

<!-- 과목  수정-->
<update id="updateMouigosa" parameterType="hashMap">
    UPDATE TB_TITEM
    SET
        UPD_ID = #{USER_ID}
        , UPD_DT = SYSDATE
        <if test="EXAMYEAR != null">, EXAMYEAR = #{EXAMYEAR}</if>
        <if test="EXAMROUND != null">, EXAMROUND = #{EXAMROUND}</if>
        <if test="SUBJECT_CD != null">, SUBJECT_CD = #{SUBJECT_CD}</if>
        <if test="PROFCODE != null">, PROFCODE = #{PROFCODE}</if>
        <if test="ENTRYNUM != null">, ENTRYNUM = #{ENTRYNUM}</if>
        <if test="QUESTIONNUM != null">, QUESTIONNUM = #{QUESTIONNUM}</if>
        <if test="QUESTIONREGISTRATIONOPTION != null">, QUESTIONREGISTRATIONOPTION = #{QUESTIONREGISTRATIONOPTION}</if>
        <if test="OPENSTATE != null">, OPENSTATE = #{OPENSTATE}</if>
        <if test="FEE_PROF != null">, FEE_PROF = #{FEE_PROF}</if>
        <if test="CODE_NM != null">, CODE_NM = #{CODE_NM}</if>
        <if test="QUESTIONFID != null">, QUESTIONFID = #{QUESTIONFID}</if>
        <if test="ANSWERFID != null">, ANSWERFID = #{ANSWERFID}</if>
    WHERE ITEMID = #{ITEMID}
</update>

<!-- 과목  삭제-->
<delete id="deleteMouigosaTitem" parameterType="Map">
    DELETE FROM TB_TITEM
    WHERE ITEMID = #{ITEMID}
</delete>

<!-- 과목  삭제-->
<delete id="deleteMouigosaTitemPool" parameterType="Map">
    DELETE FROM TB_TITEMPOOL
    WHERE ITEMID = #{ITEMID}
</delete>

<!-- 문제 리스트-->
<select id="getQuestionList" parameterType="hashMap" resultType="hashMap">
    SELECT A.QUESTIONNUMBER
        , LPAD(A.QUESTIONNUMBER,2,0) NEW_QUESTIONNUMBER
        , A.ITEMID
        , A.QUESTION
        , A.QUESTIONFILEID
        , (SELECT FILEPATH FROM TB_TATTACHFILE WHERE ATTACHFILEID = A.QUESTIONFILEID) FILEPATH
        , A.ANSWEREXPLAIN
        , A.ANSWEREXPLAINFILEID
        , (SELECT FILEPATH FROM TB_TATTACHFILE WHERE ATTACHFILEID = A.ANSWEREXPLAINFILEID) FILEPATH2
    FROM TB_TITEMPOOL A
    WHERE A.ITEMID = #{ITEMID}
    <if test="QUESTIONREGISTRATIONOPTION == 1 ">
    AND A.QUESTIONFILEID IS NOT NULL
    AND A.ANSWEREXPLAINFILEID IS NOT NULL
    </if>
    <if test="QUESTIONREGISTRATIONOPTION == 2 ">
    AND A.QUESTIONFILEID IS NOT NULL
    AND A.ANSWEREXPLAINFILEID IS NOT NULL
    </if>
    <if test="QUESTIONREGISTRATIONOPTION == 3 ">
    AND A.QUESTION IS NOT NULL
    AND A.ANSWEREXPLAIN IS NOT NULL
    </if>
    <if test="QUESTIONREGISTRATIONOPTION == 4 ">
    AND A.QUESTION IS NOT NULL
    AND A.ANSWEREXPLAIN IS NOT NULL
    </if>
    <if test="QUESTIONNUMBER !=null and QUESTIONNUMBER != '' ">
    AND QUESTIONNUMBER = #{QUESTIONNUMBER}
    </if>
    ORDER BY  A.QUESTIONNUMBER
</select>

<!-- 모의고사 문제 리스트-->
<select id="getMouigosaQuestionList" parameterType="hashMap" resultType="hashMap">
    SELECT QUESTIONNUMBER
        , ITEMID
        , QUESTION
        , ANSWEREXPLAIN
        , QUESTIONPATTERN
        , ANSWERNUMBER
        , QUESTIONRANGE
        , (SELECT SUBJECTAREA FROM TB_TSUBJECTAREA WHERE ID = A.QUESTIONRANGE) QUESTIONRANGENAME
        , LEVELDIFFICULTY
        , DECODE(LEVELDIFFICULTY, '1', '상', '2', '중', '3', '하', '') LEVELDIFFICULTYNAME
    FROM TB_TITEMPOOL A
    WHERE ITEMID = #{ITEMID}
    AND USEFLAG = 0
    ORDER BY  QUESTIONNUMBER ASC
</select>

<!-- 모의고사 문제 리스트 카운트-->
<select id="getMouigosaQuestionCount" parameterType="hashMap" resultType="int">
    SELECT COUNT(*)
    FROM TB_TITEMPOOL
    WHERE ITEMID = #{ITEMID}
    AND USEFLAG = 0
</select>

<!-- 모의고사 문제 등록 팝업화면 과목영역 조회-->
<select id="getSubjectAreaList" parameterType="hashMap" resultType="hashMap">
    SELECT ID, AREAORDER, USEFLAG, SUBJECTAREA QUESTIONRANGENAME
    FROM TB_TSUBJECTAREA
    WHERE SUBJECT_CD = #{SUBJECT_CD}
    <if test="USEFLAG ==null or USEFLAG == ''">
    AND USEFLAG = 0
    </if>
    ORDER BY AREAORDER
</select>

<!-- 문제 등록 전체 과목영역 조회-->
<select id="getAreaSubjectListAll" parameterType="hashMap" resultType="hashMap">
    SELECT A.SUBJECT_CD, A.SUBJECT_NM, NVL(B.CNT,0) CNT
    FROM TB_SUBJECT_INFO A, (SELECT SUBJECT_CD, COUNT(AREAORDER) CNT
             FROM TB_TSUBJECTAREA
             GROUP BY SUBJECT_CD) B 
    WHERE A.SUBJECT_CD = B.SUBJECT_CD(+)
    AND A.ISUSE = 'Y'
    ORDER BY A.SUBJECT_NM
</select>

<insert id="insertAreaSubject" parameterType="hashMap" flushCache="true">
    INSERT INTO TB_TSUBJECTAREA (
  		ID, SUBJECT_CD, SUBJECTAREA, AREAORDER, USEFLAG,
  		REG_ID, REG_DT, UPD_ID, UPD_DT
    ) VALUES (
  		(SELECT MAX(ID)+1 FROM TB_TSUBJECTAREA), #{SUBJECT_CD}, #{SUBJECTAREA}, #{AREAORDER}, '0',
  		#{USER_ID}, SYSDATE, #{USER_ID}, SYSDATE
    )
</insert>

<update id="updateAreaSubject" parameterType="hashMap">
    UPDATE TB_TSUBJECTAREA
    SET SUBJECTAREA = #{SUBJECTAREA}
    , AREAORDER = #{AREAORDER}
    , USEFLAG = #{USEFLAG}
    , UPD_ID = #{USER_ID}
    , UPD_DT = SYSDATE
    WHERE ID = #{ID}
</update>

<!-- 모의고사 문제 수정 팝업화면 불러오기 상세-->
<select id="getUpdateQuestionDetail" parameterType="hashMap" resultType="hashMap">
    SELECT QUESTIONNUMBER
        , ITEMID
        , QUESTION
        , QUESTIONFILEID
        , ANSWEREXPLAIN
        , ANSWEREXPLAINFILEID
        , QUESTIONPATTERN
        , ANSWERNUMBER
        , QUESTIONRANGE
        , LEVELDIFFICULTY
        , SMAQUESTION
        , SMAQUESTIONFILEID
        , (SELECT ENTRYNUM FROM TB_TITEM WHERE ITEMID = A.ITEMID) ENTRYNUM
        , (SELECT QUESTIONREGISTRATIONOPTION FROM TB_TITEM WHERE ITEMID = A.ITEMID) QUESTIONREGISTRATIONOPTION
        , (SELECT QUESTIONNUM FROM TB_TITEM WHERE ITEMID = A.ITEMID) QUESTIONNUM
        , (SELECT EXAMYEAR FROM TB_TITEM WHERE ITEMID = A.ITEMID) EXAMYEAR
        , (SELECT EXAMROUND FROM TB_TITEM WHERE ITEMID = A.ITEMID) EXAMROUND
        , (SELECT SUBJECT_NM FROM TB_SUBJECT_INFO WHERE SUBJECT_CD = (SELECT SUBJECT_CD FROM TB_TITEM WHERE ITEMID = A.ITEMID)) SUBJECT_NM
        , (SELECT USER_NM FROM TB_MA_MEMBER WHERE USER_ID = (SELECT PROFCODE FROM TB_TITEM WHERE ITEMID = A.ITEMID)) PROF_NM
        , (SELECT FILENAME FROM TB_TATTACHFILE WHERE ATTACHFILEID = A.QUESTIONFILEID) as QUESTIONFILENAME
        , (SELECT FILENAME FROM TB_TATTACHFILE WHERE ATTACHFILEID = A.ANSWEREXPLAINFILEID) as ANSWEREXPLAINFILENAME
        , (SELECT FILEPATH FROM TB_TATTACHFILE WHERE ATTACHFILEID = A.QUESTIONFILEID) as QUESTIONFILEPATH
        , (SELECT FILEPATH FROM TB_TATTACHFILE WHERE ATTACHFILEID = A.ANSWEREXPLAINFILEID) as ANSWEREXPLAINFILEPATH
        , (SELECT FILEPATH FROM TB_TATTACHFILE WHERE ATTACHFILEID = A.SMAQUESTIONFILEID) AS SMAQUESTIONFILEPATH
    FROM TB_TITEMPOOL A
    WHERE ITEMID = #{ITEMID}
    AND QUESTIONNUMBER = #{QUESTIONNUMBER}
</select>

<!--첨부파일 등록-->
<insert id="insertAttachFile" parameterType="hashMap" flushCache="true" keyProperty="attachFileId" keyColumn="attachFileId">
    INSERT INTO TB_TATTACHFILE (
        ATTACHFILEID, FILENAME, FILEPATH, FILEFULLPATH, FILESIZE, REGDATE
    ) VALUES (
        SEQ_TATTACHFILE_ID.NEXTVAL, #{fileName}, #{filePath}, #{fileFullPath}, #{fileSize}, SYSDATE
    )
    <selectKey keyProperty="attachFileId" resultType="String">SELECT SEQ_TATTACHFILE_ID.CURRVAL FROM DUAL</selectKey>
</insert>

<!-- 문제 등록-->
<insert id="insertQuestionMouigosa" parameterType="hashMap">
    INSERT INTO TB_TITEMPOOL (
        QUESTIONNUMBER
        , ITEMID
        <if test="QUESTIONREGISTRATIONOPTION == 1">
            <if test="QUESTIONFILEID != null">, QUESTIONFILEID</if>
            <if test="ANSWEREXPLAINFILEID != null">, ANSWEREXPLAINFILEID</if>
        </if>
        <if test="QUESTIONREGISTRATIONOPTION == 2">
            <if test="QUESTIONFILEID != null">, QUESTIONFILEID</if>
            <if test="ANSWEREXPLAINFILEID != null">, ANSWEREXPLAINFILEID</if>
        </if>
        <if test="SMAQUESTIONFILEID != null">, SMAQUESTIONFILEID</if>
        <if test="QUESTION != null">, QUESTION</if>
        <if test="ANSWEREXPLAIN != null">, ANSWEREXPLAIN</if>
        <if test="QUESTIONPATTERN != null">, QUESTIONPATTERN</if>
        <if test="ANSWERNUMBER != null">, ANSWERNUMBER</if>
        <if test="QUESTIONRANGE != null">, QUESTIONRANGE</if>
        <if test="LEVELDIFFICULTY != null">, LEVELDIFFICULTY</if>
        , USEFLAG
        , REG_ID
        , REG_DT
    ) VALUES (
        (SELECT NVL(MAX(QUESTIONNUMBER), 0) + 1 FROM  TB_TITEMPOOL WHERE ITEMID = #{ITEMID})
        , #{ITEMID}
        <if test ="QUESTIONREGISTRATIONOPTION == 1">
            <if test="QUESTIONFILEID != null">, #{QUESTIONFILEID}</if>
            <if test="ANSWEREXPLAINFILEID != null">, #{ANSWEREXPLAINFILEID}</if>
        </if>
        <if test ="QUESTIONREGISTRATIONOPTION == 2">
            <if test="QUESTIONFILEID != null">, #{QUESTIONFILEID}</if>
            <if test="ANSWEREXPLAINFILEID != null">, #{ANSWEREXPLAINFILEID}</if>
        </if>
        <if test="SMAQUESTIONFILEID != null">, #{SMAQUESTIONFILEID}</if>
        <if test="QUESTION != null">, #{QUESTION}</if>
        <if test="ANSWEREXPLAIN != null">, #{ANSWEREXPLAIN}</if>
        <if test="QUESTIONPATTERN != null">, #{QUESTIONPATTERN}</if>
        <if test="ANSWERNUMBER != null">, #{ANSWERNUMBER}</if>
        <if test="QUESTIONRANGE != null">, #{QUESTIONRANGE}</if>
        <if test="LEVELDIFFICULTY != null">, #{LEVELDIFFICULTY}</if>
        , 0
        , #{USER_ID}
        , SYSDATE
    )
</insert>

<!-- 문제  수정-->
<update id="updateQuestionMouigosa" parameterType="hashMap">
    UPDATE TB_TITEMPOOL
    SET
        UPD_ID = #{USER_ID}
        , UPD_DT = SYSDATE
      <if test="QUESTIONRANGE != null">
        , QUESTIONRANGE = #{QUESTIONRANGE}
      </if>
      <if test="LEVELDIFFICULTY != null">
        , LEVELDIFFICULTY = #{LEVELDIFFICULTY}
      </if>
      <if test="QUESTIONPATTERN != null">
        , QUESTIONPATTERN = #{QUESTIONPATTERN}
      </if>
      <if test="ANSWERNUMBER != null">
        , ANSWERNUMBER = #{ANSWERNUMBER}
      </if>
      <if test="QUESTION != null">
        , QUESTION = #{QUESTION}
      </if>
      <if test="ANSWEREXPLAIN != null">
        , ANSWEREXPLAIN = #{ANSWEREXPLAIN}
      </if>
      <if test="QUESTIONREGISTRATIONOPTION == 2">
          <if test="QUESTIONFILEID != null">, QUESTIONFILEID = #{QUESTIONFILEID}</if>
          <if test="ANSWEREXPLAINFILEID != null">, ANSWEREXPLAINFILEID = #{ANSWEREXPLAINFILEID}</if>
       </if>
       <if test="QUESTIONREGISTRATIONOPTION == 1">
          <if test="QUESTIONFILEID != null">, QUESTIONFILEID = #{QUESTIONFILEID}</if>
          <if test="ANSWEREXPLAINFILEID != null">, ANSWEREXPLAINFILEID = #{ANSWEREXPLAINFILEID}</if>
       </if>
       <if test="SMAQUESTIONFILEID != null">, SMAQUESTIONFILEID = #{SMAQUESTIONFILEID}</if>
       WHERE QUESTIONNUMBER = #{QUESTIONNUMBER}
    AND ITEMID = #{ITEMID}
</update>

<!-- 문제지정 년-->
<select id="getExamYear" parameterType="hashMap" resultType="hashMap">
    SELECT DISTINCT(EXAMYEAR) EXAMYEAR
    FROM TB_TITEM
    ORDER BY EXAMYEAR
</select>

<!-- 문제지정 회-->
<select id="getExamRound" parameterType="hashMap" resultType="hashMap">
    SELECT DISTINCT(EXAMROUND) EXAMROUND
    FROM TB_TITEM
    ORDER BY EXAMROUND
</select>

<!-- 문제지정 문제번호-->
<select id="getQuestionNumber" parameterType="hashMap" resultType="hashMap">
    SELECT DISTINCT(QUESTIONNUMBER) QUESTIONNUMBER
    FROM TB_TITEMPOOL
    ORDER BY QUESTIONNUMBER
</select>

<!-- 문제지정 팝업 리스트-->
<select id="getQuestionAllList" parameterType="hashMap" resultType="hashMap">
    SELECT ITEMID, QUESTIONNUMBER
    FROM TB_TITEMPOOL
    WHERE ITEMID = #{ITEMID}
    ORDER BY QUESTIONNUMBER
</select>

<!-- 수정 데이터를 위한 문제 리스트-->
<select id="getQuestionAllList2" parameterType="hashMap" resultType="hashMap">
    SELECT QUESTION
         , QUESTIONFILEID
         , ANSWEREXPLAIN
         , ANSWEREXPLAINFILEID
         , QUESTIONPATTERN
         , ANSWERNUMBER
         , QUESTIONRANGE
         , LEVELDIFFICULTY
    FROM TB_TITEMPOOL
  WHERE ITEMID = (SELECT MIN(ITEMID)
                  FROM TB_TITEM
                  WHERE EXAMYEAR = #{EXAMYEAR}
                  AND EXAMROUND = #{EXAMROUND}
                  AND SUBJECT_CD = #{SUBJECT_CD})
   AND QUESTIONNUMBER = #{QUESTIONNUMBER2}
</select>

<!-- 문제지정 팝업  수정-->
<update id="updateQuestionAll" parameterType="hashMap">
    UPDATE TB_TITEMPOOL
    SET
        UPD_DT = SYSDATE
        <if test="USER_ID != null">, UPD_ID = #{USER_ID}</if>
        <if test="QUESTION != null">, QUESTION = #{QUESTION}</if>
        <if test="QUESTIONFILEID != null">, QUESTIONFILEID = #{QUESTIONFILEID}</if>
        <if test="ANSWEREXPLAIN != null">, ANSWEREXPLAIN = #{ANSWEREXPLAIN}</if>
        <if test="ANSWEREXPLAINFILEID != null">, ANSWEREXPLAINFILEID = #{ANSWEREXPLAINFILEID}</if>
        <if test="QUESTIONPATTERN != null">, QUESTIONPATTERN = #{QUESTIONPATTERN}</if>
        <if test="ANSWERNUMBER != null">, ANSWERNUMBER = #{ANSWERNUMBER}</if>
        <if test="QUESTIONRANGE != null">, QUESTIONRANGE = #{QUESTIONRANGE}</if>
        <if test="LEVELDIFFICULTY != null">, LEVELDIFFICULTY = #{LEVELDIFFICULTY}</if>
    WHERE ITEMID = #{ITEMID}
    AND QUESTIONNUMBER = #{QUESTIONNUMBER}
</update>

<!-- 블러오기 팝업 리스트-->
<select id="getMouigosaPopList"  parameterType="hashMap" resultType="hashMap">
    SELECT * FROM (
        SELECT ROWNUM AS RNUM, A.* FROM (
            SELECT A.QUESTIONNUMBER
                , A.ITEMID
                , A.QUESTION
                , A.QUESTIONFILEID
                , (SELECT FILEPATH FROM TB_TATTACHFILE WHERE ATTACHFILEID = A.QUESTIONFILEID) FILEPATH
                , A.ANSWEREXPLAIN
                , A.ANSWEREXPLAINFILEID
                , (SELECT FILEPATH FROM TB_TATTACHFILE WHERE ATTACHFILEID = A.ANSWEREXPLAINFILEID) FILEPATH2
                , A.QUESTIONPATTERN
                , A.ANSWERNUMBER
                , A.QUESTIONRANGE
                , (SELECT SUBJECTAREA
                    FROM TB_TSUBJECTAREA
                    WHERE SUBJECT_CD = B.SUBJECT_CD
                    AND ID = A.QUESTIONRANGE
                    AND USEFLAG = 0) QUESTIONRANGENAME
                , A.LEVELDIFFICULTY
                , DECODE(A.LEVELDIFFICULTY, '1', '상', '2', '중', '3', '하', '') LEVELDIFFICULTYNAME
                , A.USEFLAG
                , DECODE(A.USEFLAG, '0', '사용', '미사용') USEFLAGNAME
            FROM TB_TITEMPOOL A, TB_TITEM B
            WHERE A.ITEMID = B.ITEMID
            AND B.SUBJECT_CD  =   #{SUBJECT_CD}
            AND A.ANSWERNUMBER  IS NOT NULL
        <if test="S_EXAMYEAR2 !=null and S_EXAMYEAR2 != '' ">
            AND B.EXAMYEAR  =   #{S_EXAMYEAR2}
        </if>
        <if test="S_EXAMROUND2 !=null and S_EXAMROUND2 != '' ">
            AND B.EXAMROUND  =   #{S_EXAMROUND2}
        </if>
        <if test="S_QUESTIONRANGE2 !=null and S_QUESTIONRANGE2 != '' ">
            AND A.QUESTIONRANGE  =   #{S_QUESTIONRANGE2}
        </if>

            ORDER BY  B.ITEMID, A.QUESTIONNUMBER

        ) A WHERE ROWNUM <![CDATA[ <= ]]> #{endNo}
    ) WHERE RNUM <![CDATA[ > ]]> #{startNo}
</select>

<!-- 블러오기 팝업 리스트 카운트-->
<select id="getPopCount" parameterType="hashMap" resultType="int">
    SELECT COUNT(*)
    FROM TB_TITEMPOOL A, TB_TITEM B
    WHERE A.ITEMID = B.ITEMID
    AND B.SUBJECT_CD  =   #{SUBJECT_CD}
  <if test="S_EXAMYEAR2 !=null and S_EXAMYEAR2 != '' ">
    AND B.EXAMYEAR  =   #{S_EXAMYEAR2}
  </if>
  <if test="S_EXAMROUND2 !=null and S_EXAMROUND2 != '' ">
    AND B.EXAMROUND  =   #{S_EXAMROUND2}
  </if>
  <if test="S_QUESTIONRANGE2 !=null and S_QUESTIONRANGE2 != '' ">
    AND A.QUESTIONRANGE  =   #{S_QUESTIONRANGE2}
  </if>
</select>

<!-- 블러오기 팝업  추가-->
<update id="updateQuestionOnly" parameterType="hashMap">
    UPDATE TB_TITEMPOOL
    SET
        UPD_DT = SYSDATE
        <if test="USER_ID != null">, UPD_ID = #{USER_ID}</if>
        , QUESTION = (SELECT QUESTION
                        FROM TB_TITEMPOOL
                       WHERE ITEMID = #{ITEMID2}
                         AND QUESTIONNUMBER = #{QUESTIONNUMBER2})
        , QUESTIONFILEID = (SELECT QUESTIONFILEID
                        FROM TB_TITEMPOOL
                       WHERE ITEMID = #{ITEMID2}
                         AND QUESTIONNUMBER = #{QUESTIONNUMBER2})
        , ANSWEREXPLAIN = (SELECT ANSWEREXPLAIN
                        FROM TB_TITEMPOOL
                       WHERE ITEMID = #{ITEMID2}
                         AND QUESTIONNUMBER = #{QUESTIONNUMBER2})
        , ANSWEREXPLAINFILEID = (SELECT ANSWEREXPLAINFILEID
                        FROM TB_TITEMPOOL
                       WHERE ITEMID = #{ITEMID2}
                         AND QUESTIONNUMBER = #{QUESTIONNUMBER2})
        , QUESTIONPATTERN = (SELECT QUESTIONPATTERN
                        FROM TB_TITEMPOOL
                       WHERE ITEMID = #{ITEMID2}
                         AND QUESTIONNUMBER = #{QUESTIONNUMBER2})
        , ANSWERNUMBER = (SELECT ANSWERNUMBER
                        FROM TB_TITEMPOOL
                       WHERE ITEMID = #{ITEMID2}
                         AND QUESTIONNUMBER = #{QUESTIONNUMBER2})
        , QUESTIONRANGE = (SELECT QUESTIONRANGE
                        FROM TB_TITEMPOOL
                       WHERE ITEMID = #{ITEMID2}
                         AND QUESTIONNUMBER = #{QUESTIONNUMBER2})
        , LEVELDIFFICULTY = (SELECT LEVELDIFFICULTY
                        FROM TB_TITEMPOOL
                       WHERE ITEMID = #{ITEMID2}
                         AND QUESTIONNUMBER = #{QUESTIONNUMBER2})
    WHERE ITEMID = #{ITEMID}
    AND QUESTIONNUMBER = #{QUESTIONNUMBER}
</update>

<!-- 모의고사 등록 리스트-->
<select id="getMouigosaRegistrationList"  parameterType="hashMap" resultType="hashMap">
    SELECT * FROM (
        SELECT ROWNUM AS RNUM, A.* FROM (
            SELECT ID
                , MOCKCODE
                , MOCKNAME
                , EXAMYEAR
                , EXAMROUND
                , SUBSTR(EXAMSTARTTIME,5,2) || '/' || SUBSTR(EXAMSTARTTIME,7,2) EXAMSTARTTIME
                , ISEXAMTYPEON
                , ISEXAMTYPEOFF
                , EXAMTIME
                , CLASSCODE
                , (SELECT NAME FROM TB_CATEGORY_INFO WHERE CODE = A.CLASSCODE AND P_CODE = 'CLASSCODE') NAME
                , SUBSTR(RECEIPTSTARTTIME,1,4) RECEIPTSTARTTIME0
                , SUBSTR(RECEIPTSTARTTIME,5,2) RECEIPTSTARTTIME1
                , SUBSTR(RECEIPTSTARTTIME,7,2) RECEIPTSTARTTIME2
                , SUBSTR(RECEIPTSTARTTIME,9,2) RECEIPTSTARTTIME3
                , SUBSTR(RECEIPTENDTIME,1,4) RECEIPTENDTIME0
                , SUBSTR(RECEIPTENDTIME,5,2) RECEIPTENDTIME1
                , SUBSTR(RECEIPTENDTIME,7,2) RECEIPTENDTIME2
                , SUBSTR(RECEIPTENDTIME,9,2) RECEIPTENDTIME3
                , TO_CHAR(REG_DT, 'YYYY-MM-DD') REG_DT
                , DECODE(USEFLAG, '0', '비활성', '1', '활성', '2', '마감', '3', '상시') USEFLAG
                , (SELECT COUNT(*)
                    FROM TB_TORDERS B, TB_TAPPROVALS C
                    WHERE B.IDENTYID = C.IDENTYID(+)
                    AND B.EXAMCODE = A.MOCKCODE
                    AND B.PAYMENTSTATE = 1) STSCNT
            FROM TB_TMOCKREGISTRATION A
            WHERE 1=1
            <if test="S_EXAMYEAR !=null and S_EXAMYEAR != '' ">
                AND EXAMYEAR  =   #{S_EXAMYEAR}
            </if>
            <if test="S_EXAMROUND !=null and S_EXAMROUND != '' ">
                AND EXAMROUND  =   #{S_EXAMROUND}
            </if>
            <if test="S_ISEXAMTYPEON !=null and S_ISEXAMTYPEON != '' ">
                AND ISEXAMTYPEON  =   #{S_ISEXAMTYPEON}
            </if>
            <if test="S_ISEXAMTYPEOFF !=null and S_ISEXAMTYPEOFF != '' ">
                AND ISEXAMTYPEOFF  =   #{S_ISEXAMTYPEOFF}
            </if>
            <if test="S_CLASSCODE !=null and S_CLASSCODE != '' ">
                AND CLASSCODE  =   #{S_CLASSCODE}
            </if>

            ORDER BY  ID DESC

        ) A WHERE ROWNUM <![CDATA[ <= ]]> #{endNo}
    ) WHERE RNUM <![CDATA[ > ]]> #{startNo}
</select>

<!-- 동형모의고사 등록 리스트-->
<select id="D_getMouigosaRegistrationList"  parameterType="hashMap" resultType="hashMap">
    SELECT * FROM (
        SELECT ROWNUM AS RNUM, A.* FROM (
            SELECT *
            FROM TB_LEC_TITEM A
            WHERE 1=1
            <if test="SEARCH_TXT !=null and SEARCH_TXT != '' ">
    			<if test="SEARCH_TYPE == 'itemnm' ">	   
	        		AND ITEMNM  LIKE   '%'||#{SEARCH_TXT}||'%'
	    		</if>
	    		<if test="SEARCH_TYPE == 'lecNo' ">	   
	        		AND LECCODE  LIKE   '%'||#{SEARCH_TXT}||'%'
	    		</if>
	    		<if test="SEARCH_TYPE == '' ">
	    			AND (LECCODE  LIKE   '%'||#{SEARCH_TXT}||'%' OR ITEMNM  LIKE   '%'||#{SEARCH_TXT}||'%')
	    		</if>
    		</if>
            ORDER BY  ITEMID DESC

        ) A WHERE ROWNUM <![CDATA[ <= ]]> #{endNo}
    ) WHERE RNUM <![CDATA[ > ]]> #{startNo}
</select>

<!-- 모의고사 등록 리스트 카운트-->
<select id="getRegistrationCount" parameterType="hashMap" resultType="int">
    SELECT COUNT(*)
    FROM TB_TMOCKREGISTRATION
    WHERE 1=1
    <if test="S_EXAMYEAR !=null and S_EXAMYEAR != '' ">
        AND EXAMYEAR  =   #{S_EXAMYEAR}
    </if>
    <if test="S_EXAMROUND !=null and S_EXAMROUND != '' ">
        AND EXAMROUND  =   #{S_EXAMROUND}
    </if>
    <if test="S_ISEXAMTYPEON !=null and S_ISEXAMTYPEON != '' ">
        AND ISEXAMTYPEON  =   #{S_ISEXAMTYPEON}
    </if>
    <if test="S_ISEXAMTYPEOFF !=null and S_ISEXAMTYPEOFF != '' ">
        AND ISEXAMTYPEOFF  =   #{S_ISEXAMTYPEOFF}
    </if>
    <if test="S_CLASSCODE !=null and S_CLASSCODE != '' ">
        AND CLASSCODE  =   #{S_CLASSCODE}
    </if>
</select>

<!-- 동형모의고사 등록 리스트 카운트-->
<select id="D_getRegistrationCount" parameterType="hashMap" resultType="int">
    SELECT COUNT(*)
    FROM TB_LEC_TITEM
    WHERE 1=1
     <if test="SEARCH_TXT !=null and SEARCH_TXT != '' ">
    	<if test="SEARCH_TYPE == 'itemnm' ">	   
	        AND ITEMNM  LIKE   '%'||#{SEARCH_TXT}||'%'
	    </if>
	    <if test="SEARCH_TYPE == 'lecNo' ">	   
	        AND LECCODE  LIKE   '%'||#{SEARCH_TXT}||'%'
	    </if>
	    <if test="SEARCH_TYPE == '' ">
	    	AND (LECCODE  LIKE   '%'||#{SEARCH_TXT}||'%' OR ITEMNM  LIKE   '%'||#{SEARCH_TXT}||'%')
	    </if>
    </if>
</select>

<!-- 모의고사 등록 등록 팝업화면 '직급' 조회-->
<select id="getRegistrationList" parameterType="hashMap" resultType="hashMap">
    SELECT CODE , NAME
    FROM TB_CATEGORY_INFO
    WHERE ISUSE = 'Y'
    AND P_CODE = 'CLASSCODE'
    ORDER BY ORDR
</select>

<!-- 직렬 셀렉트박스 비동기-->
<select id="getSubCode2" parameterType="hashMap" resultType="hashMap">
    SELECT CODE , NAME
    FROM TB_CATEGORY_INFO
<!--     WHERE ISUSE = 'Y' -->
	WHERE 1=1
    <if test="CLASSCODE != null">
        AND P_CODE = #{CLASSCODE}
    </if>
    ORDER BY ORDR
</select>

<select id="getQA_fileno" parameterType="hashMap" resultType="String">
	SELECT NVL(MAX(ATTACHFILEID), 0) + 1 FROM TB_LEC_TATTACHFILE
</select>

<!-- 필수과목(교수) 비동기-->
<select id="getSubCode3" parameterType="hashMap" resultType="hashMap">
    SELECT F.*,ROWNUM SUBJECTORDER FROM(
        SELECT E.ITEMID
            , E.SUBJECT_CD
            , (SELECT SUBJECT_NM FROM TB_SUBJECT_INFO WHERE SUBJECT_CD = E.SUBJECT_CD) || '(' || E.QUESTIONNUM || ')' SUBJECT_NM
            , E.PROFCODE
            , (SELECT USER_NM FROM TB_MA_MEMBER WHERE USER_ID = E.PROFCODE) || '(' || E.CODE_NM || ')' PROF_NM
            , E.QUESTIONNUM
            , E.CODE_NM
            , DECODE(E.SUBJECTPERIOD, NULL, '1', E.SUBJECTPERIOD) SUBJECTPERIOD
        FROM (
            SELECT C.ITEMID
                , B.SUBJECT_CD
                , C.PROFCODE
                , C.QUESTIONNUM
                , C.CODE_NM
                , D.SUBJECTPERIOD
                , MIN(B.SUBJECTORDER) SUBJECTORDER
            FROM (
                SELECT A.SUBJECT_CD , MIN(A.SUBJECTORDER) SUBJECTORDER
                FROM TB_TCCSRSSUBJECTINFO A
                WHERE A.CLASSCODE = #{CLASSCODE}
                AND A.SUBJECTTYPEDIVISION = 1
                GROUP BY A.SUBJECT_CD
            ) B, TB_TITEM C, TB_TMOCKSUBJECT D
            WHERE B.SUBJECT_CD = C.SUBJECT_CD
            AND C.ITEMID = D.ITEMID
            AND D.MOCKCODE = #{MOCKCODE}
            AND C.EXAMYEAR = #{EXAMYEAR}
            AND C.EXAMROUND = #{EXAMROUND}
            AND C.OPENSTATE = 1
            GROUP BY C.ITEMID , B.SUBJECT_CD , C.PROFCODE , C.QUESTIONNUM , C.CODE_NM , D.SUBJECTPERIOD
        ) E
        ORDER BY E.SUBJECTORDER
    )F
</select>

<!-- 선택과목(교수) 비동기-->
<select id="getSubCode4" parameterType="hashMap" resultType="hashMap">
    SELECT F.*,ROWNUM SUBJECTORDER FROM(
        SELECT E.ITEMID
            , E.SUBJECT_CD
            , (SELECT SUBJECT_NM FROM TB_SUBJECT_INFO WHERE SUBJECT_CD = E.SUBJECT_CD) || '(' || E.QUESTIONNUM || ')' SUBJECT_NM
            , E.PROFCODE
            , (SELECT USER_NM FROM TB_MA_MEMBER WHERE USER_ID = E.PROFCODE) || '(' || E.CODE_NM || ')' PROF_NM
            , E.QUESTIONNUM
            , E.CODE_NM
            , DECODE(E.SUBJECTPERIOD, NULL, '1', E.SUBJECTPERIOD) SUBJECTPERIOD
        FROM (
            SELECT C.ITEMID
                , B.SUBJECT_CD
                , C.PROFCODE
                , C.QUESTIONNUM
                , C.CODE_NM
                , D.SUBJECTPERIOD
                , MIN(B.SUBJECTORDER) SUBJECTORDER
            FROM (
                SELECT A.SUBJECT_CD , MIN(A.SUBJECTORDER) SUBJECTORDER
                FROM TB_TCCSRSSUBJECTINFO A
                WHERE A.CLASSCODE = #{CLASSCODE}
                AND A.SUBJECTTYPEDIVISION = 2
                GROUP BY A.SUBJECT_CD
            ) B, TB_TITEM C, TB_TMOCKSUBJECT D
            WHERE B.SUBJECT_CD = C.SUBJECT_CD
            AND C.ITEMID = D.ITEMID
            AND D.MOCKCODE = #{MOCKCODE}
            AND C.EXAMYEAR = #{EXAMYEAR}
            AND C.EXAMROUND = #{EXAMROUND}
            AND C.OPENSTATE = 1
            GROUP BY C.ITEMID , B.SUBJECT_CD , C.PROFCODE , C.QUESTIONNUM , C.CODE_NM , D.SUBJECTPERIOD
        ) E
        ORDER BY E.SUBJECTORDER
    )F
</select>

<!-- 필수과목(교수) 비동기-->
<select id="getSubCode3_ins" parameterType="hashMap" resultType="hashMap">
    SELECT D.*,ROWNUM SUBJECTORDER FROM (
        SELECT C.ITEMID
            , B.SUBJECT_CD
            , (SELECT SUBJECT_NM FROM TB_SUBJECT_INFO WHERE SUBJECT_CD = B.SUBJECT_CD) || '(' || C.QUESTIONNUM || ')' SUBJECT_NM
            , C.PROFCODE
            , C.QUESTIONNUM
            , C.CODE_NM
            , (SELECT USER_NM FROM TB_MA_MEMBER WHERE USER_ID = C.PROFCODE) || '(' || C.CODE_NM || ')' PROF_NM
        FROM (
            SELECT A.SUBJECT_CD , MIN(A.SUBJECTORDER) SUBJECTORDER
            FROM TB_TCCSRSSUBJECTINFO A
            WHERE A.CLASSCODE = #{CLASSCODE}
            AND A.SUBJECTTYPEDIVISION = 1
            GROUP BY A.SUBJECT_CD
        ) B, TB_TITEM C
        WHERE B.SUBJECT_CD = C.SUBJECT_CD
        AND C.EXAMYEAR = #{EXAMYEAR}
        AND C.EXAMROUND = #{EXAMROUND}
        AND C.OPENSTATE = 1
    )D, TB_TMOCKSUBJECT E
    WHERE D.SUBJECT_CD = E.SUBJECT_CD
    AND D.ITEMID = E.ITEMID
    AND E.MOCKCODE = #{MOCKCODE}
    AND E.USEFLAG = 0
    ORDER BY SUBJECTORDER
</select>

<!-- 필수과목(교수) 비동기-->
<select id="getSubCode3_ins_20151228" parameterType="hashMap" resultType="hashMap">
    SELECT D.*,ROWNUM SUBJECTORDER FROM (
        SELECT C.ITEMID
            , B.SUBJECT_CD
            , (SELECT SUBJECT_NM FROM TB_SUBJECT_INFO WHERE SUBJECT_CD = B.SUBJECT_CD) || '(' || C.QUESTIONNUM || ')' SUBJECT_NM
            , C.PROFCODE
            , C.QUESTIONNUM
            , C.CODE_NM
            , (SELECT USER_NM FROM TB_MA_MEMBER WHERE USER_ID = C.PROFCODE) || '(' || C.CODE_NM || ')' PROF_NM
        FROM (
            SELECT A.SUBJECT_CD , MIN(A.SUBJECTORDER) SUBJECTORDER
            FROM TB_TCCSRSSUBJECTINFO A
            WHERE A.CLASSCODE = #{CLASSCODE}
            AND A.SUBJECTTYPEDIVISION = 1
            GROUP BY A.SUBJECT_CD
        ) B, TB_TITEM C
        WHERE B.SUBJECT_CD = C.SUBJECT_CD
        AND C.EXAMYEAR = #{EXAMYEAR}
        AND C.EXAMROUND = #{EXAMROUND}
        AND C.OPENSTATE = 1
    )D
        ORDER BY SUBJECTORDER
</select>

<!-- 선택과목(교수) 비동기-->
<select id="getSubCode4_ins" parameterType="hashMap" resultType="hashMap">
    SELECT D.*,ROWNUM SUBJECTORDER FROM(
        SELECT C.ITEMID
            , B.SUBJECT_CD
            , (SELECT SUBJECT_NM FROM TB_SUBJECT_INFO WHERE SUBJECT_CD = B.SUBJECT_CD) || '(' || C.QUESTIONNUM || ')' SUBJECT_NM
            , C.PROFCODE
            , C.QUESTIONNUM
            , C.CODE_NM
            , (SELECT USER_NM FROM TB_MA_MEMBER WHERE USER_ID = C.PROFCODE) || '(' || C.CODE_NM || ')' PROF_NM
        FROM (
            SELECT A.SUBJECT_CD , MIN(A.SUBJECTORDER) SUBJECTORDER
            FROM TB_TCCSRSSUBJECTINFO A
            WHERE A.CLASSCODE = #{CLASSCODE}
            AND A.SUBJECTTYPEDIVISION = 2
            GROUP BY A.SUBJECT_CD
        ) B, TB_TITEM C
        WHERE B.SUBJECT_CD = C.SUBJECT_CD
        AND C.EXAMYEAR = #{EXAMYEAR}
        AND C.EXAMROUND = #{EXAMROUND}
        AND C.OPENSTATE = 1
        ORDER BY B.SUBJECTORDER
    )D
</select>

<!-- 필수/선택과목 불러오기 팝업 년-->
<select id="getRegistrationExamYear" parameterType="hashMap" resultType="hashMap">
    SELECT DISTINCT(EXAMYEAR) EXAMYEAR
    FROM TB_TITEM
    WHERE OPENSTATE = 1
    ORDER BY EXAMYEAR
</select>

<!-- 필수/선택과목 불러오기 팝업 회-->
<select id="getRegistrationExamRound" parameterType="hashMap" resultType="hashMap">
    SELECT DISTINCT(EXAMROUND) EXAMROUND
    FROM TB_TITEM
    WHERE OPENSTATE = 1
    <if test="EXAMYEAR != null">AND EXAMYEAR = #{EXAMYEAR}</if>
    ORDER BY EXAMROUND
</select>

<!-- 필수/선택과목 불러오기 팝업 과목-->
<select id="getRegistrationSubject" parameterType="hashMap" resultType="hashMap">
    SELECT A.SUBJECT_CD , B.SUBJECT_NM
    FROM TB_TITEM A, TB_SUBJECT_INFO B, TB_TCCSRSSUBJECTINFO C
    WHERE A.SUBJECT_CD = B.SUBJECT_CD
    AND A.OPENSTATE = 1
    AND B.SUBJECT_CD = C.SUBJECT_CD
    <if test="EXAMYEAR != null">AND A.EXAMYEAR = #{EXAMYEAR}</if>
    <if test="EXAMROUND != null">AND A.EXAMROUND = #{EXAMROUND}</if>
    <if test="CLASSCODE != null">AND C.CLASSCODE = #{CLASSCODE}</if>
    <if test="SUBJECTTYPEDIVISION != null">AND C.SUBJECTTYPEDIVISION = #{SUBJECTTYPEDIVISION}</if>
    AND B.ISUSE = 'Y'
	GROUP BY A.SUBJECT_CD, B.SUBJECT_NM
    ORDER BY A.SUBJECT_CD
</select>

<select id="getRegistrationSubject_20151228" parameterType="hashMap" resultType="hashMap">
    SELECT A.SUBJECT_CD , B.SUBJECT_NM
    FROM TB_TITEM A, TB_SUBJECT_INFO B
    WHERE A.SUBJECT_CD = B.SUBJECT_CD
    AND A.OPENSTATE = 1
    <if test="EXAMYEAR != null">AND A.EXAMYEAR = #{EXAMYEAR}</if>
    <if test="EXAMROUND != null">AND A.EXAMROUND = #{EXAMROUND}</if>
    AND B.ISUSE = 'Y'
	GROUP BY A.SUBJECT_CD, B.SUBJECT_NM
    ORDER BY A.SUBJECT_CD
</select>

<!-- 필수/선택과목 불러오기 팝업 리스트-->
<select id="getRegistrationPopList" parameterType="hashMap" resultType="hashMap">
    SELECT * FROM (
        SELECT ROWNUM AS RNUM, D.* FROM (
            SELECT C.ITEMID
                , C.EXAMYEAR
                , C.EXAMROUND
                , B.SUBJECT_CD
                , (SELECT SUBJECT_NM FROM TB_SUBJECT_INFO WHERE SUBJECT_CD = B.SUBJECT_CD) || '(' || C.QUESTIONNUM || ')' SUBJECT_NM
                , C.PROFCODE
                , C.CODE_NM
                , C.QUESTIONNUM
                , (SELECT USER_NM FROM TB_MA_MEMBER WHERE USER_ID = C.PROFCODE) || '(' || C.CODE_NM || ')' PROF_NM
            FROM (
                SELECT A.SUBJECT_CD , MIN(A.SUBJECTORDER) SUBJECTORDER
                FROM TB_TCCSRSSUBJECTINFO A
                WHERE A.CLASSCODE = #{CLASSCODE}
                AND A.SUBJECTTYPEDIVISION = #{SUBJECTTYPEDIVISION}
                GROUP BY A.SUBJECT_CD
            ) B, TB_TITEM C
            WHERE B.SUBJECT_CD = C.SUBJECT_CD
            <if test="EXAMYEAR !=null and EXAMYEAR != '' ">AND C.EXAMYEAR = #{EXAMYEAR}</if>
            <if test="EXAMROUND !=null and EXAMROUND != '' ">AND C.EXAMROUND = #{EXAMROUND}</if>
            <if test="SUBJECT_CD !=null and SUBJECT_CD != '' ">AND C.SUBJECT_CD = #{SUBJECT_CD}</if>
            <if test="PROFCODE !=null and PROFCODE != '' ">AND C.PROFCODE = #{PROFCODE}</if>
            AND C.OPENSTATE = 1

            ORDER BY B.SUBJECTORDER

        ) D WHERE ROWNUM <![CDATA[ <= ]]> #{endNo}
    ) WHERE RNUM <![CDATA[ > ]]> #{startNo}
</select>

<!-- 필수/선택과목 불러오기 팝업 리스트 카운트-->
<select id="getRegistrationPopCount" parameterType="hashMap" resultType="int">
    SELECT COUNT(*) FROM(
        SELECT A.SUBJECT_CD , MIN(A.SUBJECTORDER) SUBJECTORDER
        FROM TB_TCCSRSSUBJECTINFO A
        WHERE A.CLASSCODE = #{CLASSCODE}
        AND A.SUBJECTTYPEDIVISION = #{SUBJECTTYPEDIVISION}
        GROUP BY A.SUBJECT_CD
    ) B, TB_TITEM C
    WHERE B.SUBJECT_CD = C.SUBJECT_CD
    <if test="EXAMYEAR !=null and EXAMYEAR != '' ">AND C.EXAMYEAR = #{EXAMYEAR}</if>
    <if test="EXAMROUND !=null and EXAMROUND != '' ">AND C.EXAMROUND = #{EXAMROUND}</if>
    <if test="SUBJECT_CD !=null and SUBJECT_CD != '' ">AND C.SUBJECT_CD = #{SUBJECT_CD}</if>
    <if test="PROFCODE !=null and PROFCODE != '' ">AND C.PROFCODE = #{PROFCODE}</if>
    AND C.OPENSTATE = 1
</select>

<!-- 모의고사 등록 max값-->
<select id="getRegistrationMax" parameterType="hashMap" resultType="hashMap">
    SELECT 'E' || TO_CHAR(SYSDATE, 'YY') || LPAD(TO_NUMBER(SUBSTR(NVL(MAX(MOCKCODE),'000000'),4,6))+1,6,0) MOCKCODE
    FROM  TB_TMOCKREGISTRATION
    WHERE SUBSTR(MOCKCODE,1,3) = 'E' || TO_CHAR(SYSDATE, 'YY')
</select>

<!-- 동형모의고사 등록 등록-->
<insert id="D_Mock_Insert" parameterType="hashMap">
	INSERT INTO TB_LEC_TITEM (ITEMID, ITEMNM, LECCODE, EXAMROUND, PROFCODE, ENTRYNUM, QUESTIONNUM, OPENSTATE, UPD_ID, UPD_DT, QUESTIONFID, ANSWERFID, EXAMTIME)
	VALUES(
		(SELECT NVL(MAX(ITEMID), 0) + 1 FROM  TB_LEC_TITEM),
		#{MOCKNAME},
		#{MOCKLECCODE},
		(SELECT NVL(MAX(EXAMROUND), 0) + 1 FROM  TB_LEC_TITEM WHERE LECCODE = #{MOCKLECCODE}),
		#{MOCKPRFCODE},
		#{ENTRYNUM},
		#{QUESTIONNUM},
		#{MOCKISUSE},
		#{USER_ID},
		SYSDATE,
		#{QUESTIONFID},
		#{ANSWERFID},
		#{EXAMTIME}
	)
</insert>

<insert id="D_Mock_Pool_Insert" parameterType="hashMap">
	INSERT INTO TB_LEC_TITEMPOOL (ITEMID, QUESTIONNUMBER, QUESTION, QUESTIONFILEID, ANSWEREXPLAIN, ANSWEREXPLAINFILEID, ANSWERNUMBER, QUESTIONRANGE, LEVELDIFFICULTY, QUESTIONPATTERN, USEFLAG, REG_ID, REG_DT, UPD_ID, UPD_DT, SMAQUESTIONFILEID)
	VALUES(
		(SELECT NVL(MAX(ITEMID),0) FROM TB_LEC_TITEM),
		#{QUESTIONNUMBER},
		'',
		'',
		'',
		'',
		'',
		'',
		'',
		'',
		'1',
		#{USER_ID},
		SYSDATE,
		'',
		'',
		''
	)
</insert>

<!-- 모의고사 등록 등록-->
<insert id="insertRegistrationMouigosa" parameterType="hashMap">
    INSERT INTO TB_TMOCKREGISTRATION (
        ID
        <if test="ISEXAMTYPEON != null">, ISEXAMTYPEON</if>
        <if test="ISEXAMTYPEOFF != null">, ISEXAMTYPEOFF</if>
        <if test="MOCKCODE != null">, MOCKCODE</if>
        <if test="MOCKNAME != null">, MOCKNAME</if>
        <if test="EXAMYEAR != null">, EXAMYEAR</if>
        <if test="EXAMROUND != null">, EXAMROUND</if>
        <if test="OFFCLOSEPERSONNUMBER != null">, OFFCLOSEPERSONNUMBER</if>
        <if test="CLASSCODE != null">, CLASSCODE</if>
        <if test="EXAMSTARTTIME != null">, EXAMSTARTTIME</if>
        <if test="EXAMENDTIME != null">, EXAMENDTIME</if>
        <if test="EXAMPERIOD != null">, EXAMPERIOD</if>
        <if test="EXAMTIME != null">, EXAMTIME</if>
        <if test="RECEIPTSTARTTIME != null">, RECEIPTSTARTTIME</if>
        <if test="RECEIPTENDTIME != null">, RECEIPTENDTIME</if>
        <if test="EXAMCOST != null">, EXAMCOST</if>
        <if test="DISCOUNTRATIO != null">, DISCOUNTRATIO</if>
        <if test="SALEAMOUNTS != null">, SALEAMOUNTS</if>
        <if test="USEFLAG != null">, USEFLAG</if>
        <if test="EXAMPERIODTYPE != null">, EXAMPERIODTYPE</if>
        , REG_ID
        , REG_DT
    ) VALUES (
        (SELECT NVL(MAX(ID), 0) + 1 FROM  TB_TMOCKREGISTRATION)
        <if test="ISEXAMTYPEON != null">, #{ISEXAMTYPEON}</if>
        <if test="ISEXAMTYPEOFF != null">, #{ISEXAMTYPEOFF}</if>
        <if test="MOCKCODE != null">, #{MOCKCODE}</if>
        <if test="MOCKNAME != null">, #{MOCKNAME}</if>
        <if test="EXAMYEAR != null">, #{EXAMYEAR}</if>
        <if test="EXAMROUND != null">, #{EXAMROUND}</if>
        <if test="OFFCLOSEPERSONNUMBER != null">, #{OFFCLOSEPERSONNUMBER}</if>
        <if test="CLASSCODE != null">, #{CLASSCODE}</if>
        <if test="EXAMSTARTTIME != null">, #{EXAMSTARTTIME}</if>
        <if test="EXAMENDTIME != null">, #{EXAMENDTIME}</if>
        <if test="EXAMPERIOD != null">, #{EXAMPERIOD}</if>
        <if test="EXAMTIME != null">, #{EXAMTIME}</if>
        <if test="RECEIPTSTARTTIME != null">, #{RECEIPTSTARTTIME}</if>
        <if test="RECEIPTENDTIME != null">, #{RECEIPTENDTIME}</if>
        <if test="EXAMCOST != null">, #{EXAMCOST}</if>
        <if test="DISCOUNTRATIO != null">, #{DISCOUNTRATIO}</if>
        <if test="SALEAMOUNTS != null">, #{SALEAMOUNTS}</if>
        <if test="USEFLAG != null">, #{USEFLAG}</if>
        <if test="EXAMPERIODTYPE != null">, #{EXAMPERIODTYPE}</if>
        <if test="USER_ID != null">, #{USER_ID}</if>
        , SYSDATE
    )
</insert>

<!-- 모의고사 등록 직렬 등록-->
<insert id="insertMouigosaTmockclsclsseries" parameterType="hashMap">
    INSERT INTO TB_TMOCKCLSCLSSERIES (
        ID
        <if test="MOCKCODE != null">, MOCKCODE</if>
        <if test="CLASSSERIESCODE2 != null">, CLASSSERIESCODE</if>
        <if test="USER_ID != null">, REG_ID</if>
        , REG_DT
    ) VALUES (
        (SELECT NVL(MAX(ID), 0) + 1 FROM  TB_TMOCKCLSCLSSERIES)
        <if test="MOCKCODE != null">, #{MOCKCODE}</if>
        <if test="CLASSSERIESCODE2 != null">, #{CLASSSERIESCODE2}</if>
        <if test="USER_ID != null">, #{USER_ID}</if>
        , SYSDATE
    )
</insert>

<!-- 모의고사 등록 필수,선택 과목 등록-->
<insert id="insertMouigosaTmocksubject" parameterType="hashMap">
    INSERT INTO TB_TMOCKSUBJECT (
        ID
        <if test="MOCKCODE != null">, MOCKCODE</if>
        <if test="SUBJECT_CD != null">, SUBJECT_CD</if>
        <if test="SUBJECTTYPEDIVISION != null">, SUBJECTTYPEDIVISION</if>
        <if test="SUBJECTPERIOD != null">, SUBJECTPERIOD</if>
        , SUBJECTORDER
        , USEFLAG
        <if test="USER_ID != null">, REG_ID</if>
        , REG_DT
        <if test="ITEMID != null">, ITEMID</if>
    ) VALUES (
        (SELECT NVL(MAX(ID), 0) + 1 FROM  TB_TMOCKSUBJECT)
        <if test="MOCKCODE != null">, #{MOCKCODE}</if>
        <if test="SUBJECT_CD != null">, #{SUBJECT_CD}</if>
        <if test="SUBJECTTYPEDIVISION != null">, #{SUBJECTTYPEDIVISION}</if>
        <if test="SUBJECTPERIOD != null">, #{SUBJECTPERIOD}</if>
        , (SELECT COUNT(*) + 1 FROM  TB_TMOCKSUBJECT WHERE MOCKCODE = #{MOCKCODE})
        , 0
        <if test="USER_ID != null">, #{USER_ID}</if>
        , SYSDATE
        <if test="ITEMID != null">, #{ITEMID}</if>
         )
</insert>

<!-- 모의고사 등록 필수 , 선택과목 삭제-->
<delete id="deleteMouigosaTmockSubject_ck" parameterType="hashMap">
    DELETE FROM TB_TMOCKSUBJECT
    WHERE MOCKCODE = #{MOCKCODE}
    AND ITEMID = #{ITEMID}
    AND SUBJECTTYPEDIVISION = #{SUBJECTTYPEDIVISION}
</delete>

<!-- 접수자 과목 변경을위한 수정된 필수/선택 리스트-->
<select id="getTmocksubjectDetailList" parameterType="hashMap" resultType="hashMap">
    SELECT C.IDENTYID
        , C.ITEMID
        , C.SUBJECT_CD
        , C.SUBJECTTYPEDIVISION
        , D.ITEMID ITEMID_2
    FROM (
        SELECT A.IDENTYID
            , A.EXAMCODE
            , B.ITEMID
            , (SELECT SUBJECT_CD FROM TB_TITEM WHERE ITEMID = B.ITEMID) SUBJECT_CD
            , B.SUBJECTTYPEDIVISION
        FROM TB_TORDERS A, TB_TUSERCHOICESUBJECT B
        WHERE A.IDENTYID = B.IDENTYID
        AND A.EXAMCODE = #{MOCKCODE}
        AND B.SUBJECTTYPEDIVISION = #{SUBJECTTYPEDIVISION}
    ) C, TB_TMOCKSUBJECT D
    WHERE C.SUBJECT_CD = D.SUBJECT_CD
    AND C.EXAMCODE = D.MOCKCODE
    AND C.SUBJECTTYPEDIVISION = D.SUBJECTTYPEDIVISION
</select>

<!-- 접수자 과목 변경을위한 수정-->
<update id="updateTuserChoiceSubject" parameterType="hashMap">
    UPDATE TB_TUSERCHOICESUBJECT
    SET
        ITEMID = #{ITEMID_2}
    WHERE IDENTYID = #{IDENTYID}
    AND ITEMID = #{ITEMID}
    AND SUBJECTTYPEDIVISION = #{SUBJECTTYPEDIVISION}
</update>

<!-- 동형모의고사 등록 수정  불러오기 상세-->
<select id="D_getUpdateRegistrationDetail" parameterType="hashMap" resultType="hashMap">
    SELECT *
    FROM TB_LEC_TITEM 
    WHERE ITEMID = #{ITEMID}
</select>

<select id="getuploadFile1" parameterType="hashMap" resultType="hashMap">
    SELECT *
    FROM TB_LEC_TITEM A, TB_LEC_TATTACHFILE B
    WHERE A.QUESTIONFID = B.ATTACHFILEID 
    AND A.ITEMID = #{ITEMID}
</select>

<select id="getuploadFile2" parameterType="hashMap" resultType="hashMap">
    SELECT *
    FROM TB_LEC_TITEM A, TB_LEC_TATTACHFILE B
    WHERE A.ANSWERFID = B.ATTACHFILEID 
    AND A.ITEMID = #{ITEMID}
</select>

<!-- 모의고사 등록 수정  불러오기 상세-->
<select id="getUpdateRegistrationDetail" parameterType="hashMap" resultType="hashMap">
    SELECT ID
        , MOCKCODE
        , MOCKNAME
        , EXAMYEAR
        , EXAMROUND
        , OFFCLOSEPERSONNUMBER
        , CLASSCODE
        , EXAMSTARTTIME
        , EXAMENDTIME
        , EXAMPERIOD
        , EXAMTIME
        , RECEIPTSTARTTIME
        , RECEIPTENDTIME
        , EXAMCOST
        , DISCOUNTRATIO
        , SALEAMOUNTS
        , USEFLAG
        , ISEXAMTYPEON
        , ISEXAMTYPEOFF
        , EXAMPERIODTYPE
    FROM TB_TMOCKREGISTRATION A
    WHERE MOCKCODE = #{MOCKCODE}
</select>

<!-- 모의고사 등록 직렬 불러오기 상세-->
<select id="getUpdateMouigosaTmockclsclsseriesDetail" parameterType="hashMap" resultType="hashMap">
    SELECT (SELECT SUBSTR(MAX( SYS_CONNECT_BY_PATH (CLASSSERIESCODE,',')),2)
            FROM (
                SELECT CLASSSERIESCODE, ROWNUM AS NUM
                FROM TB_TMOCKCLSCLSSERIES
                WHERE MOCKCODE =  #{MOCKCODE}
            ) a
            START WITH NUM = 1
            CONNECT BY PRIOR NUM = NUM - 1) CLASSSERIESCODE
        , (SELECT SUBSTR(MAX( SYS_CONNECT_BY_PATH (ITEMID,',')),2)
            FROM (
                SELECT D.ITEMID, ROWNUM AS NUM
                FROM (
                    SELECT C.ITEMID FROM (
                        SELECT A.SUBJECT_CD , MIN(A.SUBJECTORDER) SUBJECTORDER
                        FROM TB_TCCSRSSUBJECTINFO A
                        WHERE A.CLASSCODE = #{CLASSCODE}
                        AND A.SUBJECTTYPEDIVISION = 1
                        GROUP BY A.SUBJECT_CD
                    ) B, TB_TITEM C
                    WHERE B.SUBJECT_CD = C.SUBJECT_CD
                    AND C.EXAMYEAR = #{EXAMYEAR}
                    AND C.EXAMROUND = #{EXAMROUND}
                    AND C.OPENSTATE = 1
                    ORDER BY B.SUBJECTORDER
                ) D
                WHERE D.ITEMID NOT IN(SELECT ITEMID
                    FROM TB_TMOCKSUBJECT
                    WHERE MOCKCODE =  #{MOCKCODE}
                    AND SUBJECTTYPEDIVISION = 1)
            ) F
            START WITH NUM = 1
            CONNECT BY PRIOR NUM = NUM - 1) ITEMID_1
        , (SELECT SUBSTR(MAX( SYS_CONNECT_BY_PATH (ITEMID,',')),2)
            FROM (
                SELECT D.ITEMID, ROWNUM AS NUM
                FROM (
                    SELECT C.ITEMID
                    FROM(
                        SELECT A.SUBJECT_CD , MIN(A.SUBJECTORDER) SUBJECTORDER
                        FROM TB_TCCSRSSUBJECTINFO A
                        WHERE A.CLASSCODE = #{CLASSCODE}
                        AND A.SUBJECTTYPEDIVISION = 2
                        GROUP BY A.SUBJECT_CD
                    ) B, TB_TITEM C
                    WHERE B.SUBJECT_CD = C.SUBJECT_CD
                    AND C.EXAMYEAR = #{EXAMYEAR}
                    AND C.EXAMROUND = #{EXAMROUND}
                    AND C.OPENSTATE = 1
                    ORDER BY B.SUBJECTORDER
                )D
                WHERE D.ITEMID NOT IN(SELECT ITEMID
                    FROM TB_TMOCKSUBJECT
                    WHERE MOCKCODE =  #{MOCKCODE}
                    AND SUBJECTTYPEDIVISION = 2)
            ) F
            START WITH NUM = 1
            CONNECT BY PRIOR NUM = NUM - 1) ITEMID_2
    FROM DUAL
</select>

<!-- 동형모의고사 등록  수정-->
<update id="D_Mock_Update" parameterType="hashMap">
	UPDATE TB_LEC_TITEM
   	SET
   		ITEMNM = #{MOCKNAME},
   		LECCODE = #{MOCKLECCODE},
   		PROFCODE = #{MOCKPRFCODE},
   		ENTRYNUM = #{ENTRYNUM},
   		QUESTIONNUM = #{QUESTIONNUM},
   		OPENSTATE = #{MOCKISUSE},
   		UPD_ID = #{USER_ID},
   		UPD_DT = SYSDATE,
   		EXAMTIME = #{EXAMTIME}
   	WHERE ITEMID = #{ITEMID}
</update>

<!-- 모의고사 등록  수정-->
<update id="updateRegistrationMouigosa" parameterType="hashMap">
    UPDATE TB_TMOCKREGISTRATION
    SET
        UPD_DT = SYSDATE
        <if test="USER_ID != null">, UPD_ID = #{USER_ID}</if>
        <if test="ISEXAMTYPEON != null">, ISEXAMTYPEON = #{ISEXAMTYPEON}</if>
        <if test="ISEXAMTYPEOFF != null">, ISEXAMTYPEOFF = #{ISEXAMTYPEOFF}</if>
        <if test="MOCKNAME != null">, MOCKNAME = #{MOCKNAME}</if>
        <if test="EXAMYEAR != null">, EXAMYEAR = #{EXAMYEAR}</if>
        <if test="EXAMROUND != null">, EXAMROUND = #{EXAMROUND}</if>
        <if test="OFFCLOSEPERSONNUMBER != null">, OFFCLOSEPERSONNUMBER = #{OFFCLOSEPERSONNUMBER}</if>
        <if test="CLASSCODE != null">, CLASSCODE = #{CLASSCODE}</if>
        <if test="EXAMSTARTTIME != null">, EXAMSTARTTIME = #{EXAMSTARTTIME}</if>
        <if test="EXAMENDTIME != null">, EXAMENDTIME = #{EXAMENDTIME}</if>
        <if test="EXAMPERIOD != null">, EXAMPERIOD = #{EXAMPERIOD}</if>
        <if test="EXAMTIME != null">, EXAMTIME = #{EXAMTIME}</if>
        <if test="RECEIPTSTARTTIME != null">, RECEIPTSTARTTIME = #{RECEIPTSTARTTIME}</if>
        <if test="RECEIPTENDTIME != null">, RECEIPTENDTIME = #{RECEIPTENDTIME}</if>
        <if test="EXAMCOST != null">, EXAMCOST = #{EXAMCOST}</if>
        <if test="DISCOUNTRATIO != null">, DISCOUNTRATIO = #{DISCOUNTRATIO}</if>
        <if test="SALEAMOUNTS != null">, SALEAMOUNTS = #{SALEAMOUNTS}</if>
        <if test="USEFLAG != null">, USEFLAG = #{USEFLAG}</if>
        <if test="EXAMPERIODTYPE != null">, EXAMPERIODTYPE = #{EXAMPERIODTYPE}</if>
    WHERE MOCKCODE = #{MOCKCODE}
</update>

<!-- 모의고사 등록  직렬 삭제-->
<delete id="deleteMouigosaTmockclsclsseries" parameterType="hashMap">
    DELETE FROM TB_TMOCKCLSCLSSERIES
    WHERE MOCKCODE = #{MOCKCODE}
</delete>

<!-- 모의고사 등록 필수 , 선택과목 삭제-->
<delete id="deleteMouigosaTmocksubject" parameterType="hashMap">
    DELETE FROM TB_TMOCKSUBJECT
    WHERE MOCKCODE = #{MOCKCODE}
</delete>

<!-- 응시자선택과목 삭제-->
<delete id="deleteMouigosaTuserChoiceSubject" parameterType="hashMap">
    DELETE FROM TB_TUSERCHOICESUBJECT
    WHERE IDENTYID = (SELECT IDENTYID
                      FROM TB_TORDERS
                      WHERE EXAMCODE = #{MOCKCODE})
</delete>

<!-- 신청자관리 삭제-->
<delete id="deleteMouigosaTofferer" parameterType="hashMap">
    DELETE FROM TB_TORDERS
    WHERE EXAMCODE = #{MOCKCODE}
</delete>

<!-- 성적 삭제-->
<delete id="deleteMouigosaTmockGrade" parameterType="hashMap">
    DELETE FROM TB_TMOCKGRADE
    WHERE MOCKCODE = #{MOCKCODE}
</delete>

<!-- 응시자답변 삭제-->
<delete id="deleteMouigosaTexamineeAnswer" parameterType="hashMap">
    DELETE FROM TB_TEXAMINEEANSWER
    WHERE MOCKCODE = #{MOCKCODE}
</delete>

<!-- 오답노트 삭제-->
<delete id="deleteMouigosaTwrongAnswerNote" parameterType="hashMap">
    DELETE FROM TB_TWRONGANSWERNOTE
    WHERE MOCKCODE = #{MOCKCODE}
</delete>

<!-- 모의고사 등록  모두 삭제-->
<delete id="deleteMouigosaTmockregistration" parameterType="hashMap">
    DELETE FROM TB_TMOCKREGISTRATION
    WHERE MOCKCODE = #{MOCKCODE}
</delete>

<!-- 모의고사 등록  직렬 모두 삭제-->
<delete id="deleteMouigosaTmockclsclsseries2" parameterType="hashMap">
    DELETE FROM TB_TMOCKCLSCLSSERIES
    WHERE MOCKCODE = #{MOCKCODE}
</delete>

<update id="updateExamAnswerYN" parameterType="hashMap" flushCache="true" statementType="CALLABLE">
    CALL SP_TEXAMANS_RE_UPDT(
            #{ITEMID, mode=IN},
            #{QUESTIONNUMBER, mode=IN},
            #{ANSWERNUMBER, mode=IN},
            #{USER_ID, mode=IN},
            #{result, jdbcType=INTEGER, mode=OUT})
</update>

<update id="updateUserGrade" parameterType="hashMap" flushCache="true" statementType="CALLABLE">
    CALL SP_TMOCKGRADE_UPDT(
            #{ITEMID, mode=IN},
            #{QUESTIONNUMBER, mode=IN},
            #{USER_ID, mode=IN},
            #{result, jdbcType=INTEGER, mode=OUT})
</update>

<update id="updateUserGradeAdjust" parameterType="hashMap" flushCache="true" statementType="CALLABLE">
    CALL SP_TMOCKGRADEADJUST_UPDT(
            #{ITEMID, mode=IN},
            #{QUESTIONNUMBER, mode=IN},
            #{USER_ID, mode=IN},
            #{result, jdbcType=INTEGER, mode=OUT})
</update>

<insert id="D_ATTACHFILE_Insert" parameterType="hashMap">
	INSERT INTO TB_LEC_TATTACHFILE (ATTACHFILEID, FILENAME, FILEPATH, FILESIZE, REGDATE)
	VALUES(
		#{ATTACHFILEID},
		#{FILE_NAME},
		#{FILE_PATH},
		#{FILE_SIZE},
		SYSDATE
	)
</insert>

<update id="D_AttachDeleteFile1" parameterType="hashMap">
UPDATE TB_LEC_TITEM
 SET
 	<if test="FLAG == 0">QUESTIONFID = ''</if>
 	<if test="FLAG == 1">ANSWERFID = ''</if>	
WHERE ITEMID = #{ITEMID}
</update>

<delete id="D_AttachDeleteFile2" parameterType="hashMap">
    DELETE FROM TB_LEC_TATTACHFILE
    WHERE ATTACHFILEID = #{FILENO}
</delete>

<update id="D_ATTACHFILE_update" parameterType="hashMap">
UPDATE TB_LEC_TITEM
 SET
 	<if test="FLAG == 0">QUESTIONFID = #{QUESTIONFID}</if>
 	<if test="FLAG == 1">ANSWERFID = #{ANSWERFID}</if>	
WHERE ITEMID = #{ITEMID}
</update>

<select id="D_getPoolList" parameterType="hashMap" resultType="hashMap">
    SELECT *
    FROM TB_LEC_TITEMPOOL 
    WHERE ITEMID = #{ITEMID}
    ORDER BY QUESTIONNUMBER ASC
</select>

<insert id="QUESTIONNUM_INS" parameterType="hashMap">
	INSERT INTO TB_LEC_TITEMPOOL (ITEMID, QUESTIONNUMBER, QUESTION, QUESTIONFILEID, ANSWEREXPLAIN, ANSWEREXPLAINFILEID, ANSWERNUMBER, QUESTIONRANGE, LEVELDIFFICULTY, QUESTIONPATTERN, USEFLAG, REG_ID, REG_DT, UPD_ID, UPD_DT, SMAQUESTIONFILEID)
	VALUES(
		#{ITEMID},
		(SELECT NVL(MAX(QUESTIONNUMBER),0)+1 FROM TB_LEC_TITEMPOOL WHERE ITEMID = #{ITEMID}),		
		'',
		'',
		'',
		'',
		'',
		'',
		'',
		'',
		'1',
		#{USER_ID},
		SYSDATE,
		'',
		'',
		''
	)
</insert>

<delete id="QUESTIONNUM_DEL" parameterType="hashMap">
    DELETE FROM TB_LEC_TITEMPOOL
    WHERE ITEMID = #{ITEMID}
    AND QUESTIONNUMBER = (SELECT NVL(MAX(QUESTIONNUMBER),0) FROM TB_LEC_TITEMPOOL WHERE ITEMID = #{ITEMID})
</delete>

<update id="D_LecPool_Upd" parameterType="hashMap">
	UPDATE TB_LEC_TITEMPOOL
	 SET
	 	ANSWERNUMBER = #{ANSWERNUMBER},
	 	QUESTIONFILEID = #{QUESTIONFID},
	 	ANSWEREXPLAINFILEID = #{ANSWERFID},
	 	SMAQUESTIONFILEID = #{SMAQUESTION},
	 	UPD_ID = #{USER_ID},
	 	UPD_DT = SYSDATE
	 	
	WHERE ITEMID = #{ITEMID}
	AND QUESTIONNUMBER = #{QUESTIONNUMBER}
</update>
<select id="getPoolImgFile1" parameterType="hashMap" resultType="hashMap">
	SELECT * FROM TB_LEC_TITEMPOOL A, TB_LEC_TATTACHFILE B
	WHERE A.QUESTIONFILEID = B.ATTACHFILEID
	AND ITEMID = #{ITEMID}
	AND QUESTIONNUMBER = #{QUESTIONNUMBER}
</select>
<select id="getPoolImgFile2" parameterType="hashMap" resultType="hashMap">
	SELECT * FROM TB_LEC_TITEMPOOL A, TB_LEC_TATTACHFILE B
	WHERE A.ANSWEREXPLAINFILEID = B.ATTACHFILEID
	AND ITEMID = #{ITEMID}
	AND QUESTIONNUMBER = #{QUESTIONNUMBER}
</select>
<select id="getPoolImgFile3" parameterType="hashMap" resultType="hashMap">
	SELECT * FROM TB_LEC_TITEMPOOL A, TB_LEC_TATTACHFILE B
	WHERE A.SMAQUESTIONFILEID = B.ATTACHFILEID
	AND ITEMID = #{ITEMID}
	AND QUESTIONNUMBER = #{QUESTIONNUMBER}
</select>
<update id="D_ATTACHFILE_Update" parameterType="hashMap">
	UPDATE TB_LEC_TATTACHFILE
	 SET
	 	FILENAME = #{FILE_NAME},
	 	FILEPATH = #{FILE_PATH},
	 	FILESIZE = #{FILE_SIZE},
	 	REGDATE = SYSDATE
	 	
	WHERE ATTACHFILEID = #{ATTACHFILEID}

</update>
<update id="D_LecPool_Img3_Upd" parameterType="hashMap">
	UPDATE TB_LEC_TITEMPOOL
	 SET
	 	SMAQUESTIONFILEID = #{SMAQUESTION},
	 	UPD_ID = #{USER_ID},
	 	UPD_DT = SYSDATE	 	
	WHERE ITEMID = #{ITEMID}
	AND QUESTIONNUMBER = #{QUESTIONNUMBER}
</update>
<update id="D_LecPool_Upd2" parameterType="hashMap">
	UPDATE TB_LEC_TITEMPOOL
	 SET
	 	ANSWERNUMBER = #{ANSWERNUMBER},
	 	UPD_ID = #{USER_ID},
	 	UPD_DT = SYSDATE
	 	
	WHERE ITEMID = #{ITEMID}
	AND QUESTIONNUMBER = #{QUESTIONNUMBER}
</update>
<delete id="deleteTitem" parameterType="hashMap">
    DELETE FROM TB_LEC_TITEM
    WHERE ITEMID = #{ITEMID}
</delete>
<delete id="deleteTitemPool" parameterType="hashMap">
    DELETE FROM TB_LEC_TITEMPOOL
    WHERE ITEMID = #{ITEMID}
</delete>
<!-- 문제 리스트-->
<select id="getD_QuestionList" parameterType="hashMap" resultType="hashMap"> 
    SELECT A.QUESTIONNUMBER
        , LPAD(A.QUESTIONNUMBER,2,0) NEW_QUESTIONNUMBER
        , A.ITEMID
        , A.QUESTION
        , A.QUESTIONFILEID
        , (SELECT FILEPATH FROM TB_LEC_TATTACHFILE WHERE ATTACHFILEID = A.QUESTIONFILEID) FILEPATH
        , A.ANSWEREXPLAIN
        , A.ANSWEREXPLAINFILEID
        , (SELECT FILEPATH FROM TB_LEC_TATTACHFILE WHERE ATTACHFILEID = A.ANSWEREXPLAINFILEID) FILEPATH2
    FROM TB_LEC_TITEMPOOL A
    WHERE A.ITEMID = #{ITEMID}
    ORDER BY  A.QUESTIONNUMBER
</select>
</mapper>